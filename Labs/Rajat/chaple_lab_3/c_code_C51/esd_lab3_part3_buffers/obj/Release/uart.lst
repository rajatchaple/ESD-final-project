                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf_tiny
                                     12 	.globl _printf
                                     13 	.globl _memset
                                     14 	.globl _strncat
                                     15 	.globl _strcat
                                     16 	.globl _free
                                     17 	.globl _malloc
                                     18 	.globl _atoi
                                     19 	.globl _main
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _F1
                                     27 	.globl _P
                                     28 	.globl _PS
                                     29 	.globl _PT1
                                     30 	.globl _PX1
                                     31 	.globl _PT0
                                     32 	.globl _PX0
                                     33 	.globl _RD
                                     34 	.globl _WR
                                     35 	.globl _T1
                                     36 	.globl _T0
                                     37 	.globl _INT1
                                     38 	.globl _INT0
                                     39 	.globl _TXD
                                     40 	.globl _RXD
                                     41 	.globl _P3_7
                                     42 	.globl _P3_6
                                     43 	.globl _P3_5
                                     44 	.globl _P3_4
                                     45 	.globl _P3_3
                                     46 	.globl _P3_2
                                     47 	.globl _P3_1
                                     48 	.globl _P3_0
                                     49 	.globl _EA
                                     50 	.globl _ES
                                     51 	.globl _ET1
                                     52 	.globl _EX1
                                     53 	.globl _ET0
                                     54 	.globl _EX0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _SM0
                                     64 	.globl _SM1
                                     65 	.globl _SM2
                                     66 	.globl _REN
                                     67 	.globl _TB8
                                     68 	.globl _RB8
                                     69 	.globl _TI
                                     70 	.globl _RI
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _TF1
                                     80 	.globl _TR1
                                     81 	.globl _TF0
                                     82 	.globl _TR0
                                     83 	.globl _IE1
                                     84 	.globl _IT1
                                     85 	.globl _IE0
                                     86 	.globl _IT0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _B
                                     96 	.globl _ACC
                                     97 	.globl _PSW
                                     98 	.globl _IP
                                     99 	.globl _P3
                                    100 	.globl _IE
                                    101 	.globl _P2
                                    102 	.globl _SBUF
                                    103 	.globl _SCON
                                    104 	.globl _P1
                                    105 	.globl _TH1
                                    106 	.globl _TH0
                                    107 	.globl _TL1
                                    108 	.globl _TL0
                                    109 	.globl _TMOD
                                    110 	.globl _TCON
                                    111 	.globl _PCON
                                    112 	.globl _DPH
                                    113 	.globl _DPL
                                    114 	.globl _SP
                                    115 	.globl _P0
                                    116 	.globl _total_malloced_data
                                    117 	.globl _buf_number
                                    118 	.globl _uint_to_hexstr_PARM_4
                                    119 	.globl _uint_to_hexstr_PARM_3
                                    120 	.globl _uint_to_hexstr_PARM_2
                                    121 	.globl _hexdump_PARM_2
                                    122 	.globl _command_PARM_2
                                    123 	.globl _uart_init
                                    124 	.globl _echo
                                    125 	.globl _command
                                    126 	.globl _putchar
                                    127 	.globl _getchar
                                    128 	.globl _putstr
                                    129 	.globl _accept_number_from_user
                                    130 	.globl _print_buffers
                                    131 	.globl _hexdump
                                    132 	.globl _uint_to_hexstr
                                    133 ;--------------------------------------------------------
                                    134 ; special function registers
                                    135 ;--------------------------------------------------------
                                    136 	.area RSEG    (ABS,DATA)
      000000                        137 	.org 0x0000
                           000080   138 _P0	=	0x0080
                           000081   139 _SP	=	0x0081
                           000082   140 _DPL	=	0x0082
                           000083   141 _DPH	=	0x0083
                           000087   142 _PCON	=	0x0087
                           000088   143 _TCON	=	0x0088
                           000089   144 _TMOD	=	0x0089
                           00008A   145 _TL0	=	0x008a
                           00008B   146 _TL1	=	0x008b
                           00008C   147 _TH0	=	0x008c
                           00008D   148 _TH1	=	0x008d
                           000090   149 _P1	=	0x0090
                           000098   150 _SCON	=	0x0098
                           000099   151 _SBUF	=	0x0099
                           0000A0   152 _P2	=	0x00a0
                           0000A8   153 _IE	=	0x00a8
                           0000B0   154 _P3	=	0x00b0
                           0000B8   155 _IP	=	0x00b8
                           0000D0   156 _PSW	=	0x00d0
                           0000E0   157 _ACC	=	0x00e0
                           0000F0   158 _B	=	0x00f0
                                    159 ;--------------------------------------------------------
                                    160 ; special function bits
                                    161 ;--------------------------------------------------------
                                    162 	.area RSEG    (ABS,DATA)
      000000                        163 	.org 0x0000
                           000080   164 _P0_0	=	0x0080
                           000081   165 _P0_1	=	0x0081
                           000082   166 _P0_2	=	0x0082
                           000083   167 _P0_3	=	0x0083
                           000084   168 _P0_4	=	0x0084
                           000085   169 _P0_5	=	0x0085
                           000086   170 _P0_6	=	0x0086
                           000087   171 _P0_7	=	0x0087
                           000088   172 _IT0	=	0x0088
                           000089   173 _IE0	=	0x0089
                           00008A   174 _IT1	=	0x008a
                           00008B   175 _IE1	=	0x008b
                           00008C   176 _TR0	=	0x008c
                           00008D   177 _TF0	=	0x008d
                           00008E   178 _TR1	=	0x008e
                           00008F   179 _TF1	=	0x008f
                           000090   180 _P1_0	=	0x0090
                           000091   181 _P1_1	=	0x0091
                           000092   182 _P1_2	=	0x0092
                           000093   183 _P1_3	=	0x0093
                           000094   184 _P1_4	=	0x0094
                           000095   185 _P1_5	=	0x0095
                           000096   186 _P1_6	=	0x0096
                           000097   187 _P1_7	=	0x0097
                           000098   188 _RI	=	0x0098
                           000099   189 _TI	=	0x0099
                           00009A   190 _RB8	=	0x009a
                           00009B   191 _TB8	=	0x009b
                           00009C   192 _REN	=	0x009c
                           00009D   193 _SM2	=	0x009d
                           00009E   194 _SM1	=	0x009e
                           00009F   195 _SM0	=	0x009f
                           0000A0   196 _P2_0	=	0x00a0
                           0000A1   197 _P2_1	=	0x00a1
                           0000A2   198 _P2_2	=	0x00a2
                           0000A3   199 _P2_3	=	0x00a3
                           0000A4   200 _P2_4	=	0x00a4
                           0000A5   201 _P2_5	=	0x00a5
                           0000A6   202 _P2_6	=	0x00a6
                           0000A7   203 _P2_7	=	0x00a7
                           0000A8   204 _EX0	=	0x00a8
                           0000A9   205 _ET0	=	0x00a9
                           0000AA   206 _EX1	=	0x00aa
                           0000AB   207 _ET1	=	0x00ab
                           0000AC   208 _ES	=	0x00ac
                           0000AF   209 _EA	=	0x00af
                           0000B0   210 _P3_0	=	0x00b0
                           0000B1   211 _P3_1	=	0x00b1
                           0000B2   212 _P3_2	=	0x00b2
                           0000B3   213 _P3_3	=	0x00b3
                           0000B4   214 _P3_4	=	0x00b4
                           0000B5   215 _P3_5	=	0x00b5
                           0000B6   216 _P3_6	=	0x00b6
                           0000B7   217 _P3_7	=	0x00b7
                           0000B0   218 _RXD	=	0x00b0
                           0000B1   219 _TXD	=	0x00b1
                           0000B2   220 _INT0	=	0x00b2
                           0000B3   221 _INT1	=	0x00b3
                           0000B4   222 _T0	=	0x00b4
                           0000B5   223 _T1	=	0x00b5
                           0000B6   224 _WR	=	0x00b6
                           0000B7   225 _RD	=	0x00b7
                           0000B8   226 _PX0	=	0x00b8
                           0000B9   227 _PT0	=	0x00b9
                           0000BA   228 _PX1	=	0x00ba
                           0000BB   229 _PT1	=	0x00bb
                           0000BC   230 _PS	=	0x00bc
                           0000D0   231 _P	=	0x00d0
                           0000D1   232 _F1	=	0x00d1
                           0000D2   233 _OV	=	0x00d2
                           0000D3   234 _RS0	=	0x00d3
                           0000D4   235 _RS1	=	0x00d4
                           0000D5   236 _F0	=	0x00d5
                           0000D6   237 _AC	=	0x00d6
                           0000D7   238 _CY	=	0x00d7
                                    239 ;--------------------------------------------------------
                                    240 ; overlayable register banks
                                    241 ;--------------------------------------------------------
                                    242 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        243 	.ds 8
                                    244 ;--------------------------------------------------------
                                    245 ; internal ram data
                                    246 ;--------------------------------------------------------
                                    247 	.area DSEG    (DATA)
      000000                        248 _command_sloc0_1_0:
      000000                        249 	.ds 3
      000003                        250 _command_sloc1_1_0:
      000003                        251 	.ds 3
      000006                        252 _command_sloc2_1_0:
      000006                        253 	.ds 2
      000008                        254 _command_sloc3_1_0:
      000008                        255 	.ds 2
      00000A                        256 _command_sloc4_1_0:
      00000A                        257 	.ds 3
      00000D                        258 _print_buffers_sloc0_1_0:
      00000D                        259 	.ds 3
      000010                        260 _hexdump_sloc0_1_0:
      000010                        261 	.ds 2
      000012                        262 _hexdump_sloc1_1_0:
      000012                        263 	.ds 2
      000014                        264 _uint_to_hexstr_sloc0_1_0:
      000014                        265 	.ds 4
      000018                        266 _uint_to_hexstr_sloc1_1_0:
      000018                        267 	.ds 2
      00001A                        268 _uint_to_hexstr_sloc2_1_0:
      00001A                        269 	.ds 3
      00001D                        270 _uint_to_hexstr_sloc3_1_0:
      00001D                        271 	.ds 2
                                    272 ;--------------------------------------------------------
                                    273 ; overlayable items in internal ram 
                                    274 ;--------------------------------------------------------
                                    275 ;--------------------------------------------------------
                                    276 ; indirectly addressable internal ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area ISEG    (DATA)
                                    279 ;--------------------------------------------------------
                                    280 ; absolute internal ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area IABS    (ABS,DATA)
                                    283 	.area IABS    (ABS,DATA)
                                    284 ;--------------------------------------------------------
                                    285 ; bit data
                                    286 ;--------------------------------------------------------
                                    287 	.area BSEG    (BIT)
                                    288 ;--------------------------------------------------------
                                    289 ; paged external ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area PSEG    (PAG,XDATA)
                                    292 ;--------------------------------------------------------
                                    293 ; external ram data
                                    294 ;--------------------------------------------------------
                                    295 	.area XSEG    (XDATA)
      000000                        296 _echo_c_65536_74:
      000000                        297 	.ds 1
      000001                        298 _command_PARM_2:
      000001                        299 	.ds 3
      000004                        300 _command_received_char_65536_77:
      000004                        301 	.ds 1
      000005                        302 _command_new_buff_id_65536_78:
      000005                        303 	.ds 2
      000007                        304 _putchar_c_65536_105:
      000007                        305 	.ds 2
      000009                        306 _putstr_str_65536_108:
      000009                        307 	.ds 3
      00000C                        308 _accept_number_from_user_received_char_65536_111:
      00000C                        309 	.ds 1
      00000D                        310 _accept_number_from_user_number_in_char_65536_111:
      00000D                        311 	.ds 25
      000026                        312 _accept_number_from_user_valid_number_status_65536_111:
      000026                        313 	.ds 1
      000027                        314 _accept_number_from_user_number_65536_111:
      000027                        315 	.ds 2
      000029                        316 _accept_number_from_user_i_65536_111:
      000029                        317 	.ds 2
      00002B                        318 _print_buffers_buffers_65536_116:
      00002B                        319 	.ds 3
      00002E                        320 _hexdump_PARM_2:
      00002E                        321 	.ds 4
      000032                        322 _hexdump_loc_65536_120:
      000032                        323 	.ds 3
      000035                        324 _hexdump_hex_byte_65536_121:
      000035                        325 	.ds 5
      00003A                        326 _hexdump_address_bytes_65536_121:
      00003A                        327 	.ds 7
      000041                        328 _uint_to_hexstr_PARM_2:
      000041                        329 	.ds 4
      000045                        330 _uint_to_hexstr_PARM_3:
      000045                        331 	.ds 2
      000047                        332 _uint_to_hexstr_PARM_4:
      000047                        333 	.ds 1
      000048                        334 _uint_to_hexstr_str_65536_128:
      000048                        335 	.ds 3
                                    336 ;--------------------------------------------------------
                                    337 ; absolute external ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area XABS    (ABS,XDATA)
                                    340 ;--------------------------------------------------------
                                    341 ; external initialized ram data
                                    342 ;--------------------------------------------------------
                                    343 	.area XISEG   (XDATA)
      000000                        344 _buf_number::
      000000                        345 	.ds 2
      000002                        346 _total_malloced_data::
      000002                        347 	.ds 2
                                    348 	.area HOME    (CODE)
                                    349 	.area GSINIT0 (CODE)
                                    350 	.area GSINIT1 (CODE)
                                    351 	.area GSINIT2 (CODE)
                                    352 	.area GSINIT3 (CODE)
                                    353 	.area GSINIT4 (CODE)
                                    354 	.area GSINIT5 (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area CSEG    (CODE)
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 ;--------------------------------------------------------
                                    366 ; Home
                                    367 ;--------------------------------------------------------
                                    368 	.area HOME    (CODE)
                                    369 	.area HOME    (CODE)
                                    370 ;--------------------------------------------------------
                                    371 ; code
                                    372 ;--------------------------------------------------------
                                    373 	.area CSEG    (CODE)
                                    374 ;------------------------------------------------------------
                                    375 ;Allocation info for local variables in function 'uart_init'
                                    376 ;------------------------------------------------------------
                                    377 ;	uart.c:48: void uart_init()
                                    378 ;	-----------------------------------------
                                    379 ;	 function uart_init
                                    380 ;	-----------------------------------------
      000000                        381 _uart_init:
                           000007   382 	ar7 = 0x07
                           000006   383 	ar6 = 0x06
                           000005   384 	ar5 = 0x05
                           000004   385 	ar4 = 0x04
                           000003   386 	ar3 = 0x03
                           000002   387 	ar2 = 0x02
                           000001   388 	ar1 = 0x01
                           000000   389 	ar0 = 0x00
                                    390 ;	uart.c:50: SCON = 0x50; // setting up serial configuration 8bit uart, Receive enabled
      000000 75 98 50         [24]  391 	mov	_SCON,#0x50
                                    392 ;	uart.c:51: TMOD = 0x20; // timer1 in mode2, auto-reload
      000003 75 89 20         [24]  393 	mov	_TMOD,#0x20
                                    394 ;	uart.c:56: TI = 1;
                                    395 ;	assignBit
      000006 D2 99            [12]  396 	setb	_TI
                                    397 ;	uart.c:57: P1_1 = false;
                                    398 ;	assignBit
      000008 C2 91            [12]  399 	clr	_P1_1
                                    400 ;	uart.c:58: }
      00000A 22               [24]  401 	ret
                                    402 ;------------------------------------------------------------
                                    403 ;Allocation info for local variables in function 'echo'
                                    404 ;------------------------------------------------------------
                                    405 ;c                         Allocated with name '_echo_c_65536_74'
                                    406 ;------------------------------------------------------------
                                    407 ;	uart.c:64: void echo(char c)
                                    408 ;	-----------------------------------------
                                    409 ;	 function echo
                                    410 ;	-----------------------------------------
      00000B                        411 _echo:
      00000B E5 82            [12]  412 	mov	a,dpl
      00000D 90r00r00         [24]  413 	mov	dptr,#_echo_c_65536_74
      000010 F0               [24]  414 	movx	@dptr,a
                                    415 ;	uart.c:68: switch ((int8_t)c)
      000011 E0               [24]  416 	movx	a,@dptr
      000012 FF               [12]  417 	mov	r7,a
      000013 FE               [12]  418 	mov	r6,a
      000014 BE FF 01         [24]  419 	cjne	r6,#0xff,00120$
      000017 22               [24]  420 	ret
      000018                        421 00120$:
      000018 BE 08 02         [24]  422 	cjne	r6,#0x08,00121$
      00001B 80 05            [24]  423 	sjmp	00102$
      00001D                        424 00121$:
                                    425 ;	uart.c:73: case BACKSPACE: // user presses backspace
      00001D BE 0D 20         [24]  426 	cjne	r6,#0x0d,00104$
      000020 80 12            [24]  427 	sjmp	00103$
      000022                        428 00102$:
                                    429 ;	uart.c:74: putchar(BACKSPACE);
      000022 90 00 08         [24]  430 	mov	dptr,#0x0008
      000025 12r0Ar40         [24]  431 	lcall	_putchar
                                    432 ;	uart.c:75: putchar(' ');
      000028 90 00 20         [24]  433 	mov	dptr,#0x0020
      00002B 12r0Ar40         [24]  434 	lcall	_putchar
                                    435 ;	uart.c:76: putchar(BACKSPACE);
      00002E 90 00 08         [24]  436 	mov	dptr,#0x0008
                                    437 ;	uart.c:77: break;
                                    438 ;	uart.c:79: case '\r': // user presses enter
      000031 02r0Ar40         [24]  439 	ljmp	_putchar
      000034                        440 00103$:
                                    441 ;	uart.c:80: putchar('\r');
      000034 90 00 0D         [24]  442 	mov	dptr,#0x000d
      000037 12r0Ar40         [24]  443 	lcall	_putchar
                                    444 ;	uart.c:81: putchar('\n');
      00003A 90 00 0A         [24]  445 	mov	dptr,#0x000a
                                    446 ;	uart.c:82: break;
                                    447 ;	uart.c:84: default:
      00003D 02r0Ar40         [24]  448 	ljmp	_putchar
      000040                        449 00104$:
                                    450 ;	uart.c:85: putchar(c); // echoing received chars
      000040 7E 00            [12]  451 	mov	r6,#0x00
      000042 8F 82            [24]  452 	mov	dpl,r7
      000044 8E 83            [24]  453 	mov	dph,r6
                                    454 ;	uart.c:87: }
                                    455 ;	uart.c:88: }
      000046 02r0Ar40         [24]  456 	ljmp	_putchar
                                    457 ;------------------------------------------------------------
                                    458 ;Allocation info for local variables in function 'command'
                                    459 ;------------------------------------------------------------
                                    460 ;sloc0                     Allocated with name '_command_sloc0_1_0'
                                    461 ;sloc1                     Allocated with name '_command_sloc1_1_0'
                                    462 ;sloc2                     Allocated with name '_command_sloc2_1_0'
                                    463 ;sloc3                     Allocated with name '_command_sloc3_1_0'
                                    464 ;sloc4                     Allocated with name '_command_sloc4_1_0'
                                    465 ;buffers                   Allocated with name '_command_PARM_2'
                                    466 ;received_char             Allocated with name '_command_received_char_65536_77'
                                    467 ;new_buff_size             Allocated with name '_command_new_buff_size_65536_78'
                                    468 ;buffer_to_be_deleted      Allocated with name '_command_buffer_to_be_deleted_65536_78'
                                    469 ;new_buff_id               Allocated with name '_command_new_buff_id_65536_78'
                                    470 ;iBuffer                   Allocated with name '_command_iBuffer_196608_80'
                                    471 ;i                         Allocated with name '_command_i_262144_85'
                                    472 ;i                         Allocated with name '_command_i_327680_92'
                                    473 ;i                         Allocated with name '_command_i_196608_95'
                                    474 ;i                         Allocated with name '_command_i_196608_98'
                                    475 ;iBuffer0                  Allocated with name '_command_iBuffer0_196608_101'
                                    476 ;iBuffer                   Allocated with name '_command_iBuffer_196608_103'
                                    477 ;------------------------------------------------------------
                                    478 ;	uart.c:94: void command(char received_char, buffer_t *buffers)
                                    479 ;	-----------------------------------------
                                    480 ;	 function command
                                    481 ;	-----------------------------------------
      000049                        482 _command:
      000049 E5 82            [12]  483 	mov	a,dpl
      00004B 90r00r04         [24]  484 	mov	dptr,#_command_received_char_65536_77
      00004E F0               [24]  485 	movx	@dptr,a
                                    486 ;	uart.c:98: uint16_t new_buff_id = 0;
      00004F 90r00r05         [24]  487 	mov	dptr,#_command_new_buff_id_65536_78
      000052 E4               [12]  488 	clr	a
      000053 F0               [24]  489 	movx	@dptr,a
      000054 A3               [24]  490 	inc	dptr
      000055 F0               [24]  491 	movx	@dptr,a
                                    492 ;	uart.c:100: if ((received_char >= 'a') && (received_char <= 'z')) // since small letter characters are storage characters and not command characters
      000056 90r00r04         [24]  493 	mov	dptr,#_command_received_char_65536_77
      000059 E0               [24]  494 	movx	a,@dptr
      00005A FF               [12]  495 	mov	r7,a
      00005B BF 61 00         [24]  496 	cjne	r7,#0x61,00313$
      00005E                        497 00313$:
      00005E 40 06            [24]  498 	jc	00102$
      000060 EF               [12]  499 	mov	a,r7
      000061 24 85            [12]  500 	add	a,#0xff - 0x7a
      000063 40 01            [24]  501 	jc	00102$
                                    502 ;	uart.c:101: return;
      000065 22               [24]  503 	ret
      000066                        504 00102$:
                                    505 ;	uart.c:103: switch (received_char)
      000066 90r00r04         [24]  506 	mov	dptr,#_command_received_char_65536_77
      000069 E0               [24]  507 	movx	a,@dptr
      00006A FF               [12]  508 	mov	r7,a
      00006B BF 2B 02         [24]  509 	cjne	r7,#0x2b,00316$
      00006E 80 1B            [24]  510 	sjmp	00104$
      000070                        511 00316$:
      000070 BF 2D 03         [24]  512 	cjne	r7,#0x2d,00317$
      000073 02r04r8C         [24]  513 	ljmp	00128$
      000076                        514 00317$:
      000076 BF 3D 03         [24]  515 	cjne	r7,#0x3d,00318$
      000079 02r08rDD         [24]  516 	ljmp	00141$
      00007C                        517 00318$:
      00007C BF 3F 03         [24]  518 	cjne	r7,#0x3f,00319$
      00007F 02r05rE1         [24]  519 	ljmp	00132$
      000082                        520 00319$:
      000082 BF 40 03         [24]  521 	cjne	r7,#0x40,00320$
      000085 02r09r37         [24]  522 	ljmp	00142$
      000088                        523 00320$:
      000088 02r0Ar13         [24]  524 	ljmp	00146$
                                    525 ;	uart.c:107: case '+':
      00008B                        526 00104$:
                                    527 ;	uart.c:108: total_malloced_data = 0;
      00008B 90r00r02         [24]  528 	mov	dptr,#_total_malloced_data
      00008E E4               [12]  529 	clr	a
      00008F F0               [24]  530 	movx	@dptr,a
      000090 A3               [24]  531 	inc	dptr
      000091 F0               [24]  532 	movx	@dptr,a
                                    533 ;	uart.c:109: for(int iBuffer = 0; iBuffer < MAX_NUM_OF_BUFFERS; iBuffer++)
      000092 90r00r01         [24]  534 	mov	dptr,#_command_PARM_2
      000095 E0               [24]  535 	movx	a,@dptr
      000096 F5*00            [12]  536 	mov	_command_sloc0_1_0,a
      000098 A3               [24]  537 	inc	dptr
      000099 E0               [24]  538 	movx	a,@dptr
      00009A F5*01            [12]  539 	mov	(_command_sloc0_1_0 + 1),a
      00009C A3               [24]  540 	inc	dptr
      00009D E0               [24]  541 	movx	a,@dptr
      00009E F5*02            [12]  542 	mov	(_command_sloc0_1_0 + 2),a
      0000A0 7A 00            [12]  543 	mov	r2,#0x00
      0000A2 7B 00            [12]  544 	mov	r3,#0x00
      0000A4                        545 00149$:
      0000A4 C3               [12]  546 	clr	c
      0000A5 EA               [12]  547 	mov	a,r2
      0000A6 94 D2            [12]  548 	subb	a,#0xd2
      0000A8 EB               [12]  549 	mov	a,r3
      0000A9 64 80            [12]  550 	xrl	a,#0x80
      0000AB 94 80            [12]  551 	subb	a,#0x80
      0000AD 50 53            [24]  552 	jnc	00105$
                                    553 ;	uart.c:111: total_malloced_data += buffers[iBuffer].buf_size;
      0000AF 90r00r00         [24]  554 	mov	dptr,#__mulint_PARM_2
      0000B2 EA               [12]  555 	mov	a,r2
      0000B3 F0               [24]  556 	movx	@dptr,a
      0000B4 EB               [12]  557 	mov	a,r3
      0000B5 A3               [24]  558 	inc	dptr
      0000B6 F0               [24]  559 	movx	@dptr,a
      0000B7 90 00 09         [24]  560 	mov	dptr,#0x0009
      0000BA C0 03            [24]  561 	push	ar3
      0000BC C0 02            [24]  562 	push	ar2
      0000BE 12r00r00         [24]  563 	lcall	__mulint
      0000C1 A8 82            [24]  564 	mov	r0,dpl
      0000C3 A9 83            [24]  565 	mov	r1,dph
      0000C5 D0 02            [24]  566 	pop	ar2
      0000C7 D0 03            [24]  567 	pop	ar3
      0000C9 E8               [12]  568 	mov	a,r0
      0000CA 25*00            [12]  569 	add	a,_command_sloc0_1_0
      0000CC F8               [12]  570 	mov	r0,a
      0000CD E9               [12]  571 	mov	a,r1
      0000CE 35*01            [12]  572 	addc	a,(_command_sloc0_1_0 + 1)
      0000D0 F9               [12]  573 	mov	r1,a
      0000D1 AE*02            [24]  574 	mov	r6,(_command_sloc0_1_0 + 2)
      0000D3 74 07            [12]  575 	mov	a,#0x07
      0000D5 28               [12]  576 	add	a,r0
      0000D6 F8               [12]  577 	mov	r0,a
      0000D7 E4               [12]  578 	clr	a
      0000D8 39               [12]  579 	addc	a,r1
      0000D9 F9               [12]  580 	mov	r1,a
      0000DA 88 82            [24]  581 	mov	dpl,r0
      0000DC 89 83            [24]  582 	mov	dph,r1
      0000DE 8E F0            [24]  583 	mov	b,r6
      0000E0 12r00r00         [24]  584 	lcall	__gptrget
      0000E3 F8               [12]  585 	mov	r0,a
      0000E4 A3               [24]  586 	inc	dptr
      0000E5 12r00r00         [24]  587 	lcall	__gptrget
      0000E8 F9               [12]  588 	mov	r1,a
      0000E9 90r00r02         [24]  589 	mov	dptr,#_total_malloced_data
      0000EC E0               [24]  590 	movx	a,@dptr
      0000ED FD               [12]  591 	mov	r5,a
      0000EE A3               [24]  592 	inc	dptr
      0000EF E0               [24]  593 	movx	a,@dptr
      0000F0 FE               [12]  594 	mov	r6,a
      0000F1 90r00r02         [24]  595 	mov	dptr,#_total_malloced_data
      0000F4 E8               [12]  596 	mov	a,r0
      0000F5 2D               [12]  597 	add	a,r5
      0000F6 F0               [24]  598 	movx	@dptr,a
      0000F7 E9               [12]  599 	mov	a,r1
      0000F8 3E               [12]  600 	addc	a,r6
      0000F9 A3               [24]  601 	inc	dptr
      0000FA F0               [24]  602 	movx	@dptr,a
                                    603 ;	uart.c:109: for(int iBuffer = 0; iBuffer < MAX_NUM_OF_BUFFERS; iBuffer++)
      0000FB 0A               [12]  604 	inc	r2
      0000FC BA 00 A5         [24]  605 	cjne	r2,#0x00,00149$
      0000FF 0B               [12]  606 	inc	r3
      000100 80 A2            [24]  607 	sjmp	00149$
      000102                        608 00105$:
                                    609 ;	uart.c:113: putstr("\r\n\r\n\t *** Command for adding a buffer ***\r\n");
      000102 90r00r00         [24]  610 	mov	dptr,#___str_0
      000105 75 F0 80         [24]  611 	mov	b,#0x80
      000108 12r0Ar71         [24]  612 	lcall	_putstr
                                    613 ;	uart.c:114: putstr("\r\n\t\b> Specify buffer size to be allocated (30 bytes to 300 bytes): ");
      00010B 90r00r2C         [24]  614 	mov	dptr,#___str_1
      00010E 75 F0 80         [24]  615 	mov	b,#0x80
      000111 12r0Ar71         [24]  616 	lcall	_putstr
                                    617 ;	uart.c:115: new_buff_size = accept_number_from_user();
      000114 12r0ArE7         [24]  618 	lcall	_accept_number_from_user
      000117 85 82*08         [24]  619 	mov	_command_sloc3_1_0,dpl
      00011A 85 83*09         [24]  620 	mov	(_command_sloc3_1_0 + 1),dph
                                    621 ;	uart.c:116: total_malloced_data += new_buff_size;
      00011D 90r00r02         [24]  622 	mov	dptr,#_total_malloced_data
      000120 E0               [24]  623 	movx	a,@dptr
      000121 FB               [12]  624 	mov	r3,a
      000122 A3               [24]  625 	inc	dptr
      000123 E0               [24]  626 	movx	a,@dptr
      000124 FC               [12]  627 	mov	r4,a
      000125 90r00r02         [24]  628 	mov	dptr,#_total_malloced_data
      000128 E5*08            [12]  629 	mov	a,_command_sloc3_1_0
      00012A 2B               [12]  630 	add	a,r3
      00012B F0               [24]  631 	movx	@dptr,a
      00012C E5*09            [12]  632 	mov	a,(_command_sloc3_1_0 + 1)
      00012E 3C               [12]  633 	addc	a,r4
      00012F A3               [24]  634 	inc	dptr
      000130 F0               [24]  635 	movx	@dptr,a
                                    636 ;	uart.c:121: if ((new_buff_size < 30) || (new_buff_size > 300))
      000131 AB*08            [24]  637 	mov	r3,_command_sloc3_1_0
      000133 AC*09            [24]  638 	mov	r4,(_command_sloc3_1_0 + 1)
      000135 C3               [12]  639 	clr	c
      000136 EB               [12]  640 	mov	a,r3
      000137 94 1E            [12]  641 	subb	a,#0x1e
      000139 EC               [12]  642 	mov	a,r4
      00013A 94 00            [12]  643 	subb	a,#0x00
      00013C 40 0D            [24]  644 	jc	00124$
      00013E AB*08            [24]  645 	mov	r3,_command_sloc3_1_0
      000140 AC*09            [24]  646 	mov	r4,(_command_sloc3_1_0 + 1)
      000142 C3               [12]  647 	clr	c
      000143 74 2C            [12]  648 	mov	a,#0x2c
      000145 9B               [12]  649 	subb	a,r3
      000146 74 01            [12]  650 	mov	a,#0x01
      000148 9C               [12]  651 	subb	a,r4
      000149 50 29            [24]  652 	jnc	00125$
      00014B                        653 00124$:
                                    654 ;	uart.c:123: putstr("\t Error: Invalid size");
      00014B 90r00r70         [24]  655 	mov	dptr,#___str_2
      00014E 75 F0 80         [24]  656 	mov	b,#0x80
      000151 12r0Ar71         [24]  657 	lcall	_putstr
                                    658 ;	uart.c:124: putstr("\r\n\t - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
      000154 90r00r86         [24]  659 	mov	dptr,#___str_3
      000157 75 F0 80         [24]  660 	mov	b,#0x80
      00015A 12r0Ar71         [24]  661 	lcall	_putstr
                                    662 ;	uart.c:125: command('+', buffers); // accepting size again
      00015D 90r00r01         [24]  663 	mov	dptr,#_command_PARM_2
      000160 E5*00            [12]  664 	mov	a,_command_sloc0_1_0
      000162 F0               [24]  665 	movx	@dptr,a
      000163 E5*01            [12]  666 	mov	a,(_command_sloc0_1_0 + 1)
      000165 A3               [24]  667 	inc	dptr
      000166 F0               [24]  668 	movx	@dptr,a
      000167 E5*02            [12]  669 	mov	a,(_command_sloc0_1_0 + 2)
      000169 A3               [24]  670 	inc	dptr
      00016A F0               [24]  671 	movx	@dptr,a
      00016B 75 82 2B         [24]  672 	mov	dpl,#0x2b
      00016E 12r00r49         [24]  673 	lcall	_command
      000171 02r0Ar2E         [24]  674 	ljmp	00147$
      000174                        675 00125$:
                                    676 ;	uart.c:127: else if(total_malloced_data > __sdcc_heap_size)
      000174 90r00r02         [24]  677 	mov	dptr,#_total_malloced_data
      000177 E0               [24]  678 	movx	a,@dptr
      000178 FB               [12]  679 	mov	r3,a
      000179 A3               [24]  680 	inc	dptr
      00017A E0               [24]  681 	movx	a,@dptr
      00017B FC               [12]  682 	mov	r4,a
      00017C 90r00r00         [24]  683 	mov	dptr,#___sdcc_heap_size
      00017F E4               [12]  684 	clr	a
      000180 93               [24]  685 	movc	a,@a+dptr
      000181 F9               [12]  686 	mov	r1,a
      000182 74 01            [12]  687 	mov	a,#0x01
      000184 93               [24]  688 	movc	a,@a+dptr
      000185 FA               [12]  689 	mov	r2,a
      000186 C3               [12]  690 	clr	c
      000187 E9               [12]  691 	mov	a,r1
      000188 9B               [12]  692 	subb	a,r3
      000189 EA               [12]  693 	mov	a,r2
      00018A 9C               [12]  694 	subb	a,r4
      00018B 50 0C            [24]  695 	jnc	00185$
                                    696 ;	uart.c:129: putstr("\t Error: Out of memory, free some buffers to continue");
      00018D 90r00rC8         [24]  697 	mov	dptr,#___str_4
      000190 75 F0 80         [24]  698 	mov	b,#0x80
      000193 12r0Ar71         [24]  699 	lcall	_putstr
                                    700 ;	uart.c:130: break;
      000196 02r0Ar2E         [24]  701 	ljmp	00147$
                                    702 ;	uart.c:135: for (int i = 2; i < MAX_NUM_OF_BUFFERS; i++)
      000199                        703 00185$:
      000199 85*00*03         [24]  704 	mov	_command_sloc1_1_0,_command_sloc0_1_0
      00019C 85*01*04         [24]  705 	mov	(_command_sloc1_1_0 + 1),(_command_sloc0_1_0 + 1)
      00019F 85*02*05         [24]  706 	mov	(_command_sloc1_1_0 + 2),(_command_sloc0_1_0 + 2)
      0001A2 78 02            [12]  707 	mov	r0,#0x02
      0001A4 79 00            [12]  708 	mov	r1,#0x00
      0001A6                        709 00152$:
      0001A6 C3               [12]  710 	clr	c
      0001A7 E8               [12]  711 	mov	a,r0
      0001A8 94 D2            [12]  712 	subb	a,#0xd2
      0001AA E9               [12]  713 	mov	a,r1
      0001AB 64 80            [12]  714 	xrl	a,#0x80
      0001AD 94 80            [12]  715 	subb	a,#0x80
      0001AF 50 5E            [24]  716 	jnc	00110$
                                    717 ;	uart.c:137: if (buffers[i].buffer_pointer == 0)
      0001B1 90r00r00         [24]  718 	mov	dptr,#__mulint_PARM_2
      0001B4 E8               [12]  719 	mov	a,r0
      0001B5 F0               [24]  720 	movx	@dptr,a
      0001B6 E9               [12]  721 	mov	a,r1
      0001B7 A3               [24]  722 	inc	dptr
      0001B8 F0               [24]  723 	movx	@dptr,a
      0001B9 90 00 09         [24]  724 	mov	dptr,#0x0009
      0001BC C0 01            [24]  725 	push	ar1
      0001BE C0 00            [24]  726 	push	ar0
      0001C0 12r00r00         [24]  727 	lcall	__mulint
      0001C3 AD 82            [24]  728 	mov	r5,dpl
      0001C5 AE 83            [24]  729 	mov	r6,dph
      0001C7 D0 00            [24]  730 	pop	ar0
      0001C9 D0 01            [24]  731 	pop	ar1
      0001CB ED               [12]  732 	mov	a,r5
      0001CC 25*03            [12]  733 	add	a,_command_sloc1_1_0
      0001CE FD               [12]  734 	mov	r5,a
      0001CF EE               [12]  735 	mov	a,r6
      0001D0 35*04            [12]  736 	addc	a,(_command_sloc1_1_0 + 1)
      0001D2 FC               [12]  737 	mov	r4,a
      0001D3 AE*05            [24]  738 	mov	r6,(_command_sloc1_1_0 + 2)
      0001D5 8D 82            [24]  739 	mov	dpl,r5
      0001D7 8C 83            [24]  740 	mov	dph,r4
      0001D9 8E F0            [24]  741 	mov	b,r6
      0001DB 12r00r00         [24]  742 	lcall	__gptrget
      0001DE FD               [12]  743 	mov	r5,a
      0001DF A3               [24]  744 	inc	dptr
      0001E0 12r00r00         [24]  745 	lcall	__gptrget
      0001E3 FC               [12]  746 	mov	r4,a
      0001E4 A3               [24]  747 	inc	dptr
      0001E5 12r00r00         [24]  748 	lcall	__gptrget
      0001E8 FE               [12]  749 	mov	r6,a
      0001E9 ED               [12]  750 	mov	a,r5
      0001EA 4C               [12]  751 	orl	a,r4
      0001EB 70 0A            [24]  752 	jnz	00107$
                                    753 ;	uart.c:139: new_buff_id = i;
      0001ED 90r00r05         [24]  754 	mov	dptr,#_command_new_buff_id_65536_78
      0001F0 E8               [12]  755 	mov	a,r0
      0001F1 F0               [24]  756 	movx	@dptr,a
      0001F2 E9               [12]  757 	mov	a,r1
      0001F3 A3               [24]  758 	inc	dptr
      0001F4 F0               [24]  759 	movx	@dptr,a
                                    760 ;	uart.c:140: break;
      0001F5 80 18            [24]  761 	sjmp	00110$
      0001F7                        762 00107$:
                                    763 ;	uart.c:142: if (i == MAX_NUM_OF_BUFFERS - 1)
      0001F7 B8 D1 0E         [24]  764 	cjne	r0,#0xd1,00153$
      0001FA B9 00 0B         [24]  765 	cjne	r1,#0x00,00153$
                                    766 ;	uart.c:144: putstr("\tError: buffer could not be added\r\n");
      0001FD 90r00rFE         [24]  767 	mov	dptr,#___str_5
      000200 75 F0 80         [24]  768 	mov	b,#0x80
      000203 12r0Ar71         [24]  769 	lcall	_putstr
                                    770 ;	uart.c:145: break;
      000206 80 07            [24]  771 	sjmp	00110$
      000208                        772 00153$:
                                    773 ;	uart.c:135: for (int i = 2; i < MAX_NUM_OF_BUFFERS; i++)
      000208 08               [12]  774 	inc	r0
      000209 B8 00 9A         [24]  775 	cjne	r0,#0x00,00152$
      00020C 09               [12]  776 	inc	r1
      00020D 80 97            [24]  777 	sjmp	00152$
      00020F                        778 00110$:
                                    779 ;	uart.c:149: buffers[new_buff_id].buffer_pointer = (char *)malloc(sizeof(char) * new_buff_size);
      00020F AA*00            [24]  780 	mov	r2,_command_sloc0_1_0
      000211 AB*01            [24]  781 	mov	r3,(_command_sloc0_1_0 + 1)
      000213 AC*02            [24]  782 	mov	r4,(_command_sloc0_1_0 + 2)
      000215 90r00r05         [24]  783 	mov	dptr,#_command_new_buff_id_65536_78
      000218 E0               [24]  784 	movx	a,@dptr
      000219 F5*06            [12]  785 	mov	_command_sloc2_1_0,a
      00021B A3               [24]  786 	inc	dptr
      00021C E0               [24]  787 	movx	a,@dptr
      00021D F5*07            [12]  788 	mov	(_command_sloc2_1_0 + 1),a
      00021F 90r00r00         [24]  789 	mov	dptr,#__mulint_PARM_2
      000222 E5*06            [12]  790 	mov	a,_command_sloc2_1_0
      000224 F0               [24]  791 	movx	@dptr,a
      000225 E5*07            [12]  792 	mov	a,(_command_sloc2_1_0 + 1)
      000227 A3               [24]  793 	inc	dptr
      000228 F0               [24]  794 	movx	@dptr,a
      000229 90 00 09         [24]  795 	mov	dptr,#0x0009
      00022C C0 04            [24]  796 	push	ar4
      00022E C0 03            [24]  797 	push	ar3
      000230 C0 02            [24]  798 	push	ar2
      000232 12r00r00         [24]  799 	lcall	__mulint
      000235 85 82*03         [24]  800 	mov	_command_sloc1_1_0,dpl
      000238 85 83*04         [24]  801 	mov	(_command_sloc1_1_0 + 1),dph
      00023B E5*03            [12]  802 	mov	a,_command_sloc1_1_0
      00023D 25*00            [12]  803 	add	a,_command_sloc0_1_0
      00023F F5*0A            [12]  804 	mov	_command_sloc4_1_0,a
      000241 E5*04            [12]  805 	mov	a,(_command_sloc1_1_0 + 1)
      000243 35*01            [12]  806 	addc	a,(_command_sloc0_1_0 + 1)
      000245 F5*0B            [12]  807 	mov	(_command_sloc4_1_0 + 1),a
      000247 85*02*0C         [24]  808 	mov	(_command_sloc4_1_0 + 2),(_command_sloc0_1_0 + 2)
      00024A 85*08 82         [24]  809 	mov	dpl,_command_sloc3_1_0
      00024D 85*09 83         [24]  810 	mov	dph,(_command_sloc3_1_0 + 1)
      000250 12r00r00         [24]  811 	lcall	_malloc
      000253 AD 82            [24]  812 	mov	r5,dpl
      000255 AE 83            [24]  813 	mov	r6,dph
      000257 D0 02            [24]  814 	pop	ar2
      000259 D0 03            [24]  815 	pop	ar3
      00025B D0 04            [24]  816 	pop	ar4
      00025D 8E 01            [24]  817 	mov	ar1,r6
      00025F 7E 00            [12]  818 	mov	r6,#0x00
      000261 85*0A 82         [24]  819 	mov	dpl,_command_sloc4_1_0
      000264 85*0B 83         [24]  820 	mov	dph,(_command_sloc4_1_0 + 1)
      000267 85*0C F0         [24]  821 	mov	b,(_command_sloc4_1_0 + 2)
      00026A ED               [12]  822 	mov	a,r5
      00026B 12r00r00         [24]  823 	lcall	__gptrput
      00026E A3               [24]  824 	inc	dptr
      00026F E9               [12]  825 	mov	a,r1
      000270 12r00r00         [24]  826 	lcall	__gptrput
      000273 A3               [24]  827 	inc	dptr
      000274 EE               [12]  828 	mov	a,r6
      000275 12r00r00         [24]  829 	lcall	__gptrput
                                    830 ;	uart.c:150: if (buffers[new_buff_id].buffer_pointer == NULL)
      000278 ED               [12]  831 	mov	a,r5
      000279 49               [12]  832 	orl	a,r1
      00027A 70 0C            [24]  833 	jnz	00112$
                                    834 ;	uart.c:152: putstr("\tError: Failed allocating memory\r\n");
      00027C 90r01r22         [24]  835 	mov	dptr,#___str_6
      00027F 75 F0 80         [24]  836 	mov	b,#0x80
      000282 12r0Ar71         [24]  837 	lcall	_putstr
                                    838 ;	uart.c:153: break;
      000285 02r0Ar2E         [24]  839 	ljmp	00147$
      000288                        840 00112$:
                                    841 ;	uart.c:157: putstr("\tNew buffer has been created\r\n");
      000288 C0 02            [24]  842 	push	ar2
      00028A C0 03            [24]  843 	push	ar3
      00028C C0 04            [24]  844 	push	ar4
      00028E 90r01r45         [24]  845 	mov	dptr,#___str_7
      000291 75 F0 80         [24]  846 	mov	b,#0x80
      000294 C0 04            [24]  847 	push	ar4
      000296 C0 03            [24]  848 	push	ar3
      000298 C0 02            [24]  849 	push	ar2
      00029A 12r0Ar71         [24]  850 	lcall	_putstr
      00029D D0 02            [24]  851 	pop	ar2
      00029F D0 03            [24]  852 	pop	ar3
      0002A1 D0 04            [24]  853 	pop	ar4
                                    854 ;	uart.c:160: buffers[new_buff_id].buf_id = new_buff_id;
      0002A3 E5*03            [12]  855 	mov	a,_command_sloc1_1_0
      0002A5 25*00            [12]  856 	add	a,_command_sloc0_1_0
      0002A7 F9               [12]  857 	mov	r1,a
      0002A8 E5*04            [12]  858 	mov	a,(_command_sloc1_1_0 + 1)
      0002AA 35*01            [12]  859 	addc	a,(_command_sloc0_1_0 + 1)
      0002AC FD               [12]  860 	mov	r5,a
      0002AD AE*02            [24]  861 	mov	r6,(_command_sloc0_1_0 + 2)
      0002AF 74 05            [12]  862 	mov	a,#0x05
      0002B1 29               [12]  863 	add	a,r1
      0002B2 F8               [12]  864 	mov	r0,a
      0002B3 E4               [12]  865 	clr	a
      0002B4 3D               [12]  866 	addc	a,r5
      0002B5 FB               [12]  867 	mov	r3,a
      0002B6 8E 04            [24]  868 	mov	ar4,r6
      0002B8 88 82            [24]  869 	mov	dpl,r0
      0002BA 8B 83            [24]  870 	mov	dph,r3
      0002BC 8C F0            [24]  871 	mov	b,r4
      0002BE E5*06            [12]  872 	mov	a,_command_sloc2_1_0
      0002C0 12r00r00         [24]  873 	lcall	__gptrput
      0002C3 A3               [24]  874 	inc	dptr
      0002C4 E5*07            [12]  875 	mov	a,(_command_sloc2_1_0 + 1)
      0002C6 12r00r00         [24]  876 	lcall	__gptrput
                                    877 ;	uart.c:161: buffers[new_buff_id].buf_size = new_buff_size;
      0002C9 74 07            [12]  878 	mov	a,#0x07
      0002CB 29               [12]  879 	add	a,r1
      0002CC FA               [12]  880 	mov	r2,a
      0002CD E4               [12]  881 	clr	a
      0002CE 3D               [12]  882 	addc	a,r5
      0002CF FB               [12]  883 	mov	r3,a
      0002D0 8E 04            [24]  884 	mov	ar4,r6
      0002D2 8A 82            [24]  885 	mov	dpl,r2
      0002D4 8B 83            [24]  886 	mov	dph,r3
      0002D6 8C F0            [24]  887 	mov	b,r4
      0002D8 E5*08            [12]  888 	mov	a,_command_sloc3_1_0
      0002DA 12r00r00         [24]  889 	lcall	__gptrput
      0002DD A3               [24]  890 	inc	dptr
      0002DE E5*09            [12]  891 	mov	a,(_command_sloc3_1_0 + 1)
      0002E0 12r00r00         [24]  892 	lcall	__gptrput
                                    893 ;	uart.c:162: buffers[new_buff_id].buf_index = 0;
      0002E3 74 03            [12]  894 	mov	a,#0x03
      0002E5 29               [12]  895 	add	a,r1
      0002E6 F9               [12]  896 	mov	r1,a
      0002E7 E4               [12]  897 	clr	a
      0002E8 3D               [12]  898 	addc	a,r5
      0002E9 FD               [12]  899 	mov	r5,a
      0002EA 89 82            [24]  900 	mov	dpl,r1
      0002EC 8D 83            [24]  901 	mov	dph,r5
      0002EE 8E F0            [24]  902 	mov	b,r6
      0002F0 E4               [12]  903 	clr	a
      0002F1 12r00r00         [24]  904 	lcall	__gptrput
      0002F4 A3               [24]  905 	inc	dptr
      0002F5 12r00r00         [24]  906 	lcall	__gptrput
                                    907 ;	uart.c:166: printf_tiny("\r\n\r\n\t\t-------------------------");
      0002F8 C0 04            [24]  908 	push	ar4
      0002FA C0 03            [24]  909 	push	ar3
      0002FC C0 02            [24]  910 	push	ar2
      0002FE 74r64            [12]  911 	mov	a,#___str_8
      000300 C0 E0            [24]  912 	push	acc
      000302 74s01            [12]  913 	mov	a,#(___str_8 >> 8)
      000304 C0 E0            [24]  914 	push	acc
      000306 12r00r00         [24]  915 	lcall	_printf_tiny
      000309 15 81            [12]  916 	dec	sp
      00030B 15 81            [12]  917 	dec	sp
                                    918 ;	uart.c:167: printf_tiny("\r\n\t\t|buffer id|\tsize\t|");
      00030D 74r84            [12]  919 	mov	a,#___str_9
      00030F C0 E0            [24]  920 	push	acc
      000311 74s01            [12]  921 	mov	a,#(___str_9 >> 8)
      000313 C0 E0            [24]  922 	push	acc
      000315 12r00r00         [24]  923 	lcall	_printf_tiny
      000318 15 81            [12]  924 	dec	sp
      00031A 15 81            [12]  925 	dec	sp
                                    926 ;	uart.c:168: printf_tiny("\r\n\t\t-------------------------");
      00031C 74r9B            [12]  927 	mov	a,#___str_10
      00031E C0 E0            [24]  928 	push	acc
      000320 74s01            [12]  929 	mov	a,#(___str_10 >> 8)
      000322 C0 E0            [24]  930 	push	acc
      000324 12r00r00         [24]  931 	lcall	_printf_tiny
      000327 15 81            [12]  932 	dec	sp
      000329 15 81            [12]  933 	dec	sp
      00032B D0 02            [24]  934 	pop	ar2
      00032D D0 03            [24]  935 	pop	ar3
      00032F D0 04            [24]  936 	pop	ar4
                                    937 ;	uart.c:169: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      000331 85*06*0A         [24]  938 	mov	_command_sloc4_1_0,_command_sloc2_1_0
      000334 85*07*0B         [24]  939 	mov	(_command_sloc4_1_0 + 1),(_command_sloc2_1_0 + 1)
      000337 E4               [12]  940 	clr	a
      000338 F5*08            [12]  941 	mov	_command_sloc3_1_0,a
      00033A F5*09            [12]  942 	mov	(_command_sloc3_1_0 + 1),a
                                    943 ;	uart.c:265: putstr("Enter command (+, -, ?, =, @) or input: ");
      00033C D0 04            [24]  944 	pop	ar4
      00033E D0 03            [24]  945 	pop	ar3
      000340 D0 02            [24]  946 	pop	ar2
                                    947 ;	uart.c:169: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      000342                        948 00155$:
      000342 C3               [12]  949 	clr	c
      000343 E5*08            [12]  950 	mov	a,_command_sloc3_1_0
      000345 94 D2            [12]  951 	subb	a,#0xd2
      000347 E5*09            [12]  952 	mov	a,(_command_sloc3_1_0 + 1)
      000349 64 80            [12]  953 	xrl	a,#0x80
      00034B 94 80            [12]  954 	subb	a,#0x80
      00034D 40 03            [24]  955 	jc	00332$
      00034F 02r04r7A         [24]  956 	ljmp	00120$
      000352                        957 00332$:
                                    958 ;	uart.c:171: if ((buffers[i].buffer_pointer != 0) || (i == 0) || (i == 1))
      000352 90r00r00         [24]  959 	mov	dptr,#__mulint_PARM_2
      000355 E5*08            [12]  960 	mov	a,_command_sloc3_1_0
      000357 F0               [24]  961 	movx	@dptr,a
      000358 E5*09            [12]  962 	mov	a,(_command_sloc3_1_0 + 1)
      00035A A3               [24]  963 	inc	dptr
      00035B F0               [24]  964 	movx	@dptr,a
      00035C 90 00 09         [24]  965 	mov	dptr,#0x0009
      00035F C0 04            [24]  966 	push	ar4
      000361 C0 03            [24]  967 	push	ar3
      000363 C0 02            [24]  968 	push	ar2
      000365 12r00r00         [24]  969 	lcall	__mulint
      000368 AD 82            [24]  970 	mov	r5,dpl
      00036A AE 83            [24]  971 	mov	r6,dph
      00036C D0 02            [24]  972 	pop	ar2
      00036E D0 03            [24]  973 	pop	ar3
      000370 D0 04            [24]  974 	pop	ar4
      000372 ED               [12]  975 	mov	a,r5
      000373 2A               [12]  976 	add	a,r2
      000374 FD               [12]  977 	mov	r5,a
      000375 EE               [12]  978 	mov	a,r6
      000376 3B               [12]  979 	addc	a,r3
      000377 F9               [12]  980 	mov	r1,a
      000378 8C 06            [24]  981 	mov	ar6,r4
      00037A 8D 82            [24]  982 	mov	dpl,r5
      00037C 89 83            [24]  983 	mov	dph,r1
      00037E 8E F0            [24]  984 	mov	b,r6
      000380 12r00r00         [24]  985 	lcall	__gptrget
      000383 FD               [12]  986 	mov	r5,a
      000384 A3               [24]  987 	inc	dptr
      000385 12r00r00         [24]  988 	lcall	__gptrget
      000388 F9               [12]  989 	mov	r1,a
      000389 A3               [24]  990 	inc	dptr
      00038A 12r00r00         [24]  991 	lcall	__gptrget
      00038D FE               [12]  992 	mov	r6,a
      00038E ED               [12]  993 	mov	a,r5
      00038F 49               [12]  994 	orl	a,r1
      000390 70 14            [24]  995 	jnz	00116$
      000392 E5*08            [12]  996 	mov	a,_command_sloc3_1_0
      000394 45*09            [12]  997 	orl	a,(_command_sloc3_1_0 + 1)
      000396 60 0E            [24]  998 	jz	00116$
      000398 74 01            [12]  999 	mov	a,#0x01
      00039A B5*08 06         [24] 1000 	cjne	a,_command_sloc3_1_0,00335$
      00039D 14               [12] 1001 	dec	a
      00039E B5*09 02         [24] 1002 	cjne	a,(_command_sloc3_1_0 + 1),00335$
      0003A1 80 03            [24] 1003 	sjmp	00336$
      0003A3                       1004 00335$:
      0003A3 02r04r6F         [24] 1005 	ljmp	00156$
      0003A6                       1006 00336$:
      0003A6                       1007 00116$:
                                   1008 ;	uart.c:173: printf_tiny("\r\n\t\t|    %d    |\t%d\t|", buffers[i].buf_id, buffers[i].buf_size);
      0003A6 90r00r00         [24] 1009 	mov	dptr,#__mulint_PARM_2
      0003A9 E5*08            [12] 1010 	mov	a,_command_sloc3_1_0
      0003AB F0               [24] 1011 	movx	@dptr,a
      0003AC E5*09            [12] 1012 	mov	a,(_command_sloc3_1_0 + 1)
      0003AE A3               [24] 1013 	inc	dptr
      0003AF F0               [24] 1014 	movx	@dptr,a
      0003B0 90 00 09         [24] 1015 	mov	dptr,#0x0009
      0003B3 C0 04            [24] 1016 	push	ar4
      0003B5 C0 03            [24] 1017 	push	ar3
      0003B7 C0 02            [24] 1018 	push	ar2
      0003B9 12r00r00         [24] 1019 	lcall	__mulint
      0003BC AD 82            [24] 1020 	mov	r5,dpl
      0003BE AE 83            [24] 1021 	mov	r6,dph
      0003C0 D0 02            [24] 1022 	pop	ar2
      0003C2 D0 03            [24] 1023 	pop	ar3
      0003C4 D0 04            [24] 1024 	pop	ar4
      0003C6 ED               [12] 1025 	mov	a,r5
      0003C7 2A               [12] 1026 	add	a,r2
      0003C8 FD               [12] 1027 	mov	r5,a
      0003C9 EE               [12] 1028 	mov	a,r6
      0003CA 3B               [12] 1029 	addc	a,r3
      0003CB F9               [12] 1030 	mov	r1,a
      0003CC 8C 06            [24] 1031 	mov	ar6,r4
      0003CE C0 02            [24] 1032 	push	ar2
      0003D0 C0 03            [24] 1033 	push	ar3
      0003D2 C0 04            [24] 1034 	push	ar4
      0003D4 74 07            [12] 1035 	mov	a,#0x07
      0003D6 2D               [12] 1036 	add	a,r5
      0003D7 F8               [12] 1037 	mov	r0,a
      0003D8 E4               [12] 1038 	clr	a
      0003D9 39               [12] 1039 	addc	a,r1
      0003DA FB               [12] 1040 	mov	r3,a
      0003DB 8E 04            [24] 1041 	mov	ar4,r6
      0003DD 88 82            [24] 1042 	mov	dpl,r0
      0003DF 8B 83            [24] 1043 	mov	dph,r3
      0003E1 8C F0            [24] 1044 	mov	b,r4
      0003E3 12r00r00         [24] 1045 	lcall	__gptrget
      0003E6 F8               [12] 1046 	mov	r0,a
      0003E7 A3               [24] 1047 	inc	dptr
      0003E8 12r00r00         [24] 1048 	lcall	__gptrget
      0003EB FB               [12] 1049 	mov	r3,a
      0003EC 74 05            [12] 1050 	mov	a,#0x05
      0003EE 2D               [12] 1051 	add	a,r5
      0003EF FD               [12] 1052 	mov	r5,a
      0003F0 E4               [12] 1053 	clr	a
      0003F1 39               [12] 1054 	addc	a,r1
      0003F2 F9               [12] 1055 	mov	r1,a
      0003F3 8D 82            [24] 1056 	mov	dpl,r5
      0003F5 89 83            [24] 1057 	mov	dph,r1
      0003F7 8E F0            [24] 1058 	mov	b,r6
      0003F9 12r00r00         [24] 1059 	lcall	__gptrget
      0003FC FA               [12] 1060 	mov	r2,a
      0003FD A3               [24] 1061 	inc	dptr
      0003FE 12r00r00         [24] 1062 	lcall	__gptrget
      000401 FC               [12] 1063 	mov	r4,a
      000402 C0 06            [24] 1064 	push	ar6
      000404 C0 05            [24] 1065 	push	ar5
      000406 C0 04            [24] 1066 	push	ar4
      000408 C0 03            [24] 1067 	push	ar3
      00040A C0 02            [24] 1068 	push	ar2
      00040C C0 01            [24] 1069 	push	ar1
      00040E C0 00            [24] 1070 	push	ar0
      000410 C0 03            [24] 1071 	push	ar3
      000412 C0 02            [24] 1072 	push	ar2
      000414 C0 04            [24] 1073 	push	ar4
      000416 74rB9            [12] 1074 	mov	a,#___str_11
      000418 C0 E0            [24] 1075 	push	acc
      00041A 74s01            [12] 1076 	mov	a,#(___str_11 >> 8)
      00041C C0 E0            [24] 1077 	push	acc
      00041E 12r00r00         [24] 1078 	lcall	_printf_tiny
      000421 E5 81            [12] 1079 	mov	a,sp
      000423 24 FA            [12] 1080 	add	a,#0xfa
      000425 F5 81            [12] 1081 	mov	sp,a
      000427 D0 01            [24] 1082 	pop	ar1
      000429 D0 02            [24] 1083 	pop	ar2
      00042B D0 03            [24] 1084 	pop	ar3
      00042D D0 04            [24] 1085 	pop	ar4
      00042F D0 05            [24] 1086 	pop	ar5
      000431 D0 06            [24] 1087 	pop	ar6
                                   1088 ;	uart.c:174: if (buffers[i].buf_id == new_buff_id)
      000433 8D 82            [24] 1089 	mov	dpl,r5
      000435 89 83            [24] 1090 	mov	dph,r1
      000437 8E F0            [24] 1091 	mov	b,r6
      000439 12r00r00         [24] 1092 	lcall	__gptrget
      00043C FD               [12] 1093 	mov	r5,a
      00043D A3               [24] 1094 	inc	dptr
      00043E 12r00r00         [24] 1095 	lcall	__gptrget
      000441 F9               [12] 1096 	mov	r1,a
      000442 ED               [12] 1097 	mov	a,r5
      000443 B5*0A 06         [24] 1098 	cjne	a,_command_sloc4_1_0,00337$
      000446 E9               [12] 1099 	mov	a,r1
      000447 B5*0B 02         [24] 1100 	cjne	a,(_command_sloc4_1_0 + 1),00337$
      00044A 80 08            [24] 1101 	sjmp	00338$
      00044C                       1102 00337$:
      00044C D0 04            [24] 1103 	pop	ar4
      00044E D0 03            [24] 1104 	pop	ar3
      000450 D0 02            [24] 1105 	pop	ar2
      000452 80 1B            [24] 1106 	sjmp	00156$
      000454                       1107 00338$:
      000454 D0 04            [24] 1108 	pop	ar4
      000456 D0 03            [24] 1109 	pop	ar3
      000458 D0 02            [24] 1110 	pop	ar2
                                   1111 ;	uart.c:175: putstr(" <----- Newly added");
      00045A 90r01rCF         [24] 1112 	mov	dptr,#___str_12
      00045D 75 F0 80         [24] 1113 	mov	b,#0x80
      000460 C0 04            [24] 1114 	push	ar4
      000462 C0 03            [24] 1115 	push	ar3
      000464 C0 02            [24] 1116 	push	ar2
      000466 12r0Ar71         [24] 1117 	lcall	_putstr
      000469 D0 02            [24] 1118 	pop	ar2
      00046B D0 03            [24] 1119 	pop	ar3
      00046D D0 04            [24] 1120 	pop	ar4
      00046F                       1121 00156$:
                                   1122 ;	uart.c:169: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      00046F 05*08            [12] 1123 	inc	_command_sloc3_1_0
      000471 E4               [12] 1124 	clr	a
      000472 B5*08 02         [24] 1125 	cjne	a,_command_sloc3_1_0,00339$
      000475 05*09            [12] 1126 	inc	(_command_sloc3_1_0 + 1)
      000477                       1127 00339$:
      000477 02r03r42         [24] 1128 	ljmp	00155$
      00047A                       1129 00120$:
                                   1130 ;	uart.c:178: printf_tiny("\r\n\t\t-------------------------\r\n");
      00047A 74rE3            [12] 1131 	mov	a,#___str_13
      00047C C0 E0            [24] 1132 	push	acc
      00047E 74s01            [12] 1133 	mov	a,#(___str_13 >> 8)
      000480 C0 E0            [24] 1134 	push	acc
      000482 12r00r00         [24] 1135 	lcall	_printf_tiny
      000485 15 81            [12] 1136 	dec	sp
      000487 15 81            [12] 1137 	dec	sp
                                   1138 ;	uart.c:182: break;
      000489 02r0Ar2E         [24] 1139 	ljmp	00147$
                                   1140 ;	uart.c:185: case '-':
      00048C                       1141 00128$:
                                   1142 ;	uart.c:186: putstr("\r\n\r\n\t *** Command for removing a buffer ***\r\n");
      00048C 90r02r03         [24] 1143 	mov	dptr,#___str_14
      00048F 75 F0 80         [24] 1144 	mov	b,#0x80
      000492 12r0Ar71         [24] 1145 	lcall	_putstr
                                   1146 ;	uart.c:187: print_buffers(buffers);
      000495 90r00r01         [24] 1147 	mov	dptr,#_command_PARM_2
      000498 E0               [24] 1148 	movx	a,@dptr
      000499 FC               [12] 1149 	mov	r4,a
      00049A A3               [24] 1150 	inc	dptr
      00049B E0               [24] 1151 	movx	a,@dptr
      00049C FD               [12] 1152 	mov	r5,a
      00049D A3               [24] 1153 	inc	dptr
      00049E E0               [24] 1154 	movx	a,@dptr
      00049F FE               [12] 1155 	mov	r6,a
      0004A0 8C 82            [24] 1156 	mov	dpl,r4
      0004A2 8D 83            [24] 1157 	mov	dph,r5
      0004A4 8E F0            [24] 1158 	mov	b,r6
      0004A6 12r0Cr71         [24] 1159 	lcall	_print_buffers
                                   1160 ;	uart.c:188: putstr("\r\n\t\b> Specify buffer to be delated (select id from the list): ");
      0004A9 90r02r31         [24] 1161 	mov	dptr,#___str_15
      0004AC 75 F0 80         [24] 1162 	mov	b,#0x80
      0004AF 12r0Ar71         [24] 1163 	lcall	_putstr
                                   1164 ;	uart.c:189: buffer_to_be_deleted = accept_number_from_user();
      0004B2 12r0ArE7         [24] 1165 	lcall	_accept_number_from_user
      0004B5 85 82*0A         [24] 1166 	mov	_command_sloc4_1_0,dpl
      0004B8 85 83*0B         [24] 1167 	mov	(_command_sloc4_1_0 + 1),dph
                                   1168 ;	uart.c:190: for (int i = 2; i < MAX_NUM_OF_BUFFERS; i++)
      0004BB 90r00r01         [24] 1169 	mov	dptr,#_command_PARM_2
      0004BE E0               [24] 1170 	movx	a,@dptr
      0004BF FA               [12] 1171 	mov	r2,a
      0004C0 A3               [24] 1172 	inc	dptr
      0004C1 E0               [24] 1173 	movx	a,@dptr
      0004C2 FB               [12] 1174 	mov	r3,a
      0004C3 A3               [24] 1175 	inc	dptr
      0004C4 E0               [24] 1176 	movx	a,@dptr
      0004C5 FC               [12] 1177 	mov	r4,a
      0004C6 78 02            [12] 1178 	mov	r0,#0x02
      0004C8 79 00            [12] 1179 	mov	r1,#0x00
      0004CA                       1180 00158$:
      0004CA C3               [12] 1181 	clr	c
      0004CB E8               [12] 1182 	mov	a,r0
      0004CC 94 D2            [12] 1183 	subb	a,#0xd2
      0004CE E9               [12] 1184 	mov	a,r1
      0004CF 64 80            [12] 1185 	xrl	a,#0x80
      0004D1 94 80            [12] 1186 	subb	a,#0x80
      0004D3 40 03            [24] 1187 	jc	00340$
      0004D5 02r05rD5         [24] 1188 	ljmp	00131$
      0004D8                       1189 00340$:
                                   1190 ;	uart.c:192: if (buffer_to_be_deleted == buffers[i].buf_id)
      0004D8 90r00r00         [24] 1191 	mov	dptr,#__mulint_PARM_2
      0004DB E8               [12] 1192 	mov	a,r0
      0004DC F0               [24] 1193 	movx	@dptr,a
      0004DD E9               [12] 1194 	mov	a,r1
      0004DE A3               [24] 1195 	inc	dptr
      0004DF F0               [24] 1196 	movx	@dptr,a
      0004E0 90 00 09         [24] 1197 	mov	dptr,#0x0009
      0004E3 C0 04            [24] 1198 	push	ar4
      0004E5 C0 03            [24] 1199 	push	ar3
      0004E7 C0 02            [24] 1200 	push	ar2
      0004E9 C0 01            [24] 1201 	push	ar1
      0004EB C0 00            [24] 1202 	push	ar0
      0004ED 12r00r00         [24] 1203 	lcall	__mulint
      0004F0 AD 82            [24] 1204 	mov	r5,dpl
      0004F2 AE 83            [24] 1205 	mov	r6,dph
      0004F4 D0 00            [24] 1206 	pop	ar0
      0004F6 D0 01            [24] 1207 	pop	ar1
      0004F8 D0 02            [24] 1208 	pop	ar2
      0004FA D0 03            [24] 1209 	pop	ar3
      0004FC D0 04            [24] 1210 	pop	ar4
      0004FE ED               [12] 1211 	mov	a,r5
      0004FF 2A               [12] 1212 	add	a,r2
      000500 F5*03            [12] 1213 	mov	_command_sloc1_1_0,a
      000502 EE               [12] 1214 	mov	a,r6
      000503 3B               [12] 1215 	addc	a,r3
      000504 F5*04            [12] 1216 	mov	(_command_sloc1_1_0 + 1),a
      000506 8C*05            [24] 1217 	mov	(_command_sloc1_1_0 + 2),r4
      000508 74 05            [12] 1218 	mov	a,#0x05
      00050A 25*03            [12] 1219 	add	a,_command_sloc1_1_0
      00050C F5*00            [12] 1220 	mov	_command_sloc0_1_0,a
      00050E E4               [12] 1221 	clr	a
      00050F 35*04            [12] 1222 	addc	a,(_command_sloc1_1_0 + 1)
      000511 F5*01            [12] 1223 	mov	(_command_sloc0_1_0 + 1),a
      000513 85*05*02         [24] 1224 	mov	(_command_sloc0_1_0 + 2),(_command_sloc1_1_0 + 2)
      000516 85*00 82         [24] 1225 	mov	dpl,_command_sloc0_1_0
      000519 85*01 83         [24] 1226 	mov	dph,(_command_sloc0_1_0 + 1)
      00051C 85*02 F0         [24] 1227 	mov	b,(_command_sloc0_1_0 + 2)
      00051F 12r00r00         [24] 1228 	lcall	__gptrget
      000522 FD               [12] 1229 	mov	r5,a
      000523 A3               [24] 1230 	inc	dptr
      000524 12r00r00         [24] 1231 	lcall	__gptrget
      000527 FE               [12] 1232 	mov	r6,a
      000528 ED               [12] 1233 	mov	a,r5
      000529 B5*0A 06         [24] 1234 	cjne	a,_command_sloc4_1_0,00341$
      00052C EE               [12] 1235 	mov	a,r6
      00052D B5*0B 02         [24] 1236 	cjne	a,(_command_sloc4_1_0 + 1),00341$
      000530 80 03            [24] 1237 	sjmp	00342$
      000532                       1238 00341$:
      000532 02r05rCD         [24] 1239 	ljmp	00159$
      000535                       1240 00342$:
                                   1241 ;	uart.c:194: free(buffers[i].buffer_pointer);
      000535 C0 02            [24] 1242 	push	ar2
      000537 C0 03            [24] 1243 	push	ar3
      000539 C0 04            [24] 1244 	push	ar4
      00053B 85*03 82         [24] 1245 	mov	dpl,_command_sloc1_1_0
      00053E 85*04 83         [24] 1246 	mov	dph,(_command_sloc1_1_0 + 1)
      000541 85*05 F0         [24] 1247 	mov	b,(_command_sloc1_1_0 + 2)
      000544 12r00r00         [24] 1248 	lcall	__gptrget
      000547 FC               [12] 1249 	mov	r4,a
      000548 A3               [24] 1250 	inc	dptr
      000549 12r00r00         [24] 1251 	lcall	__gptrget
      00054C FD               [12] 1252 	mov	r5,a
      00054D A3               [24] 1253 	inc	dptr
      00054E 12r00r00         [24] 1254 	lcall	__gptrget
      000551 FE               [12] 1255 	mov	r6,a
      000552 8C 82            [24] 1256 	mov	dpl,r4
      000554 8D 83            [24] 1257 	mov	dph,r5
      000556 8E F0            [24] 1258 	mov	b,r6
      000558 C0 04            [24] 1259 	push	ar4
      00055A C0 03            [24] 1260 	push	ar3
      00055C C0 02            [24] 1261 	push	ar2
      00055E C0 01            [24] 1262 	push	ar1
      000560 C0 00            [24] 1263 	push	ar0
      000562 12r00r00         [24] 1264 	lcall	_free
      000565 D0 00            [24] 1265 	pop	ar0
      000567 D0 01            [24] 1266 	pop	ar1
      000569 D0 02            [24] 1267 	pop	ar2
      00056B D0 03            [24] 1268 	pop	ar3
      00056D D0 04            [24] 1269 	pop	ar4
                                   1270 ;	uart.c:195: buffers[i].buffer_pointer = 0;
      00056F 85*03 82         [24] 1271 	mov	dpl,_command_sloc1_1_0
      000572 85*04 83         [24] 1272 	mov	dph,(_command_sloc1_1_0 + 1)
      000575 85*05 F0         [24] 1273 	mov	b,(_command_sloc1_1_0 + 2)
      000578 E4               [12] 1274 	clr	a
      000579 12r00r00         [24] 1275 	lcall	__gptrput
      00057C A3               [24] 1276 	inc	dptr
      00057D 12r00r00         [24] 1277 	lcall	__gptrput
      000580 A3               [24] 1278 	inc	dptr
      000581 12r00r00         [24] 1279 	lcall	__gptrput
                                   1280 ;	uart.c:196: buffers[i].buf_id = -1;
      000584 85*00 82         [24] 1281 	mov	dpl,_command_sloc0_1_0
      000587 85*01 83         [24] 1282 	mov	dph,(_command_sloc0_1_0 + 1)
      00058A 85*02 F0         [24] 1283 	mov	b,(_command_sloc0_1_0 + 2)
      00058D 14               [12] 1284 	dec	a
      00058E 12r00r00         [24] 1285 	lcall	__gptrput
      000591 A3               [24] 1286 	inc	dptr
      000592 12r00r00         [24] 1287 	lcall	__gptrput
                                   1288 ;	uart.c:197: buffers[i].buf_index = 0;
      000595 74 03            [12] 1289 	mov	a,#0x03
      000597 25*03            [12] 1290 	add	a,_command_sloc1_1_0
      000599 FC               [12] 1291 	mov	r4,a
      00059A E4               [12] 1292 	clr	a
      00059B 35*04            [12] 1293 	addc	a,(_command_sloc1_1_0 + 1)
      00059D FD               [12] 1294 	mov	r5,a
      00059E AE*05            [24] 1295 	mov	r6,(_command_sloc1_1_0 + 2)
      0005A0 8C 82            [24] 1296 	mov	dpl,r4
      0005A2 8D 83            [24] 1297 	mov	dph,r5
      0005A4 8E F0            [24] 1298 	mov	b,r6
      0005A6 E4               [12] 1299 	clr	a
      0005A7 12r00r00         [24] 1300 	lcall	__gptrput
      0005AA A3               [24] 1301 	inc	dptr
      0005AB 12r00r00         [24] 1302 	lcall	__gptrput
                                   1303 ;	uart.c:198: buffers[i].buf_size = 0;
      0005AE 74 07            [12] 1304 	mov	a,#0x07
      0005B0 25*03            [12] 1305 	add	a,_command_sloc1_1_0
      0005B2 FC               [12] 1306 	mov	r4,a
      0005B3 E4               [12] 1307 	clr	a
      0005B4 35*04            [12] 1308 	addc	a,(_command_sloc1_1_0 + 1)
      0005B6 FD               [12] 1309 	mov	r5,a
      0005B7 AE*05            [24] 1310 	mov	r6,(_command_sloc1_1_0 + 2)
      0005B9 8C 82            [24] 1311 	mov	dpl,r4
      0005BB 8D 83            [24] 1312 	mov	dph,r5
      0005BD 8E F0            [24] 1313 	mov	b,r6
      0005BF E4               [12] 1314 	clr	a
      0005C0 12r00r00         [24] 1315 	lcall	__gptrput
      0005C3 A3               [24] 1316 	inc	dptr
      0005C4 12r00r00         [24] 1317 	lcall	__gptrput
                                   1318 ;	uart.c:265: putstr("Enter command (+, -, ?, =, @) or input: ");
      0005C7 D0 04            [24] 1319 	pop	ar4
      0005C9 D0 03            [24] 1320 	pop	ar3
      0005CB D0 02            [24] 1321 	pop	ar2
                                   1322 ;	uart.c:198: buffers[i].buf_size = 0;
      0005CD                       1323 00159$:
                                   1324 ;	uart.c:190: for (int i = 2; i < MAX_NUM_OF_BUFFERS; i++)
      0005CD 08               [12] 1325 	inc	r0
      0005CE B8 00 01         [24] 1326 	cjne	r0,#0x00,00343$
      0005D1 09               [12] 1327 	inc	r1
      0005D2                       1328 00343$:
      0005D2 02r04rCA         [24] 1329 	ljmp	00158$
      0005D5                       1330 00131$:
                                   1331 ;	uart.c:201: print_buffers(buffers);
      0005D5 8A 82            [24] 1332 	mov	dpl,r2
      0005D7 8B 83            [24] 1333 	mov	dph,r3
      0005D9 8C F0            [24] 1334 	mov	b,r4
      0005DB 12r0Cr71         [24] 1335 	lcall	_print_buffers
                                   1336 ;	uart.c:202: break;
      0005DE 02r0Ar2E         [24] 1337 	ljmp	00147$
                                   1338 ;	uart.c:205: case '?':
      0005E1                       1339 00132$:
                                   1340 ;	uart.c:206: putstr("\r\n\r\n\t *** Command for a query ***\r\n");
      0005E1 90r02r70         [24] 1341 	mov	dptr,#___str_16
      0005E4 75 F0 80         [24] 1342 	mov	b,#0x80
      0005E7 12r0Ar71         [24] 1343 	lcall	_putstr
                                   1344 ;	uart.c:207: printf_tiny("\r\n\r\n\t\t-----------------------------------------------------------------");
      0005EA 74r94            [12] 1345 	mov	a,#___str_17
      0005EC C0 E0            [24] 1346 	push	acc
      0005EE 74s02            [12] 1347 	mov	a,#(___str_17 >> 8)
      0005F0 C0 E0            [24] 1348 	push	acc
      0005F2 12r00r00         [24] 1349 	lcall	_printf_tiny
      0005F5 15 81            [12] 1350 	dec	sp
      0005F7 15 81            [12] 1351 	dec	sp
                                   1352 ;	uart.c:208: putstr("\r\n\t\t| Buffer id | start-addr | end-addr | nStorageChar | free-space |\t\r\n");
      0005F9 90r02rDC         [24] 1353 	mov	dptr,#___str_18
      0005FC 75 F0 80         [24] 1354 	mov	b,#0x80
      0005FF 12r0Ar71         [24] 1355 	lcall	_putstr
                                   1356 ;	uart.c:209: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      000602 90r00r01         [24] 1357 	mov	dptr,#_command_PARM_2
      000605 E0               [24] 1358 	movx	a,@dptr
      000606 F5*0A            [12] 1359 	mov	_command_sloc4_1_0,a
      000608 A3               [24] 1360 	inc	dptr
      000609 E0               [24] 1361 	movx	a,@dptr
      00060A F5*0B            [12] 1362 	mov	(_command_sloc4_1_0 + 1),a
      00060C A3               [24] 1363 	inc	dptr
      00060D E0               [24] 1364 	movx	a,@dptr
      00060E F5*0C            [12] 1365 	mov	(_command_sloc4_1_0 + 2),a
      000610 7A 00            [12] 1366 	mov	r2,#0x00
      000612 7B 00            [12] 1367 	mov	r3,#0x00
      000614                       1368 00161$:
      000614 C3               [12] 1369 	clr	c
      000615 EA               [12] 1370 	mov	a,r2
      000616 94 D2            [12] 1371 	subb	a,#0xd2
      000618 EB               [12] 1372 	mov	a,r3
      000619 64 80            [12] 1373 	xrl	a,#0x80
      00061B 94 80            [12] 1374 	subb	a,#0x80
      00061D 40 03            [24] 1375 	jc	00344$
      00061F 02r07r76         [24] 1376 	ljmp	00137$
      000622                       1377 00344$:
                                   1378 ;	uart.c:214: if ((buffers[i].buffer_pointer != 0) || (i == 0) || (i == 1))
      000622 90r00r00         [24] 1379 	mov	dptr,#__mulint_PARM_2
      000625 EA               [12] 1380 	mov	a,r2
      000626 F0               [24] 1381 	movx	@dptr,a
      000627 EB               [12] 1382 	mov	a,r3
      000628 A3               [24] 1383 	inc	dptr
      000629 F0               [24] 1384 	movx	@dptr,a
      00062A 90 00 09         [24] 1385 	mov	dptr,#0x0009
      00062D C0 03            [24] 1386 	push	ar3
      00062F C0 02            [24] 1387 	push	ar2
      000631 12r00r00         [24] 1388 	lcall	__mulint
      000634 A8 82            [24] 1389 	mov	r0,dpl
      000636 A9 83            [24] 1390 	mov	r1,dph
      000638 D0 02            [24] 1391 	pop	ar2
      00063A D0 03            [24] 1392 	pop	ar3
      00063C C0 02            [24] 1393 	push	ar2
      00063E C0 03            [24] 1394 	push	ar3
      000640 E8               [12] 1395 	mov	a,r0
      000641 25*0A            [12] 1396 	add	a,_command_sloc4_1_0
      000643 F8               [12] 1397 	mov	r0,a
      000644 E9               [12] 1398 	mov	a,r1
      000645 35*0B            [12] 1399 	addc	a,(_command_sloc4_1_0 + 1)
      000647 F9               [12] 1400 	mov	r1,a
      000648 AB*0C            [24] 1401 	mov	r3,(_command_sloc4_1_0 + 2)
      00064A 88 82            [24] 1402 	mov	dpl,r0
      00064C 89 83            [24] 1403 	mov	dph,r1
      00064E 8B F0            [24] 1404 	mov	b,r3
      000650 12r00r00         [24] 1405 	lcall	__gptrget
      000653 F8               [12] 1406 	mov	r0,a
      000654 A3               [24] 1407 	inc	dptr
      000655 12r00r00         [24] 1408 	lcall	__gptrget
      000658 F9               [12] 1409 	mov	r1,a
      000659 A3               [24] 1410 	inc	dptr
      00065A 12r00r00         [24] 1411 	lcall	__gptrget
      00065D E8               [12] 1412 	mov	a,r0
      00065E 49               [12] 1413 	orl	a,r1
      00065F D0 03            [24] 1414 	pop	ar3
      000661 D0 02            [24] 1415 	pop	ar2
      000663 70 0F            [24] 1416 	jnz	00133$
      000665 EA               [12] 1417 	mov	a,r2
      000666 4B               [12] 1418 	orl	a,r3
      000667 60 0B            [24] 1419 	jz	00133$
      000669 BA 01 05         [24] 1420 	cjne	r2,#0x01,00347$
      00066C BB 00 02         [24] 1421 	cjne	r3,#0x00,00347$
      00066F 80 03            [24] 1422 	sjmp	00348$
      000671                       1423 00347$:
      000671 02r07r6E         [24] 1424 	ljmp	00162$
      000674                       1425 00348$:
      000674                       1426 00133$:
                                   1427 ;	uart.c:216: printf_tiny("\r\n\t\t-----------------------------------------------------------------");
      000674 C0 03            [24] 1428 	push	ar3
      000676 C0 02            [24] 1429 	push	ar2
      000678 74r25            [12] 1430 	mov	a,#___str_19
      00067A C0 E0            [24] 1431 	push	acc
      00067C 74s03            [12] 1432 	mov	a,#(___str_19 >> 8)
      00067E C0 E0            [24] 1433 	push	acc
      000680 12r00r00         [24] 1434 	lcall	_printf_tiny
      000683 15 81            [12] 1435 	dec	sp
      000685 15 81            [12] 1436 	dec	sp
      000687 D0 02            [24] 1437 	pop	ar2
      000689 D0 03            [24] 1438 	pop	ar3
                                   1439 ;	uart.c:219: buffers[i].buf_index, (buffers[i].buf_size - buffers[i].buf_index));
      00068B 90r00r00         [24] 1440 	mov	dptr,#__mulint_PARM_2
      00068E EA               [12] 1441 	mov	a,r2
      00068F F0               [24] 1442 	movx	@dptr,a
      000690 EB               [12] 1443 	mov	a,r3
      000691 A3               [24] 1444 	inc	dptr
      000692 F0               [24] 1445 	movx	@dptr,a
      000693 90 00 09         [24] 1446 	mov	dptr,#0x0009
      000696 C0 03            [24] 1447 	push	ar3
      000698 C0 02            [24] 1448 	push	ar2
      00069A 12r00r00         [24] 1449 	lcall	__mulint
      00069D A8 82            [24] 1450 	mov	r0,dpl
      00069F A9 83            [24] 1451 	mov	r1,dph
      0006A1 D0 02            [24] 1452 	pop	ar2
      0006A3 D0 03            [24] 1453 	pop	ar3
      0006A5 C0 02            [24] 1454 	push	ar2
      0006A7 C0 03            [24] 1455 	push	ar3
      0006A9 E8               [12] 1456 	mov	a,r0
      0006AA 25*0A            [12] 1457 	add	a,_command_sloc4_1_0
      0006AC F8               [12] 1458 	mov	r0,a
      0006AD E9               [12] 1459 	mov	a,r1
      0006AE 35*0B            [12] 1460 	addc	a,(_command_sloc4_1_0 + 1)
      0006B0 F9               [12] 1461 	mov	r1,a
      0006B1 AB*0C            [24] 1462 	mov	r3,(_command_sloc4_1_0 + 2)
      0006B3 74 07            [12] 1463 	mov	a,#0x07
      0006B5 28               [12] 1464 	add	a,r0
      0006B6 FA               [12] 1465 	mov	r2,a
      0006B7 E4               [12] 1466 	clr	a
      0006B8 39               [12] 1467 	addc	a,r1
      0006B9 FD               [12] 1468 	mov	r5,a
      0006BA 8B 06            [24] 1469 	mov	ar6,r3
      0006BC 8A 82            [24] 1470 	mov	dpl,r2
      0006BE 8D 83            [24] 1471 	mov	dph,r5
      0006C0 8E F0            [24] 1472 	mov	b,r6
      0006C2 12r00r00         [24] 1473 	lcall	__gptrget
      0006C5 F5*08            [12] 1474 	mov	_command_sloc3_1_0,a
      0006C7 A3               [24] 1475 	inc	dptr
      0006C8 12r00r00         [24] 1476 	lcall	__gptrget
      0006CB F5*09            [12] 1477 	mov	(_command_sloc3_1_0 + 1),a
      0006CD 74 03            [12] 1478 	mov	a,#0x03
      0006CF 28               [12] 1479 	add	a,r0
      0006D0 FC               [12] 1480 	mov	r4,a
      0006D1 E4               [12] 1481 	clr	a
      0006D2 39               [12] 1482 	addc	a,r1
      0006D3 FD               [12] 1483 	mov	r5,a
      0006D4 8B 06            [24] 1484 	mov	ar6,r3
      0006D6 8C 82            [24] 1485 	mov	dpl,r4
      0006D8 8D 83            [24] 1486 	mov	dph,r5
      0006DA 8E F0            [24] 1487 	mov	b,r6
      0006DC 12r00r00         [24] 1488 	lcall	__gptrget
      0006DF F5*03            [12] 1489 	mov	_command_sloc1_1_0,a
      0006E1 A3               [24] 1490 	inc	dptr
      0006E2 12r00r00         [24] 1491 	lcall	__gptrget
      0006E5 F5*04            [12] 1492 	mov	(_command_sloc1_1_0 + 1),a
      0006E7 E5*08            [12] 1493 	mov	a,_command_sloc3_1_0
      0006E9 C3               [12] 1494 	clr	c
      0006EA 95*03            [12] 1495 	subb	a,_command_sloc1_1_0
      0006EC F5*06            [12] 1496 	mov	_command_sloc2_1_0,a
      0006EE E5*09            [12] 1497 	mov	a,(_command_sloc3_1_0 + 1)
      0006F0 95*04            [12] 1498 	subb	a,(_command_sloc1_1_0 + 1)
      0006F2 F5*07            [12] 1499 	mov	(_command_sloc2_1_0 + 1),a
                                   1500 ;	uart.c:218: buffers[i].buf_id, &(buffers[i].buffer_pointer[0]), &(buffers[i].buffer_pointer[buffers[i].buf_size - 1]),
      0006F4 88 82            [24] 1501 	mov	dpl,r0
      0006F6 89 83            [24] 1502 	mov	dph,r1
      0006F8 8B F0            [24] 1503 	mov	b,r3
      0006FA 12r00r00         [24] 1504 	lcall	__gptrget
      0006FD F5*00            [12] 1505 	mov	_command_sloc0_1_0,a
      0006FF A3               [24] 1506 	inc	dptr
      000700 12r00r00         [24] 1507 	lcall	__gptrget
      000703 F5*01            [12] 1508 	mov	(_command_sloc0_1_0 + 1),a
      000705 A3               [24] 1509 	inc	dptr
      000706 12r00r00         [24] 1510 	lcall	__gptrget
      000709 F5*02            [12] 1511 	mov	(_command_sloc0_1_0 + 2),a
      00070B E5*08            [12] 1512 	mov	a,_command_sloc3_1_0
      00070D 24 FF            [12] 1513 	add	a,#0xff
      00070F FC               [12] 1514 	mov	r4,a
      000710 E5*09            [12] 1515 	mov	a,(_command_sloc3_1_0 + 1)
      000712 34 FF            [12] 1516 	addc	a,#0xff
      000714 FE               [12] 1517 	mov	r6,a
      000715 EC               [12] 1518 	mov	a,r4
      000716 25*00            [12] 1519 	add	a,_command_sloc0_1_0
      000718 FC               [12] 1520 	mov	r4,a
      000719 EE               [12] 1521 	mov	a,r6
      00071A 35*01            [12] 1522 	addc	a,(_command_sloc0_1_0 + 1)
      00071C FE               [12] 1523 	mov	r6,a
      00071D AD*02            [24] 1524 	mov	r5,(_command_sloc0_1_0 + 2)
      00071F 74 05            [12] 1525 	mov	a,#0x05
      000721 28               [12] 1526 	add	a,r0
      000722 F8               [12] 1527 	mov	r0,a
      000723 E4               [12] 1528 	clr	a
      000724 39               [12] 1529 	addc	a,r1
      000725 F9               [12] 1530 	mov	r1,a
      000726 88 82            [24] 1531 	mov	dpl,r0
      000728 89 83            [24] 1532 	mov	dph,r1
      00072A 8B F0            [24] 1533 	mov	b,r3
      00072C 12r00r00         [24] 1534 	lcall	__gptrget
      00072F F8               [12] 1535 	mov	r0,a
      000730 A3               [24] 1536 	inc	dptr
      000731 12r00r00         [24] 1537 	lcall	__gptrget
      000734 F9               [12] 1538 	mov	r1,a
                                   1539 ;	uart.c:217: printf("\r\n\t\t|%10d |   %11p |%9p |%13d |%11d |",
      000735 C0 03            [24] 1540 	push	ar3
      000737 C0 02            [24] 1541 	push	ar2
      000739 C0*06            [24] 1542 	push	_command_sloc2_1_0
      00073B C0*07            [24] 1543 	push	(_command_sloc2_1_0 + 1)
      00073D C0*03            [24] 1544 	push	_command_sloc1_1_0
      00073F C0*04            [24] 1545 	push	(_command_sloc1_1_0 + 1)
      000741 C0 04            [24] 1546 	push	ar4
      000743 C0 06            [24] 1547 	push	ar6
      000745 C0 05            [24] 1548 	push	ar5
      000747 C0*00            [24] 1549 	push	_command_sloc0_1_0
      000749 C0*01            [24] 1550 	push	(_command_sloc0_1_0 + 1)
      00074B C0*02            [24] 1551 	push	(_command_sloc0_1_0 + 2)
      00074D C0 00            [24] 1552 	push	ar0
      00074F C0 01            [24] 1553 	push	ar1
      000751 74r6B            [12] 1554 	mov	a,#___str_20
      000753 C0 E0            [24] 1555 	push	acc
      000755 74s03            [12] 1556 	mov	a,#(___str_20 >> 8)
      000757 C0 E0            [24] 1557 	push	acc
      000759 74 80            [12] 1558 	mov	a,#0x80
      00075B C0 E0            [24] 1559 	push	acc
      00075D 12r00r00         [24] 1560 	lcall	_printf
      000760 E5 81            [12] 1561 	mov	a,sp
      000762 24 F1            [12] 1562 	add	a,#0xf1
      000764 F5 81            [12] 1563 	mov	sp,a
      000766 D0 02            [24] 1564 	pop	ar2
      000768 D0 03            [24] 1565 	pop	ar3
                                   1566 ;	uart.c:265: putstr("Enter command (+, -, ?, =, @) or input: ");
      00076A D0 03            [24] 1567 	pop	ar3
      00076C D0 02            [24] 1568 	pop	ar2
                                   1569 ;	uart.c:217: printf("\r\n\t\t|%10d |   %11p |%9p |%13d |%11d |",
      00076E                       1570 00162$:
                                   1571 ;	uart.c:209: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      00076E 0A               [12] 1572 	inc	r2
      00076F BA 00 01         [24] 1573 	cjne	r2,#0x00,00349$
      000772 0B               [12] 1574 	inc	r3
      000773                       1575 00349$:
      000773 02r06r14         [24] 1576 	ljmp	00161$
      000776                       1577 00137$:
                                   1578 ;	uart.c:222: printf_tiny("\r\n\t\t-----------------------------------------------------------------\r\n");
      000776 74r91            [12] 1579 	mov	a,#___str_21
      000778 C0 E0            [24] 1580 	push	acc
      00077A 74s03            [12] 1581 	mov	a,#(___str_21 >> 8)
      00077C C0 E0            [24] 1582 	push	acc
      00077E 12r00r00         [24] 1583 	lcall	_printf_tiny
      000781 15 81            [12] 1584 	dec	sp
      000783 15 81            [12] 1585 	dec	sp
                                   1586 ;	uart.c:224: printf("\r\n\r\n\tBuffer 0 contents: \r\n\r\n");
      000785 74rD9            [12] 1587 	mov	a,#___str_22
      000787 C0 E0            [24] 1588 	push	acc
      000789 74s03            [12] 1589 	mov	a,#(___str_22 >> 8)
      00078B C0 E0            [24] 1590 	push	acc
      00078D 74 80            [12] 1591 	mov	a,#0x80
      00078F C0 E0            [24] 1592 	push	acc
      000791 12r00r00         [24] 1593 	lcall	_printf
      000794 15 81            [12] 1594 	dec	sp
      000796 15 81            [12] 1595 	dec	sp
      000798 15 81            [12] 1596 	dec	sp
                                   1597 ;	uart.c:225: for (int iBuffer0 = 0; iBuffer0 < buffers[0].buf_index; iBuffer0++)
      00079A AC*0A            [24] 1598 	mov	r4,_command_sloc4_1_0
      00079C AD*0B            [24] 1599 	mov	r5,(_command_sloc4_1_0 + 1)
      00079E AE*0C            [24] 1600 	mov	r6,(_command_sloc4_1_0 + 2)
      0007A0 74 03            [12] 1601 	mov	a,#0x03
      0007A2 25*0A            [12] 1602 	add	a,_command_sloc4_1_0
      0007A4 F9               [12] 1603 	mov	r1,a
      0007A5 E4               [12] 1604 	clr	a
      0007A6 35*0B            [12] 1605 	addc	a,(_command_sloc4_1_0 + 1)
      0007A8 FA               [12] 1606 	mov	r2,a
      0007A9 AB*0C            [24] 1607 	mov	r3,(_command_sloc4_1_0 + 2)
      0007AB E4               [12] 1608 	clr	a
      0007AC F5*0A            [12] 1609 	mov	_command_sloc4_1_0,a
      0007AE F5*0B            [12] 1610 	mov	(_command_sloc4_1_0 + 1),a
      0007B0                       1611 00164$:
      0007B0 C0 04            [24] 1612 	push	ar4
      0007B2 C0 05            [24] 1613 	push	ar5
      0007B4 C0 06            [24] 1614 	push	ar6
      0007B6 89 82            [24] 1615 	mov	dpl,r1
      0007B8 8A 83            [24] 1616 	mov	dph,r2
      0007BA 8B F0            [24] 1617 	mov	b,r3
      0007BC 12r00r00         [24] 1618 	lcall	__gptrget
      0007BF F8               [12] 1619 	mov	r0,a
      0007C0 A3               [24] 1620 	inc	dptr
      0007C1 12r00r00         [24] 1621 	lcall	__gptrget
      0007C4 FE               [12] 1622 	mov	r6,a
      0007C5 C3               [12] 1623 	clr	c
      0007C6 E5*0A            [12] 1624 	mov	a,_command_sloc4_1_0
      0007C8 98               [12] 1625 	subb	a,r0
      0007C9 E5*0B            [12] 1626 	mov	a,(_command_sloc4_1_0 + 1)
      0007CB 64 80            [12] 1627 	xrl	a,#0x80
      0007CD 8E F0            [24] 1628 	mov	b,r6
      0007CF 63 F0 80         [24] 1629 	xrl	b,#0x80
      0007D2 95 F0            [12] 1630 	subb	a,b
      0007D4 D0 06            [24] 1631 	pop	ar6
      0007D6 D0 05            [24] 1632 	pop	ar5
      0007D8 D0 04            [24] 1633 	pop	ar4
      0007DA 40 03            [24] 1634 	jc	00350$
      0007DC 02r08rAF         [24] 1635 	ljmp	00140$
      0007DF                       1636 00350$:
                                   1637 ;	uart.c:227: if (iBuffer0 % 64 == 0)
      0007DF 90r00r00         [24] 1638 	mov	dptr,#__modsint_PARM_2
      0007E2 74 40            [12] 1639 	mov	a,#0x40
      0007E4 F0               [24] 1640 	movx	@dptr,a
      0007E5 E4               [12] 1641 	clr	a
      0007E6 A3               [24] 1642 	inc	dptr
      0007E7 F0               [24] 1643 	movx	@dptr,a
      0007E8 85*0A 82         [24] 1644 	mov	dpl,_command_sloc4_1_0
      0007EB 85*0B 83         [24] 1645 	mov	dph,(_command_sloc4_1_0 + 1)
      0007EE C0 06            [24] 1646 	push	ar6
      0007F0 C0 05            [24] 1647 	push	ar5
      0007F2 C0 04            [24] 1648 	push	ar4
      0007F4 C0 03            [24] 1649 	push	ar3
      0007F6 C0 02            [24] 1650 	push	ar2
      0007F8 C0 01            [24] 1651 	push	ar1
      0007FA 12r00r00         [24] 1652 	lcall	__modsint
      0007FD E5 82            [12] 1653 	mov	a,dpl
      0007FF 85 83 F0         [24] 1654 	mov	b,dph
      000802 D0 01            [24] 1655 	pop	ar1
      000804 D0 02            [24] 1656 	pop	ar2
      000806 D0 03            [24] 1657 	pop	ar3
      000808 D0 04            [24] 1658 	pop	ar4
      00080A D0 05            [24] 1659 	pop	ar5
      00080C D0 06            [24] 1660 	pop	ar6
      00080E 45 F0            [12] 1661 	orl	a,b
      000810 70 2D            [24] 1662 	jnz	00139$
                                   1663 ;	uart.c:228: printf("\r\n\t\t");
      000812 C0 06            [24] 1664 	push	ar6
      000814 C0 05            [24] 1665 	push	ar5
      000816 C0 04            [24] 1666 	push	ar4
      000818 C0 03            [24] 1667 	push	ar3
      00081A C0 02            [24] 1668 	push	ar2
      00081C C0 01            [24] 1669 	push	ar1
      00081E 74rF6            [12] 1670 	mov	a,#___str_23
      000820 C0 E0            [24] 1671 	push	acc
      000822 74s03            [12] 1672 	mov	a,#(___str_23 >> 8)
      000824 C0 E0            [24] 1673 	push	acc
      000826 74 80            [12] 1674 	mov	a,#0x80
      000828 C0 E0            [24] 1675 	push	acc
      00082A 12r00r00         [24] 1676 	lcall	_printf
      00082D 15 81            [12] 1677 	dec	sp
      00082F 15 81            [12] 1678 	dec	sp
      000831 15 81            [12] 1679 	dec	sp
      000833 D0 01            [24] 1680 	pop	ar1
      000835 D0 02            [24] 1681 	pop	ar2
      000837 D0 03            [24] 1682 	pop	ar3
      000839 D0 04            [24] 1683 	pop	ar4
      00083B D0 05            [24] 1684 	pop	ar5
      00083D D0 06            [24] 1685 	pop	ar6
      00083F                       1686 00139$:
                                   1687 ;	uart.c:229: printf("%c", buffers[0].buffer_pointer[iBuffer0]);
      00083F C0 01            [24] 1688 	push	ar1
      000841 C0 02            [24] 1689 	push	ar2
      000843 C0 03            [24] 1690 	push	ar3
      000845 8C 82            [24] 1691 	mov	dpl,r4
      000847 8D 83            [24] 1692 	mov	dph,r5
      000849 8E F0            [24] 1693 	mov	b,r6
      00084B 12r00r00         [24] 1694 	lcall	__gptrget
      00084E F8               [12] 1695 	mov	r0,a
      00084F A3               [24] 1696 	inc	dptr
      000850 12r00r00         [24] 1697 	lcall	__gptrget
      000853 FA               [12] 1698 	mov	r2,a
      000854 A3               [24] 1699 	inc	dptr
      000855 12r00r00         [24] 1700 	lcall	__gptrget
      000858 FB               [12] 1701 	mov	r3,a
      000859 E5*0A            [12] 1702 	mov	a,_command_sloc4_1_0
      00085B 28               [12] 1703 	add	a,r0
      00085C F8               [12] 1704 	mov	r0,a
      00085D E5*0B            [12] 1705 	mov	a,(_command_sloc4_1_0 + 1)
      00085F 3A               [12] 1706 	addc	a,r2
      000860 FA               [12] 1707 	mov	r2,a
      000861 88 82            [24] 1708 	mov	dpl,r0
      000863 8A 83            [24] 1709 	mov	dph,r2
      000865 8B F0            [24] 1710 	mov	b,r3
      000867 12r00r00         [24] 1711 	lcall	__gptrget
      00086A F8               [12] 1712 	mov	r0,a
      00086B 7B 00            [12] 1713 	mov	r3,#0x00
      00086D C0 06            [24] 1714 	push	ar6
      00086F C0 05            [24] 1715 	push	ar5
      000871 C0 04            [24] 1716 	push	ar4
      000873 C0 03            [24] 1717 	push	ar3
      000875 C0 02            [24] 1718 	push	ar2
      000877 C0 01            [24] 1719 	push	ar1
      000879 C0 00            [24] 1720 	push	ar0
      00087B C0 03            [24] 1721 	push	ar3
      00087D 74rFB            [12] 1722 	mov	a,#___str_24
      00087F C0 E0            [24] 1723 	push	acc
      000881 74s03            [12] 1724 	mov	a,#(___str_24 >> 8)
      000883 C0 E0            [24] 1725 	push	acc
      000885 74 80            [12] 1726 	mov	a,#0x80
      000887 C0 E0            [24] 1727 	push	acc
      000889 12r00r00         [24] 1728 	lcall	_printf
      00088C E5 81            [12] 1729 	mov	a,sp
      00088E 24 FB            [12] 1730 	add	a,#0xfb
      000890 F5 81            [12] 1731 	mov	sp,a
      000892 D0 01            [24] 1732 	pop	ar1
      000894 D0 02            [24] 1733 	pop	ar2
      000896 D0 03            [24] 1734 	pop	ar3
      000898 D0 04            [24] 1735 	pop	ar4
      00089A D0 05            [24] 1736 	pop	ar5
      00089C D0 06            [24] 1737 	pop	ar6
                                   1738 ;	uart.c:225: for (int iBuffer0 = 0; iBuffer0 < buffers[0].buf_index; iBuffer0++)
      00089E 05*0A            [12] 1739 	inc	_command_sloc4_1_0
      0008A0 E4               [12] 1740 	clr	a
      0008A1 B5*0A 02         [24] 1741 	cjne	a,_command_sloc4_1_0,00352$
      0008A4 05*0B            [12] 1742 	inc	(_command_sloc4_1_0 + 1)
      0008A6                       1743 00352$:
      0008A6 D0 03            [24] 1744 	pop	ar3
      0008A8 D0 02            [24] 1745 	pop	ar2
      0008AA D0 01            [24] 1746 	pop	ar1
      0008AC 02r07rB0         [24] 1747 	ljmp	00164$
      0008AF                       1748 00140$:
                                   1749 ;	uart.c:232: buffers[0].buffer_pointer[0] = '\0';
      0008AF 8C 82            [24] 1750 	mov	dpl,r4
      0008B1 8D 83            [24] 1751 	mov	dph,r5
      0008B3 8E F0            [24] 1752 	mov	b,r6
      0008B5 12r00r00         [24] 1753 	lcall	__gptrget
      0008B8 FC               [12] 1754 	mov	r4,a
      0008B9 A3               [24] 1755 	inc	dptr
      0008BA 12r00r00         [24] 1756 	lcall	__gptrget
      0008BD FD               [12] 1757 	mov	r5,a
      0008BE A3               [24] 1758 	inc	dptr
      0008BF 12r00r00         [24] 1759 	lcall	__gptrget
      0008C2 FE               [12] 1760 	mov	r6,a
      0008C3 8C 82            [24] 1761 	mov	dpl,r4
      0008C5 8D 83            [24] 1762 	mov	dph,r5
      0008C7 8E F0            [24] 1763 	mov	b,r6
      0008C9 E4               [12] 1764 	clr	a
      0008CA 12r00r00         [24] 1765 	lcall	__gptrput
                                   1766 ;	uart.c:233: buffers[0].buf_index = 0;
      0008CD 89 82            [24] 1767 	mov	dpl,r1
      0008CF 8A 83            [24] 1768 	mov	dph,r2
      0008D1 8B F0            [24] 1769 	mov	b,r3
      0008D3 12r00r00         [24] 1770 	lcall	__gptrput
      0008D6 A3               [24] 1771 	inc	dptr
      0008D7 12r00r00         [24] 1772 	lcall	__gptrput
                                   1773 ;	uart.c:234: break;
      0008DA 02r0Ar2E         [24] 1774 	ljmp	00147$
                                   1775 ;	uart.c:237: case '=':
      0008DD                       1776 00141$:
                                   1777 ;	uart.c:238: putstr("\r\n\r\n\t *** Command for a hexdump ***\r\n");
      0008DD 90r03rFE         [24] 1778 	mov	dptr,#___str_25
      0008E0 75 F0 80         [24] 1779 	mov	b,#0x80
      0008E3 12r0Ar71         [24] 1780 	lcall	_putstr
                                   1781 ;	uart.c:239: hexdump(buffers[0].buffer_pointer, buffers[0].buf_index);
      0008E6 90r00r01         [24] 1782 	mov	dptr,#_command_PARM_2
      0008E9 E0               [24] 1783 	movx	a,@dptr
      0008EA FC               [12] 1784 	mov	r4,a
      0008EB A3               [24] 1785 	inc	dptr
      0008EC E0               [24] 1786 	movx	a,@dptr
      0008ED FD               [12] 1787 	mov	r5,a
      0008EE A3               [24] 1788 	inc	dptr
      0008EF E0               [24] 1789 	movx	a,@dptr
      0008F0 FE               [12] 1790 	mov	r6,a
      0008F1 8C 82            [24] 1791 	mov	dpl,r4
      0008F3 8D 83            [24] 1792 	mov	dph,r5
      0008F5 8E F0            [24] 1793 	mov	b,r6
      0008F7 12r00r00         [24] 1794 	lcall	__gptrget
      0008FA F9               [12] 1795 	mov	r1,a
      0008FB A3               [24] 1796 	inc	dptr
      0008FC 12r00r00         [24] 1797 	lcall	__gptrget
      0008FF FA               [12] 1798 	mov	r2,a
      000900 A3               [24] 1799 	inc	dptr
      000901 12r00r00         [24] 1800 	lcall	__gptrget
      000904 FB               [12] 1801 	mov	r3,a
      000905 74 03            [12] 1802 	mov	a,#0x03
      000907 2C               [12] 1803 	add	a,r4
      000908 FC               [12] 1804 	mov	r4,a
      000909 E4               [12] 1805 	clr	a
      00090A 3D               [12] 1806 	addc	a,r5
      00090B FD               [12] 1807 	mov	r5,a
      00090C 8C 82            [24] 1808 	mov	dpl,r4
      00090E 8D 83            [24] 1809 	mov	dph,r5
      000910 8E F0            [24] 1810 	mov	b,r6
      000912 12r00r00         [24] 1811 	lcall	__gptrget
      000915 FC               [12] 1812 	mov	r4,a
      000916 A3               [24] 1813 	inc	dptr
      000917 12r00r00         [24] 1814 	lcall	__gptrget
      00091A FD               [12] 1815 	mov	r5,a
      00091B 90r00r2E         [24] 1816 	mov	dptr,#_hexdump_PARM_2
      00091E EC               [12] 1817 	mov	a,r4
      00091F F0               [24] 1818 	movx	@dptr,a
      000920 ED               [12] 1819 	mov	a,r5
      000921 A3               [24] 1820 	inc	dptr
      000922 F0               [24] 1821 	movx	@dptr,a
      000923 ED               [12] 1822 	mov	a,r5
      000924 33               [12] 1823 	rlc	a
      000925 95 E0            [12] 1824 	subb	a,acc
      000927 A3               [24] 1825 	inc	dptr
      000928 F0               [24] 1826 	movx	@dptr,a
      000929 A3               [24] 1827 	inc	dptr
      00092A F0               [24] 1828 	movx	@dptr,a
      00092B 89 82            [24] 1829 	mov	dpl,r1
      00092D 8A 83            [24] 1830 	mov	dph,r2
      00092F 8B F0            [24] 1831 	mov	b,r3
      000931 12r0DrCD         [24] 1832 	lcall	_hexdump
                                   1833 ;	uart.c:240: break;
      000934 02r0Ar2E         [24] 1834 	ljmp	00147$
                                   1835 ;	uart.c:242: case '@':
      000937                       1836 00142$:
                                   1837 ;	uart.c:244: putstr("\r\n\r\n\t *** Command for freeing memory ***\r\n");
      000937 90r04r24         [24] 1838 	mov	dptr,#___str_26
      00093A 75 F0 80         [24] 1839 	mov	b,#0x80
      00093D 12r0Ar71         [24] 1840 	lcall	_putstr
                                   1841 ;	uart.c:245: for (int iBuffer = 0; iBuffer < MAX_NUM_OF_BUFFERS; iBuffer++)
      000940 90r00r01         [24] 1842 	mov	dptr,#_command_PARM_2
      000943 E0               [24] 1843 	movx	a,@dptr
      000944 FC               [12] 1844 	mov	r4,a
      000945 A3               [24] 1845 	inc	dptr
      000946 E0               [24] 1846 	movx	a,@dptr
      000947 FD               [12] 1847 	mov	r5,a
      000948 A3               [24] 1848 	inc	dptr
      000949 E0               [24] 1849 	movx	a,@dptr
      00094A FE               [12] 1850 	mov	r6,a
      00094B 7A 00            [12] 1851 	mov	r2,#0x00
      00094D 7B 00            [12] 1852 	mov	r3,#0x00
      00094F                       1853 00167$:
      00094F C3               [12] 1854 	clr	c
      000950 EA               [12] 1855 	mov	a,r2
      000951 94 D2            [12] 1856 	subb	a,#0xd2
      000953 EB               [12] 1857 	mov	a,r3
      000954 64 80            [12] 1858 	xrl	a,#0x80
      000956 94 80            [12] 1859 	subb	a,#0x80
      000958 40 03            [24] 1860 	jc	00353$
      00095A 02r09rE7         [24] 1861 	ljmp	00145$
      00095D                       1862 00353$:
                                   1863 ;	uart.c:247: if (buffers[iBuffer].buffer_pointer != 0)
      00095D 90r00r00         [24] 1864 	mov	dptr,#__mulint_PARM_2
      000960 EA               [12] 1865 	mov	a,r2
      000961 F0               [24] 1866 	movx	@dptr,a
      000962 EB               [12] 1867 	mov	a,r3
      000963 A3               [24] 1868 	inc	dptr
      000964 F0               [24] 1869 	movx	@dptr,a
      000965 90 00 09         [24] 1870 	mov	dptr,#0x0009
      000968 C0 06            [24] 1871 	push	ar6
      00096A C0 05            [24] 1872 	push	ar5
      00096C C0 04            [24] 1873 	push	ar4
      00096E C0 03            [24] 1874 	push	ar3
      000970 C0 02            [24] 1875 	push	ar2
      000972 12r00r00         [24] 1876 	lcall	__mulint
      000975 A8 82            [24] 1877 	mov	r0,dpl
      000977 A9 83            [24] 1878 	mov	r1,dph
      000979 D0 02            [24] 1879 	pop	ar2
      00097B D0 03            [24] 1880 	pop	ar3
      00097D D0 04            [24] 1881 	pop	ar4
      00097F D0 05            [24] 1882 	pop	ar5
      000981 D0 06            [24] 1883 	pop	ar6
      000983 C0 02            [24] 1884 	push	ar2
      000985 C0 03            [24] 1885 	push	ar3
      000987 E8               [12] 1886 	mov	a,r0
      000988 2C               [12] 1887 	add	a,r4
      000989 F8               [12] 1888 	mov	r0,a
      00098A E9               [12] 1889 	mov	a,r1
      00098B 3D               [12] 1890 	addc	a,r5
      00098C F9               [12] 1891 	mov	r1,a
      00098D 8E 03            [24] 1892 	mov	ar3,r6
      00098F 88 82            [24] 1893 	mov	dpl,r0
      000991 89 83            [24] 1894 	mov	dph,r1
      000993 8B F0            [24] 1895 	mov	b,r3
      000995 12r00r00         [24] 1896 	lcall	__gptrget
      000998 F5*0A            [12] 1897 	mov	_command_sloc4_1_0,a
      00099A A3               [24] 1898 	inc	dptr
      00099B 12r00r00         [24] 1899 	lcall	__gptrget
      00099E F5*0B            [12] 1900 	mov	(_command_sloc4_1_0 + 1),a
      0009A0 A3               [24] 1901 	inc	dptr
      0009A1 12r00r00         [24] 1902 	lcall	__gptrget
      0009A4 F5*0C            [12] 1903 	mov	(_command_sloc4_1_0 + 2),a
      0009A6 D0 03            [24] 1904 	pop	ar3
      0009A8 D0 02            [24] 1905 	pop	ar2
      0009AA E5*0A            [12] 1906 	mov	a,_command_sloc4_1_0
      0009AC 45*0B            [12] 1907 	orl	a,(_command_sloc4_1_0 + 1)
      0009AE 60 2F            [24] 1908 	jz	00168$
                                   1909 ;	uart.c:248: free(buffers[iBuffer].buffer_pointer);
      0009B0 C0 04            [24] 1910 	push	ar4
      0009B2 C0 05            [24] 1911 	push	ar5
      0009B4 C0 06            [24] 1912 	push	ar6
      0009B6 A8*0A            [24] 1913 	mov	r0,_command_sloc4_1_0
      0009B8 A9*0B            [24] 1914 	mov	r1,(_command_sloc4_1_0 + 1)
      0009BA AE*0C            [24] 1915 	mov	r6,(_command_sloc4_1_0 + 2)
      0009BC 88 82            [24] 1916 	mov	dpl,r0
      0009BE 89 83            [24] 1917 	mov	dph,r1
      0009C0 8E F0            [24] 1918 	mov	b,r6
      0009C2 C0 06            [24] 1919 	push	ar6
      0009C4 C0 05            [24] 1920 	push	ar5
      0009C6 C0 04            [24] 1921 	push	ar4
      0009C8 C0 03            [24] 1922 	push	ar3
      0009CA C0 02            [24] 1923 	push	ar2
      0009CC 12r00r00         [24] 1924 	lcall	_free
      0009CF D0 02            [24] 1925 	pop	ar2
      0009D1 D0 03            [24] 1926 	pop	ar3
      0009D3 D0 04            [24] 1927 	pop	ar4
      0009D5 D0 05            [24] 1928 	pop	ar5
      0009D7 D0 06            [24] 1929 	pop	ar6
                                   1930 ;	uart.c:265: putstr("Enter command (+, -, ?, =, @) or input: ");
      0009D9 D0 06            [24] 1931 	pop	ar6
      0009DB D0 05            [24] 1932 	pop	ar5
      0009DD D0 04            [24] 1933 	pop	ar4
                                   1934 ;	uart.c:248: free(buffers[iBuffer].buffer_pointer);
      0009DF                       1935 00168$:
                                   1936 ;	uart.c:245: for (int iBuffer = 0; iBuffer < MAX_NUM_OF_BUFFERS; iBuffer++)
      0009DF 0A               [12] 1937 	inc	r2
      0009E0 BA 00 01         [24] 1938 	cjne	r2,#0x00,00355$
      0009E3 0B               [12] 1939 	inc	r3
      0009E4                       1940 00355$:
      0009E4 02r09r4F         [24] 1941 	ljmp	00167$
      0009E7                       1942 00145$:
                                   1943 ;	uart.c:250: printf("\r\n\r\n\t\tMemory has been freed\r\n\r\n");
      0009E7 74r4F            [12] 1944 	mov	a,#___str_27
      0009E9 C0 E0            [24] 1945 	push	acc
      0009EB 74s04            [12] 1946 	mov	a,#(___str_27 >> 8)
      0009ED C0 E0            [24] 1947 	push	acc
      0009EF 74 80            [12] 1948 	mov	a,#0x80
      0009F1 C0 E0            [24] 1949 	push	acc
      0009F3 12r00r00         [24] 1950 	lcall	_printf
      0009F6 15 81            [12] 1951 	dec	sp
      0009F8 15 81            [12] 1952 	dec	sp
      0009FA 15 81            [12] 1953 	dec	sp
                                   1954 ;	uart.c:251: putstr("\r\n----------------------------------------------------------------------\r\n\r\n");
      0009FC 90r04r6F         [24] 1955 	mov	dptr,#___str_28
      0009FF 75 F0 80         [24] 1956 	mov	b,#0x80
      000A02 12r0Ar71         [24] 1957 	lcall	_putstr
                                   1958 ;	uart.c:252: putstr("\r\n----------------------------------------------------------------------\r\n\r\n");
      000A05 90r04r6F         [24] 1959 	mov	dptr,#___str_28
      000A08 75 F0 80         [24] 1960 	mov	b,#0x80
      000A0B 12r0Ar71         [24] 1961 	lcall	_putstr
                                   1962 ;	uart.c:253: main();
      000A0E 12r00r00         [24] 1963 	lcall	_main
                                   1964 ;	uart.c:254: break;
                                   1965 ;	uart.c:257: default:
      000A11 80 1B            [24] 1966 	sjmp	00147$
      000A13                       1967 00146$:
                                   1968 ;	uart.c:258: printf("\r\n\r\n\t Error: Received invalid command '%c'\r\n", received_char);
      000A13 7E 00            [12] 1969 	mov	r6,#0x00
      000A15 C0 07            [24] 1970 	push	ar7
      000A17 C0 06            [24] 1971 	push	ar6
      000A19 74rBC            [12] 1972 	mov	a,#___str_29
      000A1B C0 E0            [24] 1973 	push	acc
      000A1D 74s04            [12] 1974 	mov	a,#(___str_29 >> 8)
      000A1F C0 E0            [24] 1975 	push	acc
      000A21 74 80            [12] 1976 	mov	a,#0x80
      000A23 C0 E0            [24] 1977 	push	acc
      000A25 12r00r00         [24] 1978 	lcall	_printf
      000A28 E5 81            [12] 1979 	mov	a,sp
      000A2A 24 FB            [12] 1980 	add	a,#0xfb
      000A2C F5 81            [12] 1981 	mov	sp,a
                                   1982 ;	uart.c:262: }
      000A2E                       1983 00147$:
                                   1984 ;	uart.c:264: putstr("\r\n----------------------------------------------------------------------\r\n\r\n");
      000A2E 90r04r6F         [24] 1985 	mov	dptr,#___str_28
      000A31 75 F0 80         [24] 1986 	mov	b,#0x80
      000A34 12r0Ar71         [24] 1987 	lcall	_putstr
                                   1988 ;	uart.c:265: putstr("Enter command (+, -, ?, =, @) or input: ");
      000A37 90r04rE9         [24] 1989 	mov	dptr,#___str_30
      000A3A 75 F0 80         [24] 1990 	mov	b,#0x80
                                   1991 ;	uart.c:267: }
      000A3D 02r0Ar71         [24] 1992 	ljmp	_putstr
                                   1993 ;------------------------------------------------------------
                                   1994 ;Allocation info for local variables in function 'putchar'
                                   1995 ;------------------------------------------------------------
                                   1996 ;c                         Allocated with name '_putchar_c_65536_105'
                                   1997 ;------------------------------------------------------------
                                   1998 ;	uart.c:272: int putchar(int c)
                                   1999 ;	-----------------------------------------
                                   2000 ;	 function putchar
                                   2001 ;	-----------------------------------------
      000A40                       2002 _putchar:
      000A40 AF 83            [24] 2003 	mov	r7,dph
      000A42 E5 82            [12] 2004 	mov	a,dpl
      000A44 90r00r07         [24] 2005 	mov	dptr,#_putchar_c_65536_105
      000A47 F0               [24] 2006 	movx	@dptr,a
      000A48 EF               [12] 2007 	mov	a,r7
      000A49 A3               [24] 2008 	inc	dptr
      000A4A F0               [24] 2009 	movx	@dptr,a
                                   2010 ;	uart.c:274: while (!TI)
      000A4B                       2011 00101$:
                                   2012 ;	uart.c:276: TI = 0;
                                   2013 ;	assignBit
      000A4B 10 99 02         [24] 2014 	jbc	_TI,00114$
      000A4E 80 FB            [24] 2015 	sjmp	00101$
      000A50                       2016 00114$:
                                   2017 ;	uart.c:277: SBUF = c; // adding character to Serial buffer
      000A50 90r00r07         [24] 2018 	mov	dptr,#_putchar_c_65536_105
      000A53 E0               [24] 2019 	movx	a,@dptr
      000A54 FE               [12] 2020 	mov	r6,a
      000A55 A3               [24] 2021 	inc	dptr
      000A56 E0               [24] 2022 	movx	a,@dptr
      000A57 FF               [12] 2023 	mov	r7,a
      000A58 8E 99            [24] 2024 	mov	_SBUF,r6
                                   2025 ;	uart.c:278: return c;
      000A5A 8E 82            [24] 2026 	mov	dpl,r6
      000A5C 8F 83            [24] 2027 	mov	dph,r7
                                   2028 ;	uart.c:279: }
      000A5E 22               [24] 2029 	ret
                                   2030 ;------------------------------------------------------------
                                   2031 ;Allocation info for local variables in function 'getchar'
                                   2032 ;------------------------------------------------------------
                                   2033 ;	uart.c:288: int getchar() // Function to receive serial data
                                   2034 ;	-----------------------------------------
                                   2035 ;	 function getchar
                                   2036 ;	-----------------------------------------
      000A5F                       2037 _getchar:
                                   2038 ;	uart.c:290: P1_1 = false;
                                   2039 ;	assignBit
      000A5F C2 91            [12] 2040 	clr	_P1_1
                                   2041 ;	uart.c:291: while (!RI)
      000A61                       2042 00101$:
                                   2043 ;	uart.c:294: RI = 0;
                                   2044 ;	assignBit
      000A61 10 98 02         [24] 2045 	jbc	_RI,00114$
      000A64 80 FB            [24] 2046 	sjmp	00101$
      000A66                       2047 00114$:
                                   2048 ;	uart.c:296: P1_1 = true;
                                   2049 ;	assignBit
      000A66 D2 91            [12] 2050 	setb	_P1_1
                                   2051 ;	uart.c:297: return SBUF;
      000A68 AE 99            [24] 2052 	mov	r6,_SBUF
      000A6A 7F 00            [12] 2053 	mov	r7,#0x00
      000A6C 8E 82            [24] 2054 	mov	dpl,r6
      000A6E 8F 83            [24] 2055 	mov	dph,r7
                                   2056 ;	uart.c:298: }
      000A70 22               [24] 2057 	ret
                                   2058 ;------------------------------------------------------------
                                   2059 ;Allocation info for local variables in function 'putstr'
                                   2060 ;------------------------------------------------------------
                                   2061 ;str                       Allocated with name '_putstr_str_65536_108'
                                   2062 ;index                     Allocated with name '_putstr_index_65536_109'
                                   2063 ;------------------------------------------------------------
                                   2064 ;	uart.c:304: int putstr(char *str)
                                   2065 ;	-----------------------------------------
                                   2066 ;	 function putstr
                                   2067 ;	-----------------------------------------
      000A71                       2068 _putstr:
      000A71 AF F0            [24] 2069 	mov	r7,b
      000A73 AE 83            [24] 2070 	mov	r6,dph
      000A75 E5 82            [12] 2071 	mov	a,dpl
      000A77 90r00r09         [24] 2072 	mov	dptr,#_putstr_str_65536_108
      000A7A F0               [24] 2073 	movx	@dptr,a
      000A7B EE               [12] 2074 	mov	a,r6
      000A7C A3               [24] 2075 	inc	dptr
      000A7D F0               [24] 2076 	movx	@dptr,a
      000A7E EF               [12] 2077 	mov	a,r7
      000A7F A3               [24] 2078 	inc	dptr
      000A80 F0               [24] 2079 	movx	@dptr,a
                                   2080 ;	uart.c:307: while (*str)
      000A81 90r00r09         [24] 2081 	mov	dptr,#_putstr_str_65536_108
      000A84 E0               [24] 2082 	movx	a,@dptr
      000A85 FD               [12] 2083 	mov	r5,a
      000A86 A3               [24] 2084 	inc	dptr
      000A87 E0               [24] 2085 	movx	a,@dptr
      000A88 FE               [12] 2086 	mov	r6,a
      000A89 A3               [24] 2087 	inc	dptr
      000A8A E0               [24] 2088 	movx	a,@dptr
      000A8B FF               [12] 2089 	mov	r7,a
      000A8C 7B 00            [12] 2090 	mov	r3,#0x00
      000A8E 7C 00            [12] 2091 	mov	r4,#0x00
      000A90                       2092 00101$:
      000A90 8D 82            [24] 2093 	mov	dpl,r5
      000A92 8E 83            [24] 2094 	mov	dph,r6
      000A94 8F F0            [24] 2095 	mov	b,r7
      000A96 12r00r00         [24] 2096 	lcall	__gptrget
      000A99 FA               [12] 2097 	mov	r2,a
      000A9A 60 36            [24] 2098 	jz	00108$
                                   2099 ;	uart.c:309: putchar(*str++);
      000A9C 0D               [12] 2100 	inc	r5
      000A9D BD 00 01         [24] 2101 	cjne	r5,#0x00,00116$
      000AA0 0E               [12] 2102 	inc	r6
      000AA1                       2103 00116$:
      000AA1 90r00r09         [24] 2104 	mov	dptr,#_putstr_str_65536_108
      000AA4 ED               [12] 2105 	mov	a,r5
      000AA5 F0               [24] 2106 	movx	@dptr,a
      000AA6 EE               [12] 2107 	mov	a,r6
      000AA7 A3               [24] 2108 	inc	dptr
      000AA8 F0               [24] 2109 	movx	@dptr,a
      000AA9 EF               [12] 2110 	mov	a,r7
      000AAA A3               [24] 2111 	inc	dptr
      000AAB F0               [24] 2112 	movx	@dptr,a
      000AAC 8A 01            [24] 2113 	mov	ar1,r2
      000AAE 7A 00            [12] 2114 	mov	r2,#0x00
      000AB0 89 82            [24] 2115 	mov	dpl,r1
      000AB2 8A 83            [24] 2116 	mov	dph,r2
      000AB4 C0 07            [24] 2117 	push	ar7
      000AB6 C0 06            [24] 2118 	push	ar6
      000AB8 C0 05            [24] 2119 	push	ar5
      000ABA C0 04            [24] 2120 	push	ar4
      000ABC C0 03            [24] 2121 	push	ar3
      000ABE 12r0Ar40         [24] 2122 	lcall	_putchar
      000AC1 D0 03            [24] 2123 	pop	ar3
      000AC3 D0 04            [24] 2124 	pop	ar4
      000AC5 D0 05            [24] 2125 	pop	ar5
      000AC7 D0 06            [24] 2126 	pop	ar6
      000AC9 D0 07            [24] 2127 	pop	ar7
                                   2128 ;	uart.c:310: index++;
      000ACB 0B               [12] 2129 	inc	r3
      000ACC BB 00 C1         [24] 2130 	cjne	r3,#0x00,00101$
      000ACF 0C               [12] 2131 	inc	r4
      000AD0 80 BE            [24] 2132 	sjmp	00101$
      000AD2                       2133 00108$:
      000AD2 90r00r09         [24] 2134 	mov	dptr,#_putstr_str_65536_108
      000AD5 ED               [12] 2135 	mov	a,r5
      000AD6 F0               [24] 2136 	movx	@dptr,a
      000AD7 EE               [12] 2137 	mov	a,r6
      000AD8 A3               [24] 2138 	inc	dptr
      000AD9 F0               [24] 2139 	movx	@dptr,a
      000ADA EF               [12] 2140 	mov	a,r7
      000ADB A3               [24] 2141 	inc	dptr
      000ADC F0               [24] 2142 	movx	@dptr,a
                                   2143 ;	uart.c:312: return index + 1;
      000ADD 0B               [12] 2144 	inc	r3
      000ADE BB 00 01         [24] 2145 	cjne	r3,#0x00,00118$
      000AE1 0C               [12] 2146 	inc	r4
      000AE2                       2147 00118$:
      000AE2 8B 82            [24] 2148 	mov	dpl,r3
      000AE4 8C 83            [24] 2149 	mov	dph,r4
                                   2150 ;	uart.c:313: }
      000AE6 22               [24] 2151 	ret
                                   2152 ;------------------------------------------------------------
                                   2153 ;Allocation info for local variables in function 'accept_number_from_user'
                                   2154 ;------------------------------------------------------------
                                   2155 ;received_char             Allocated with name '_accept_number_from_user_received_char_65536_111'
                                   2156 ;number_in_char            Allocated with name '_accept_number_from_user_number_in_char_65536_111'
                                   2157 ;valid_number_status       Allocated with name '_accept_number_from_user_valid_number_status_65536_111'
                                   2158 ;number                    Allocated with name '_accept_number_from_user_number_65536_111'
                                   2159 ;i                         Allocated with name '_accept_number_from_user_i_65536_111'
                                   2160 ;------------------------------------------------------------
                                   2161 ;	uart.c:319: int accept_number_from_user()
                                   2162 ;	-----------------------------------------
                                   2163 ;	 function accept_number_from_user
                                   2164 ;	-----------------------------------------
      000AE7                       2165 _accept_number_from_user:
                                   2166 ;	uart.c:321: char received_char = '`';
      000AE7 90r00r0C         [24] 2167 	mov	dptr,#_accept_number_from_user_received_char_65536_111
      000AEA 74 60            [12] 2168 	mov	a,#0x60
      000AEC F0               [24] 2169 	movx	@dptr,a
                                   2170 ;	uart.c:322: char number_in_char[25] = "\0";
      000AED 90r00r0D         [24] 2171 	mov	dptr,#_accept_number_from_user_number_in_char_65536_111
      000AF0 E4               [12] 2172 	clr	a
      000AF1 F0               [24] 2173 	movx	@dptr,a
      000AF2 90r00r0E         [24] 2174 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0001)
      000AF5 F0               [24] 2175 	movx	@dptr,a
      000AF6 90r00r0F         [24] 2176 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0002)
      000AF9 F0               [24] 2177 	movx	@dptr,a
      000AFA 90r00r10         [24] 2178 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0003)
      000AFD F0               [24] 2179 	movx	@dptr,a
      000AFE 90r00r11         [24] 2180 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0004)
      000B01 F0               [24] 2181 	movx	@dptr,a
      000B02 90r00r12         [24] 2182 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0005)
      000B05 F0               [24] 2183 	movx	@dptr,a
      000B06 90r00r13         [24] 2184 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0006)
      000B09 F0               [24] 2185 	movx	@dptr,a
      000B0A 90r00r14         [24] 2186 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0007)
      000B0D F0               [24] 2187 	movx	@dptr,a
      000B0E 90r00r15         [24] 2188 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0008)
      000B11 F0               [24] 2189 	movx	@dptr,a
      000B12 90r00r16         [24] 2190 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0009)
      000B15 F0               [24] 2191 	movx	@dptr,a
      000B16 90r00r17         [24] 2192 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x000a)
      000B19 F0               [24] 2193 	movx	@dptr,a
      000B1A 90r00r18         [24] 2194 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x000b)
      000B1D F0               [24] 2195 	movx	@dptr,a
      000B1E 90r00r19         [24] 2196 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x000c)
      000B21 F0               [24] 2197 	movx	@dptr,a
      000B22 90r00r1A         [24] 2198 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x000d)
      000B25 F0               [24] 2199 	movx	@dptr,a
      000B26 90r00r1B         [24] 2200 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x000e)
      000B29 F0               [24] 2201 	movx	@dptr,a
      000B2A 90r00r1C         [24] 2202 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x000f)
      000B2D F0               [24] 2203 	movx	@dptr,a
      000B2E 90r00r1D         [24] 2204 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0010)
      000B31 F0               [24] 2205 	movx	@dptr,a
      000B32 90r00r1E         [24] 2206 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0011)
      000B35 F0               [24] 2207 	movx	@dptr,a
      000B36 90r00r1F         [24] 2208 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0012)
      000B39 F0               [24] 2209 	movx	@dptr,a
      000B3A 90r00r20         [24] 2210 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0013)
      000B3D F0               [24] 2211 	movx	@dptr,a
      000B3E 90r00r21         [24] 2212 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0014)
      000B41 F0               [24] 2213 	movx	@dptr,a
      000B42 90r00r22         [24] 2214 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0015)
      000B45 F0               [24] 2215 	movx	@dptr,a
      000B46 90r00r23         [24] 2216 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0016)
      000B49 F0               [24] 2217 	movx	@dptr,a
      000B4A 90r00r24         [24] 2218 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0017)
      000B4D F0               [24] 2219 	movx	@dptr,a
      000B4E 90r00r25         [24] 2220 	mov	dptr,#(_accept_number_from_user_number_in_char_65536_111 + 0x0018)
      000B51 F0               [24] 2221 	movx	@dptr,a
                                   2222 ;	uart.c:323: bool valid_number_status = false;
      000B52 90r00r26         [24] 2223 	mov	dptr,#_accept_number_from_user_valid_number_status_65536_111
      000B55 F0               [24] 2224 	movx	@dptr,a
                                   2225 ;	uart.c:324: int number = 0;
      000B56 90r00r27         [24] 2226 	mov	dptr,#_accept_number_from_user_number_65536_111
      000B59 F0               [24] 2227 	movx	@dptr,a
      000B5A A3               [24] 2228 	inc	dptr
      000B5B F0               [24] 2229 	movx	@dptr,a
                                   2230 ;	uart.c:325: int i = 0;
      000B5C 90r00r29         [24] 2231 	mov	dptr,#_accept_number_from_user_i_65536_111
      000B5F F0               [24] 2232 	movx	@dptr,a
      000B60 A3               [24] 2233 	inc	dptr
      000B61 F0               [24] 2234 	movx	@dptr,a
                                   2235 ;	uart.c:326: while (valid_number_status == false)
      000B62                       2236 00110$:
      000B62 90r00r26         [24] 2237 	mov	dptr,#_accept_number_from_user_valid_number_status_65536_111
      000B65 E0               [24] 2238 	movx	a,@dptr
      000B66 60 03            [24] 2239 	jz	00139$
      000B68 02r0Cr65         [24] 2240 	ljmp	00112$
      000B6B                       2241 00139$:
                                   2242 ;	uart.c:328: received_char = getchar();
      000B6B 12r0Ar5F         [24] 2243 	lcall	_getchar
      000B6E AE 82            [24] 2244 	mov	r6,dpl
      000B70 90r00r0C         [24] 2245 	mov	dptr,#_accept_number_from_user_received_char_65536_111
      000B73 EE               [12] 2246 	mov	a,r6
      000B74 F0               [24] 2247 	movx	@dptr,a
                                   2248 ;	uart.c:329: i++;
      000B75 90r00r29         [24] 2249 	mov	dptr,#_accept_number_from_user_i_65536_111
      000B78 E0               [24] 2250 	movx	a,@dptr
      000B79 24 01            [12] 2251 	add	a,#0x01
      000B7B F0               [24] 2252 	movx	@dptr,a
      000B7C A3               [24] 2253 	inc	dptr
      000B7D E0               [24] 2254 	movx	a,@dptr
      000B7E 34 00            [12] 2255 	addc	a,#0x00
      000B80 F0               [24] 2256 	movx	@dptr,a
                                   2257 ;	uart.c:330: echo(received_char);
      000B81 8E 82            [24] 2258 	mov	dpl,r6
      000B83 12r00r0B         [24] 2259 	lcall	_echo
                                   2260 ;	uart.c:332: if (!(received_char >= '0' && received_char <= '9') && (received_char != '\r'))
      000B86 90r00r0C         [24] 2261 	mov	dptr,#_accept_number_from_user_received_char_65536_111
      000B89 E0               [24] 2262 	movx	a,@dptr
      000B8A FF               [12] 2263 	mov	r7,a
      000B8B BF 30 00         [24] 2264 	cjne	r7,#0x30,00140$
      000B8E                       2265 00140$:
      000B8E 40 05            [24] 2266 	jc	00107$
      000B90 EF               [12] 2267 	mov	a,r7
      000B91 24 C6            [12] 2268 	add	a,#0xff - 0x39
      000B93 50 33            [24] 2269 	jnc	00104$
      000B95                       2270 00107$:
      000B95 90r00r0C         [24] 2271 	mov	dptr,#_accept_number_from_user_received_char_65536_111
      000B98 E0               [24] 2272 	movx	a,@dptr
      000B99 FF               [12] 2273 	mov	r7,a
      000B9A BF 0D 02         [24] 2274 	cjne	r7,#0x0d,00143$
      000B9D 80 29            [24] 2275 	sjmp	00104$
      000B9F                       2276 00143$:
                                   2277 ;	uart.c:335: memset(number_in_char, 0, sizeof(number_in_char));
      000B9F 90r00r00         [24] 2278 	mov	dptr,#_memset_PARM_2
      000BA2 E4               [12] 2279 	clr	a
      000BA3 F0               [24] 2280 	movx	@dptr,a
      000BA4 90r00r00         [24] 2281 	mov	dptr,#_memset_PARM_3
      000BA7 74 19            [12] 2282 	mov	a,#0x19
      000BA9 F0               [24] 2283 	movx	@dptr,a
      000BAA E4               [12] 2284 	clr	a
      000BAB A3               [24] 2285 	inc	dptr
      000BAC F0               [24] 2286 	movx	@dptr,a
      000BAD 90r00r0D         [24] 2287 	mov	dptr,#_accept_number_from_user_number_in_char_65536_111
      000BB0 75 F0 00         [24] 2288 	mov	b,#0x00
      000BB3 12r00r00         [24] 2289 	lcall	_memset
                                   2290 ;	uart.c:336: putstr("\r\n\t\t Error: Re-enter the number: ");
      000BB6 90r05r12         [24] 2291 	mov	dptr,#___str_32
      000BB9 75 F0 80         [24] 2292 	mov	b,#0x80
      000BBC 12r0Ar71         [24] 2293 	lcall	_putstr
                                   2294 ;	uart.c:337: i = 0;
      000BBF 90r00r29         [24] 2295 	mov	dptr,#_accept_number_from_user_i_65536_111
      000BC2 E4               [12] 2296 	clr	a
      000BC3 F0               [24] 2297 	movx	@dptr,a
      000BC4 A3               [24] 2298 	inc	dptr
      000BC5 F0               [24] 2299 	movx	@dptr,a
      000BC6 80 36            [24] 2300 	sjmp	00105$
      000BC8                       2301 00104$:
                                   2302 ;	uart.c:341: else if (received_char == '\r')
      000BC8 90r00r0C         [24] 2303 	mov	dptr,#_accept_number_from_user_received_char_65536_111
      000BCB E0               [24] 2304 	movx	a,@dptr
      000BCC FF               [12] 2305 	mov	r7,a
      000BCD BF 0D 2E         [24] 2306 	cjne	r7,#0x0d,00105$
                                   2307 ;	uart.c:343: strcat(number_in_char, '\0');
      000BD0 90r00r00         [24] 2308 	mov	dptr,#_strcat_PARM_2
      000BD3 E4               [12] 2309 	clr	a
      000BD4 F0               [24] 2310 	movx	@dptr,a
      000BD5 A3               [24] 2311 	inc	dptr
      000BD6 F0               [24] 2312 	movx	@dptr,a
      000BD7 A3               [24] 2313 	inc	dptr
      000BD8 F0               [24] 2314 	movx	@dptr,a
      000BD9 90r00r0D         [24] 2315 	mov	dptr,#_accept_number_from_user_number_in_char_65536_111
      000BDC 75 F0 00         [24] 2316 	mov	b,#0x00
      000BDF 12r00r00         [24] 2317 	lcall	_strcat
                                   2318 ;	uart.c:344: number = atoi(number_in_char);
      000BE2 90r00r0D         [24] 2319 	mov	dptr,#_accept_number_from_user_number_in_char_65536_111
      000BE5 75 F0 00         [24] 2320 	mov	b,#0x00
      000BE8 12r00r00         [24] 2321 	lcall	_atoi
      000BEB E5 82            [12] 2322 	mov	a,dpl
      000BED 85 83 F0         [24] 2323 	mov	b,dph
      000BF0 90r00r27         [24] 2324 	mov	dptr,#_accept_number_from_user_number_65536_111
      000BF3 F0               [24] 2325 	movx	@dptr,a
      000BF4 E5 F0            [12] 2326 	mov	a,b
      000BF6 A3               [24] 2327 	inc	dptr
      000BF7 F0               [24] 2328 	movx	@dptr,a
                                   2329 ;	uart.c:345: valid_number_status = true;
      000BF8 90r00r26         [24] 2330 	mov	dptr,#_accept_number_from_user_valid_number_status_65536_111
      000BFB 74 01            [12] 2331 	mov	a,#0x01
      000BFD F0               [24] 2332 	movx	@dptr,a
      000BFE                       2333 00105$:
                                   2334 ;	uart.c:348: strncat(number_in_char, &received_char, 1);
      000BFE 90r00r00         [24] 2335 	mov	dptr,#_strncat_PARM_2
      000C01 74r0C            [12] 2336 	mov	a,#_accept_number_from_user_received_char_65536_111
      000C03 F0               [24] 2337 	movx	@dptr,a
      000C04 74s00            [12] 2338 	mov	a,#(_accept_number_from_user_received_char_65536_111 >> 8)
      000C06 A3               [24] 2339 	inc	dptr
      000C07 F0               [24] 2340 	movx	@dptr,a
      000C08 E4               [12] 2341 	clr	a
      000C09 A3               [24] 2342 	inc	dptr
      000C0A F0               [24] 2343 	movx	@dptr,a
      000C0B 90r00r00         [24] 2344 	mov	dptr,#_strncat_PARM_3
      000C0E 04               [12] 2345 	inc	a
      000C0F F0               [24] 2346 	movx	@dptr,a
      000C10 E4               [12] 2347 	clr	a
      000C11 A3               [24] 2348 	inc	dptr
      000C12 F0               [24] 2349 	movx	@dptr,a
      000C13 90r00r0D         [24] 2350 	mov	dptr,#_accept_number_from_user_number_in_char_65536_111
      000C16 75 F0 00         [24] 2351 	mov	b,#0x00
      000C19 12r00r00         [24] 2352 	lcall	_strncat
                                   2353 ;	uart.c:350: if (i >= 24)
      000C1C 90r00r29         [24] 2354 	mov	dptr,#_accept_number_from_user_i_65536_111
      000C1F E0               [24] 2355 	movx	a,@dptr
      000C20 FE               [12] 2356 	mov	r6,a
      000C21 A3               [24] 2357 	inc	dptr
      000C22 E0               [24] 2358 	movx	a,@dptr
      000C23 FF               [12] 2359 	mov	r7,a
      000C24 C3               [12] 2360 	clr	c
      000C25 EE               [12] 2361 	mov	a,r6
      000C26 94 18            [12] 2362 	subb	a,#0x18
      000C28 EF               [12] 2363 	mov	a,r7
      000C29 64 80            [12] 2364 	xrl	a,#0x80
      000C2B 94 80            [12] 2365 	subb	a,#0x80
      000C2D 50 03            [24] 2366 	jnc	00146$
      000C2F 02r0Br62         [24] 2367 	ljmp	00110$
      000C32                       2368 00146$:
                                   2369 ;	uart.c:352: putstr("\r\n\t\t Error: Reading a number failed, Reached maximum length supported");
      000C32 90r05r34         [24] 2370 	mov	dptr,#___str_33
      000C35 75 F0 80         [24] 2371 	mov	b,#0x80
      000C38 12r0Ar71         [24] 2372 	lcall	_putstr
                                   2373 ;	uart.c:353: putstr("\r\n\t\t Error: Re-enter the number: ");
      000C3B 90r05r12         [24] 2374 	mov	dptr,#___str_32
      000C3E 75 F0 80         [24] 2375 	mov	b,#0x80
      000C41 12r0Ar71         [24] 2376 	lcall	_putstr
                                   2377 ;	uart.c:355: memset(number_in_char, 0, sizeof(number_in_char));
      000C44 90r00r00         [24] 2378 	mov	dptr,#_memset_PARM_2
      000C47 E4               [12] 2379 	clr	a
      000C48 F0               [24] 2380 	movx	@dptr,a
      000C49 90r00r00         [24] 2381 	mov	dptr,#_memset_PARM_3
      000C4C 74 19            [12] 2382 	mov	a,#0x19
      000C4E F0               [24] 2383 	movx	@dptr,a
      000C4F E4               [12] 2384 	clr	a
      000C50 A3               [24] 2385 	inc	dptr
      000C51 F0               [24] 2386 	movx	@dptr,a
      000C52 90r00r0D         [24] 2387 	mov	dptr,#_accept_number_from_user_number_in_char_65536_111
      000C55 75 F0 00         [24] 2388 	mov	b,#0x00
      000C58 12r00r00         [24] 2389 	lcall	_memset
                                   2390 ;	uart.c:356: i = 0;
      000C5B 90r00r29         [24] 2391 	mov	dptr,#_accept_number_from_user_i_65536_111
      000C5E E4               [12] 2392 	clr	a
      000C5F F0               [24] 2393 	movx	@dptr,a
      000C60 A3               [24] 2394 	inc	dptr
      000C61 F0               [24] 2395 	movx	@dptr,a
      000C62 02r0Br62         [24] 2396 	ljmp	00110$
      000C65                       2397 00112$:
                                   2398 ;	uart.c:359: return number;
      000C65 90r00r27         [24] 2399 	mov	dptr,#_accept_number_from_user_number_65536_111
      000C68 E0               [24] 2400 	movx	a,@dptr
      000C69 FE               [12] 2401 	mov	r6,a
      000C6A A3               [24] 2402 	inc	dptr
      000C6B E0               [24] 2403 	movx	a,@dptr
                                   2404 ;	uart.c:360: }
      000C6C 8E 82            [24] 2405 	mov	dpl,r6
      000C6E F5 83            [12] 2406 	mov	dph,a
      000C70 22               [24] 2407 	ret
                                   2408 ;------------------------------------------------------------
                                   2409 ;Allocation info for local variables in function 'print_buffers'
                                   2410 ;------------------------------------------------------------
                                   2411 ;sloc0                     Allocated with name '_print_buffers_sloc0_1_0'
                                   2412 ;buffers                   Allocated with name '_print_buffers_buffers_65536_116'
                                   2413 ;i                         Allocated with name '_print_buffers_i_131072_118'
                                   2414 ;------------------------------------------------------------
                                   2415 ;	uart.c:365: void print_buffers(buffer_t *buffers)
                                   2416 ;	-----------------------------------------
                                   2417 ;	 function print_buffers
                                   2418 ;	-----------------------------------------
      000C71                       2419 _print_buffers:
      000C71 AF F0            [24] 2420 	mov	r7,b
      000C73 AE 83            [24] 2421 	mov	r6,dph
      000C75 E5 82            [12] 2422 	mov	a,dpl
      000C77 90r00r2B         [24] 2423 	mov	dptr,#_print_buffers_buffers_65536_116
      000C7A F0               [24] 2424 	movx	@dptr,a
      000C7B EE               [12] 2425 	mov	a,r6
      000C7C A3               [24] 2426 	inc	dptr
      000C7D F0               [24] 2427 	movx	@dptr,a
      000C7E EF               [12] 2428 	mov	a,r7
      000C7F A3               [24] 2429 	inc	dptr
      000C80 F0               [24] 2430 	movx	@dptr,a
                                   2431 ;	uart.c:367: printf_tiny("\r\n\r\n\t\t-------------------------");
      000C81 74r64            [12] 2432 	mov	a,#___str_8
      000C83 C0 E0            [24] 2433 	push	acc
      000C85 74s01            [12] 2434 	mov	a,#(___str_8 >> 8)
      000C87 C0 E0            [24] 2435 	push	acc
      000C89 12r00r00         [24] 2436 	lcall	_printf_tiny
      000C8C 15 81            [12] 2437 	dec	sp
      000C8E 15 81            [12] 2438 	dec	sp
                                   2439 ;	uart.c:368: printf_tiny("\r\n\t\t| buffer id |\tsize\t|");
      000C90 74r7A            [12] 2440 	mov	a,#___str_34
      000C92 C0 E0            [24] 2441 	push	acc
      000C94 74s05            [12] 2442 	mov	a,#(___str_34 >> 8)
      000C96 C0 E0            [24] 2443 	push	acc
      000C98 12r00r00         [24] 2444 	lcall	_printf_tiny
      000C9B 15 81            [12] 2445 	dec	sp
      000C9D 15 81            [12] 2446 	dec	sp
                                   2447 ;	uart.c:369: printf_tiny("\r\n\t\t-------------------------");
      000C9F 74r9B            [12] 2448 	mov	a,#___str_10
      000CA1 C0 E0            [24] 2449 	push	acc
      000CA3 74s01            [12] 2450 	mov	a,#(___str_10 >> 8)
      000CA5 C0 E0            [24] 2451 	push	acc
      000CA7 12r00r00         [24] 2452 	lcall	_printf_tiny
      000CAA 15 81            [12] 2453 	dec	sp
      000CAC 15 81            [12] 2454 	dec	sp
                                   2455 ;	uart.c:370: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      000CAE 90r00r2B         [24] 2456 	mov	dptr,#_print_buffers_buffers_65536_116
      000CB1 E0               [24] 2457 	movx	a,@dptr
      000CB2 FD               [12] 2458 	mov	r5,a
      000CB3 A3               [24] 2459 	inc	dptr
      000CB4 E0               [24] 2460 	movx	a,@dptr
      000CB5 FE               [12] 2461 	mov	r6,a
      000CB6 A3               [24] 2462 	inc	dptr
      000CB7 E0               [24] 2463 	movx	a,@dptr
      000CB8 FF               [12] 2464 	mov	r7,a
      000CB9 8D*0D            [24] 2465 	mov	_print_buffers_sloc0_1_0,r5
      000CBB 8E*0E            [24] 2466 	mov	(_print_buffers_sloc0_1_0 + 1),r6
      000CBD 8F*0F            [24] 2467 	mov	(_print_buffers_sloc0_1_0 + 2),r7
      000CBF 78 00            [12] 2468 	mov	r0,#0x00
      000CC1 79 00            [12] 2469 	mov	r1,#0x00
      000CC3                       2470 00107$:
      000CC3 C3               [12] 2471 	clr	c
      000CC4 E8               [12] 2472 	mov	a,r0
      000CC5 94 D2            [12] 2473 	subb	a,#0xd2
      000CC7 E9               [12] 2474 	mov	a,r1
      000CC8 64 80            [12] 2475 	xrl	a,#0x80
      000CCA 94 80            [12] 2476 	subb	a,#0x80
      000CCC 40 03            [24] 2477 	jc	00128$
      000CCE 02r0DrBD         [24] 2478 	ljmp	00105$
      000CD1                       2479 00128$:
                                   2480 ;	uart.c:372: if ((buffers[i].buffer_pointer != 0) || (i == 0) || (i == 1))
      000CD1 90r00r00         [24] 2481 	mov	dptr,#__mulint_PARM_2
      000CD4 E8               [12] 2482 	mov	a,r0
      000CD5 F0               [24] 2483 	movx	@dptr,a
      000CD6 E9               [12] 2484 	mov	a,r1
      000CD7 A3               [24] 2485 	inc	dptr
      000CD8 F0               [24] 2486 	movx	@dptr,a
      000CD9 90 00 09         [24] 2487 	mov	dptr,#0x0009
      000CDC C0 07            [24] 2488 	push	ar7
      000CDE C0 06            [24] 2489 	push	ar6
      000CE0 C0 05            [24] 2490 	push	ar5
      000CE2 C0 01            [24] 2491 	push	ar1
      000CE4 C0 00            [24] 2492 	push	ar0
      000CE6 12r00r00         [24] 2493 	lcall	__mulint
      000CE9 AB 82            [24] 2494 	mov	r3,dpl
      000CEB AC 83            [24] 2495 	mov	r4,dph
      000CED D0 00            [24] 2496 	pop	ar0
      000CEF D0 01            [24] 2497 	pop	ar1
      000CF1 D0 05            [24] 2498 	pop	ar5
      000CF3 D0 06            [24] 2499 	pop	ar6
      000CF5 D0 07            [24] 2500 	pop	ar7
      000CF7 EB               [12] 2501 	mov	a,r3
      000CF8 2D               [12] 2502 	add	a,r5
      000CF9 FB               [12] 2503 	mov	r3,a
      000CFA EC               [12] 2504 	mov	a,r4
      000CFB 3E               [12] 2505 	addc	a,r6
      000CFC FC               [12] 2506 	mov	r4,a
      000CFD 8F 02            [24] 2507 	mov	ar2,r7
      000CFF 8B 82            [24] 2508 	mov	dpl,r3
      000D01 8C 83            [24] 2509 	mov	dph,r4
      000D03 8A F0            [24] 2510 	mov	b,r2
      000D05 12r00r00         [24] 2511 	lcall	__gptrget
      000D08 FB               [12] 2512 	mov	r3,a
      000D09 A3               [24] 2513 	inc	dptr
      000D0A 12r00r00         [24] 2514 	lcall	__gptrget
      000D0D FC               [12] 2515 	mov	r4,a
      000D0E A3               [24] 2516 	inc	dptr
      000D0F 12r00r00         [24] 2517 	lcall	__gptrget
      000D12 FA               [12] 2518 	mov	r2,a
      000D13 EB               [12] 2519 	mov	a,r3
      000D14 4C               [12] 2520 	orl	a,r4
      000D15 70 0F            [24] 2521 	jnz	00101$
      000D17 E8               [12] 2522 	mov	a,r0
      000D18 49               [12] 2523 	orl	a,r1
      000D19 60 0B            [24] 2524 	jz	00101$
      000D1B B8 01 05         [24] 2525 	cjne	r0,#0x01,00131$
      000D1E B9 00 02         [24] 2526 	cjne	r1,#0x00,00131$
      000D21 80 03            [24] 2527 	sjmp	00132$
      000D23                       2528 00131$:
      000D23 02r0DrB5         [24] 2529 	ljmp	00108$
      000D26                       2530 00132$:
      000D26                       2531 00101$:
                                   2532 ;	uart.c:373: printf_tiny("\r\n\t\t|    %d    |\t%d\t|", buffers[i].buf_id, buffers[i].buf_size);
      000D26 C0 05            [24] 2533 	push	ar5
      000D28 C0 06            [24] 2534 	push	ar6
      000D2A C0 07            [24] 2535 	push	ar7
      000D2C 90r00r00         [24] 2536 	mov	dptr,#__mulint_PARM_2
      000D2F E8               [12] 2537 	mov	a,r0
      000D30 F0               [24] 2538 	movx	@dptr,a
      000D31 E9               [12] 2539 	mov	a,r1
      000D32 A3               [24] 2540 	inc	dptr
      000D33 F0               [24] 2541 	movx	@dptr,a
      000D34 90 00 09         [24] 2542 	mov	dptr,#0x0009
      000D37 C0 05            [24] 2543 	push	ar5
      000D39 C0 01            [24] 2544 	push	ar1
      000D3B C0 00            [24] 2545 	push	ar0
      000D3D 12r00r00         [24] 2546 	lcall	__mulint
      000D40 AE 82            [24] 2547 	mov	r6,dpl
      000D42 AF 83            [24] 2548 	mov	r7,dph
      000D44 D0 00            [24] 2549 	pop	ar0
      000D46 D0 01            [24] 2550 	pop	ar1
      000D48 D0 05            [24] 2551 	pop	ar5
      000D4A EE               [12] 2552 	mov	a,r6
      000D4B 25*0D            [12] 2553 	add	a,_print_buffers_sloc0_1_0
      000D4D FE               [12] 2554 	mov	r6,a
      000D4E EF               [12] 2555 	mov	a,r7
      000D4F 35*0E            [12] 2556 	addc	a,(_print_buffers_sloc0_1_0 + 1)
      000D51 FF               [12] 2557 	mov	r7,a
      000D52 AD*0F            [24] 2558 	mov	r5,(_print_buffers_sloc0_1_0 + 2)
      000D54 74 07            [12] 2559 	mov	a,#0x07
      000D56 2E               [12] 2560 	add	a,r6
      000D57 FA               [12] 2561 	mov	r2,a
      000D58 E4               [12] 2562 	clr	a
      000D59 3F               [12] 2563 	addc	a,r7
      000D5A FB               [12] 2564 	mov	r3,a
      000D5B 8D 04            [24] 2565 	mov	ar4,r5
      000D5D 8A 82            [24] 2566 	mov	dpl,r2
      000D5F 8B 83            [24] 2567 	mov	dph,r3
      000D61 8C F0            [24] 2568 	mov	b,r4
      000D63 12r00r00         [24] 2569 	lcall	__gptrget
      000D66 FA               [12] 2570 	mov	r2,a
      000D67 A3               [24] 2571 	inc	dptr
      000D68 12r00r00         [24] 2572 	lcall	__gptrget
      000D6B FB               [12] 2573 	mov	r3,a
      000D6C 74 05            [12] 2574 	mov	a,#0x05
      000D6E 2E               [12] 2575 	add	a,r6
      000D6F FE               [12] 2576 	mov	r6,a
      000D70 E4               [12] 2577 	clr	a
      000D71 3F               [12] 2578 	addc	a,r7
      000D72 FF               [12] 2579 	mov	r7,a
      000D73 8E 82            [24] 2580 	mov	dpl,r6
      000D75 8F 83            [24] 2581 	mov	dph,r7
      000D77 8D F0            [24] 2582 	mov	b,r5
      000D79 12r00r00         [24] 2583 	lcall	__gptrget
      000D7C FE               [12] 2584 	mov	r6,a
      000D7D A3               [24] 2585 	inc	dptr
      000D7E 12r00r00         [24] 2586 	lcall	__gptrget
      000D81 FF               [12] 2587 	mov	r7,a
      000D82 C0 07            [24] 2588 	push	ar7
      000D84 C0 06            [24] 2589 	push	ar6
      000D86 C0 05            [24] 2590 	push	ar5
      000D88 C0 01            [24] 2591 	push	ar1
      000D8A C0 00            [24] 2592 	push	ar0
      000D8C C0 02            [24] 2593 	push	ar2
      000D8E C0 03            [24] 2594 	push	ar3
      000D90 C0 06            [24] 2595 	push	ar6
      000D92 C0 07            [24] 2596 	push	ar7
      000D94 74rB9            [12] 2597 	mov	a,#___str_11
      000D96 C0 E0            [24] 2598 	push	acc
      000D98 74s01            [12] 2599 	mov	a,#(___str_11 >> 8)
      000D9A C0 E0            [24] 2600 	push	acc
      000D9C 12r00r00         [24] 2601 	lcall	_printf_tiny
      000D9F E5 81            [12] 2602 	mov	a,sp
      000DA1 24 FA            [12] 2603 	add	a,#0xfa
      000DA3 F5 81            [12] 2604 	mov	sp,a
      000DA5 D0 00            [24] 2605 	pop	ar0
      000DA7 D0 01            [24] 2606 	pop	ar1
      000DA9 D0 05            [24] 2607 	pop	ar5
      000DAB D0 06            [24] 2608 	pop	ar6
      000DAD D0 07            [24] 2609 	pop	ar7
                                   2610 ;	uart.c:375: printf_tiny("\r\n\t\t-------------------------\r\n");
      000DAF D0 07            [24] 2611 	pop	ar7
      000DB1 D0 06            [24] 2612 	pop	ar6
      000DB3 D0 05            [24] 2613 	pop	ar5
                                   2614 ;	uart.c:373: printf_tiny("\r\n\t\t|    %d    |\t%d\t|", buffers[i].buf_id, buffers[i].buf_size);
      000DB5                       2615 00108$:
                                   2616 ;	uart.c:370: for (int i = 0; i < MAX_NUM_OF_BUFFERS; i++)
      000DB5 08               [12] 2617 	inc	r0
      000DB6 B8 00 01         [24] 2618 	cjne	r0,#0x00,00133$
      000DB9 09               [12] 2619 	inc	r1
      000DBA                       2620 00133$:
      000DBA 02r0CrC3         [24] 2621 	ljmp	00107$
      000DBD                       2622 00105$:
                                   2623 ;	uart.c:375: printf_tiny("\r\n\t\t-------------------------\r\n");
      000DBD 74rE3            [12] 2624 	mov	a,#___str_13
      000DBF C0 E0            [24] 2625 	push	acc
      000DC1 74s01            [12] 2626 	mov	a,#(___str_13 >> 8)
      000DC3 C0 E0            [24] 2627 	push	acc
      000DC5 12r00r00         [24] 2628 	lcall	_printf_tiny
      000DC8 15 81            [12] 2629 	dec	sp
      000DCA 15 81            [12] 2630 	dec	sp
                                   2631 ;	uart.c:376: }
      000DCC 22               [24] 2632 	ret
                                   2633 ;------------------------------------------------------------
                                   2634 ;Allocation info for local variables in function 'hexdump'
                                   2635 ;------------------------------------------------------------
                                   2636 ;sloc0                     Allocated with name '_hexdump_sloc0_1_0'
                                   2637 ;sloc1                     Allocated with name '_hexdump_sloc1_1_0'
                                   2638 ;nbytes                    Allocated with name '_hexdump_PARM_2'
                                   2639 ;loc                       Allocated with name '_hexdump_loc_65536_120'
                                   2640 ;loc_pointer               Allocated with name '_hexdump_loc_pointer_65536_121'
                                   2641 ;hex_byte                  Allocated with name '_hexdump_hex_byte_65536_121'
                                   2642 ;address_bytes             Allocated with name '_hexdump_address_bytes_65536_121'
                                   2643 ;num                       Allocated with name '_hexdump_num_65536_121'
                                   2644 ;total_chars_in_output_string Allocated with name '_hexdump_total_chars_in_output_string_65536_121'
                                   2645 ;i                         Allocated with name '_hexdump_i_131072_123'
                                   2646 ;j                         Allocated with name '_hexdump_j_327680_126'
                                   2647 ;------------------------------------------------------------
                                   2648 ;	uart.c:381: void hexdump(const void *loc, long nbytes)
                                   2649 ;	-----------------------------------------
                                   2650 ;	 function hexdump
                                   2651 ;	-----------------------------------------
      000DCD                       2652 _hexdump:
      000DCD AF F0            [24] 2653 	mov	r7,b
      000DCF AE 83            [24] 2654 	mov	r6,dph
      000DD1 E5 82            [12] 2655 	mov	a,dpl
      000DD3 90r00r32         [24] 2656 	mov	dptr,#_hexdump_loc_65536_120
      000DD6 F0               [24] 2657 	movx	@dptr,a
      000DD7 EE               [12] 2658 	mov	a,r6
      000DD8 A3               [24] 2659 	inc	dptr
      000DD9 F0               [24] 2660 	movx	@dptr,a
      000DDA EF               [12] 2661 	mov	a,r7
      000DDB A3               [24] 2662 	inc	dptr
      000DDC F0               [24] 2663 	movx	@dptr,a
                                   2664 ;	uart.c:383: const char *loc_pointer = loc;
      000DDD 90r00r32         [24] 2665 	mov	dptr,#_hexdump_loc_65536_120
      000DE0 E0               [24] 2666 	movx	a,@dptr
      000DE1 FD               [12] 2667 	mov	r5,a
      000DE2 A3               [24] 2668 	inc	dptr
      000DE3 E0               [24] 2669 	movx	a,@dptr
      000DE4 FE               [12] 2670 	mov	r6,a
      000DE5 A3               [24] 2671 	inc	dptr
      000DE6 E0               [24] 2672 	movx	a,@dptr
      000DE7 FF               [12] 2673 	mov	r7,a
                                   2674 ;	uart.c:384: char hex_byte[5] = "FF";
      000DE8 90r00r35         [24] 2675 	mov	dptr,#_hexdump_hex_byte_65536_121
      000DEB 74 46            [12] 2676 	mov	a,#0x46
      000DED F0               [24] 2677 	movx	@dptr,a
      000DEE 90r00r36         [24] 2678 	mov	dptr,#(_hexdump_hex_byte_65536_121 + 0x0001)
      000DF1 F0               [24] 2679 	movx	@dptr,a
      000DF2 90r00r37         [24] 2680 	mov	dptr,#(_hexdump_hex_byte_65536_121 + 0x0002)
      000DF5 E4               [12] 2681 	clr	a
      000DF6 F0               [24] 2682 	movx	@dptr,a
      000DF7 90r00r38         [24] 2683 	mov	dptr,#(_hexdump_hex_byte_65536_121 + 0x0003)
      000DFA F0               [24] 2684 	movx	@dptr,a
      000DFB 90r00r39         [24] 2685 	mov	dptr,#(_hexdump_hex_byte_65536_121 + 0x0004)
      000DFE F0               [24] 2686 	movx	@dptr,a
                                   2687 ;	uart.c:385: char address_bytes[7] = "0x0000";
      000DFF 90r00r3A         [24] 2688 	mov	dptr,#_hexdump_address_bytes_65536_121
      000E02 74 30            [12] 2689 	mov	a,#0x30
      000E04 F0               [24] 2690 	movx	@dptr,a
      000E05 90r00r3B         [24] 2691 	mov	dptr,#(_hexdump_address_bytes_65536_121 + 0x0001)
      000E08 74 78            [12] 2692 	mov	a,#0x78
      000E0A F0               [24] 2693 	movx	@dptr,a
      000E0B 90r00r3C         [24] 2694 	mov	dptr,#(_hexdump_address_bytes_65536_121 + 0x0002)
      000E0E 74 30            [12] 2695 	mov	a,#0x30
      000E10 F0               [24] 2696 	movx	@dptr,a
      000E11 90r00r3D         [24] 2697 	mov	dptr,#(_hexdump_address_bytes_65536_121 + 0x0003)
      000E14 F0               [24] 2698 	movx	@dptr,a
      000E15 90r00r3E         [24] 2699 	mov	dptr,#(_hexdump_address_bytes_65536_121 + 0x0004)
      000E18 F0               [24] 2700 	movx	@dptr,a
      000E19 90r00r3F         [24] 2701 	mov	dptr,#(_hexdump_address_bytes_65536_121 + 0x0005)
      000E1C F0               [24] 2702 	movx	@dptr,a
      000E1D 90r00r40         [24] 2703 	mov	dptr,#(_hexdump_address_bytes_65536_121 + 0x0006)
      000E20 E4               [12] 2704 	clr	a
      000E21 F0               [24] 2705 	movx	@dptr,a
                                   2706 ;	uart.c:392: if (nbytes == 0)
      000E22 90r00r2E         [24] 2707 	mov	dptr,#_hexdump_PARM_2
      000E25 E0               [24] 2708 	movx	a,@dptr
      000E26 F9               [12] 2709 	mov	r1,a
      000E27 A3               [24] 2710 	inc	dptr
      000E28 E0               [24] 2711 	movx	a,@dptr
      000E29 FA               [12] 2712 	mov	r2,a
      000E2A A3               [24] 2713 	inc	dptr
      000E2B E0               [24] 2714 	movx	a,@dptr
      000E2C FB               [12] 2715 	mov	r3,a
      000E2D A3               [24] 2716 	inc	dptr
      000E2E E0               [24] 2717 	movx	a,@dptr
      000E2F FC               [12] 2718 	mov	r4,a
      000E30 90r00r2E         [24] 2719 	mov	dptr,#_hexdump_PARM_2
      000E33 E0               [24] 2720 	movx	a,@dptr
      000E34 F5 F0            [12] 2721 	mov	b,a
      000E36 A3               [24] 2722 	inc	dptr
      000E37 E0               [24] 2723 	movx	a,@dptr
      000E38 42 F0            [12] 2724 	orl	b,a
      000E3A A3               [24] 2725 	inc	dptr
      000E3B E0               [24] 2726 	movx	a,@dptr
      000E3C 42 F0            [12] 2727 	orl	b,a
      000E3E A3               [24] 2728 	inc	dptr
      000E3F E0               [24] 2729 	movx	a,@dptr
      000E40 45 F0            [12] 2730 	orl	a,b
      000E42 70 16            [24] 2731 	jnz	00102$
                                   2732 ;	uart.c:394: printf("\r\n\r\n\t\tNo stored characters in the buffer\r\n");
      000E44 74r93            [12] 2733 	mov	a,#___str_37
      000E46 C0 E0            [24] 2734 	push	acc
      000E48 74s05            [12] 2735 	mov	a,#(___str_37 >> 8)
      000E4A C0 E0            [24] 2736 	push	acc
      000E4C 74 80            [12] 2737 	mov	a,#0x80
      000E4E C0 E0            [24] 2738 	push	acc
      000E50 12r00r00         [24] 2739 	lcall	_printf
      000E53 15 81            [12] 2740 	dec	sp
      000E55 15 81            [12] 2741 	dec	sp
      000E57 15 81            [12] 2742 	dec	sp
                                   2743 ;	uart.c:395: return;
      000E59 22               [24] 2744 	ret
      000E5A                       2745 00102$:
                                   2746 ;	uart.c:397: printf_tiny("\r\n\r\n\t\t|=======================================================");
      000E5A C0 07            [24] 2747 	push	ar7
      000E5C C0 06            [24] 2748 	push	ar6
      000E5E C0 05            [24] 2749 	push	ar5
      000E60 C0 04            [24] 2750 	push	ar4
      000E62 C0 03            [24] 2751 	push	ar3
      000E64 C0 02            [24] 2752 	push	ar2
      000E66 C0 01            [24] 2753 	push	ar1
      000E68 74rBE            [12] 2754 	mov	a,#___str_38
      000E6A C0 E0            [24] 2755 	push	acc
      000E6C 74s05            [12] 2756 	mov	a,#(___str_38 >> 8)
      000E6E C0 E0            [24] 2757 	push	acc
      000E70 12r00r00         [24] 2758 	lcall	_printf_tiny
      000E73 15 81            [12] 2759 	dec	sp
      000E75 15 81            [12] 2760 	dec	sp
      000E77 D0 01            [24] 2761 	pop	ar1
      000E79 D0 02            [24] 2762 	pop	ar2
      000E7B D0 03            [24] 2763 	pop	ar3
      000E7D D0 04            [24] 2764 	pop	ar4
      000E7F D0 05            [24] 2765 	pop	ar5
      000E81 D0 06            [24] 2766 	pop	ar6
      000E83 D0 07            [24] 2767 	pop	ar7
                                   2768 ;	uart.c:399: for (int i = 0; i < nbytes; i++)
      000E85 E4               [12] 2769 	clr	a
      000E86 F5*10            [12] 2770 	mov	_hexdump_sloc0_1_0,a
      000E88 F5*11            [12] 2771 	mov	(_hexdump_sloc0_1_0 + 1),a
      000E8A                       2772 00111$:
      000E8A C0 05            [24] 2773 	push	ar5
      000E8C C0 06            [24] 2774 	push	ar6
      000E8E C0 07            [24] 2775 	push	ar7
      000E90 A8*10            [24] 2776 	mov	r0,_hexdump_sloc0_1_0
      000E92 E5*11            [12] 2777 	mov	a,(_hexdump_sloc0_1_0 + 1)
      000E94 FD               [12] 2778 	mov	r5,a
      000E95 33               [12] 2779 	rlc	a
      000E96 95 E0            [12] 2780 	subb	a,acc
      000E98 FE               [12] 2781 	mov	r6,a
      000E99 FF               [12] 2782 	mov	r7,a
      000E9A C3               [12] 2783 	clr	c
      000E9B E8               [12] 2784 	mov	a,r0
      000E9C 99               [12] 2785 	subb	a,r1
      000E9D ED               [12] 2786 	mov	a,r5
      000E9E 9A               [12] 2787 	subb	a,r2
      000E9F EE               [12] 2788 	mov	a,r6
      000EA0 9B               [12] 2789 	subb	a,r3
      000EA1 EF               [12] 2790 	mov	a,r7
      000EA2 64 80            [12] 2791 	xrl	a,#0x80
      000EA4 8C F0            [24] 2792 	mov	b,r4
      000EA6 63 F0 80         [24] 2793 	xrl	b,#0x80
      000EA9 95 F0            [12] 2794 	subb	a,b
      000EAB D0 07            [24] 2795 	pop	ar7
      000EAD D0 06            [24] 2796 	pop	ar6
      000EAF D0 05            [24] 2797 	pop	ar5
      000EB1 40 03            [24] 2798 	jc	00142$
      000EB3 02r10rE9         [24] 2799 	ljmp	00106$
      000EB6                       2800 00142$:
                                   2801 ;	uart.c:401: if (i % 16 == 0) // 16 bytes per line
      000EB6 90r00r00         [24] 2802 	mov	dptr,#__modsint_PARM_2
      000EB9 74 10            [12] 2803 	mov	a,#0x10
      000EBB F0               [24] 2804 	movx	@dptr,a
      000EBC E4               [12] 2805 	clr	a
      000EBD A3               [24] 2806 	inc	dptr
      000EBE F0               [24] 2807 	movx	@dptr,a
      000EBF 85*10 82         [24] 2808 	mov	dpl,_hexdump_sloc0_1_0
      000EC2 85*11 83         [24] 2809 	mov	dph,(_hexdump_sloc0_1_0 + 1)
      000EC5 C0 07            [24] 2810 	push	ar7
      000EC7 C0 06            [24] 2811 	push	ar6
      000EC9 C0 05            [24] 2812 	push	ar5
      000ECB C0 04            [24] 2813 	push	ar4
      000ECD C0 03            [24] 2814 	push	ar3
      000ECF C0 02            [24] 2815 	push	ar2
      000ED1 C0 01            [24] 2816 	push	ar1
      000ED3 12r00r00         [24] 2817 	lcall	__modsint
      000ED6 E5 82            [12] 2818 	mov	a,dpl
      000ED8 85 83 F0         [24] 2819 	mov	b,dph
      000EDB D0 01            [24] 2820 	pop	ar1
      000EDD D0 02            [24] 2821 	pop	ar2
      000EDF D0 03            [24] 2822 	pop	ar3
      000EE1 D0 04            [24] 2823 	pop	ar4
      000EE3 D0 05            [24] 2824 	pop	ar5
      000EE5 D0 06            [24] 2825 	pop	ar6
      000EE7 D0 07            [24] 2826 	pop	ar7
      000EE9 45 F0            [12] 2827 	orl	a,b
      000EEB 60 03            [24] 2828 	jz	00143$
      000EED 02r10r08         [24] 2829 	ljmp	00105$
      000EF0                       2830 00143$:
                                   2831 ;	uart.c:404: uint_to_hexstr(address_bytes, sizeof(address_bytes), (uint16_t)loc_pointer + i, 16); // Converting offset address to hec string
      000EF0 C0 01            [24] 2832 	push	ar1
      000EF2 C0 02            [24] 2833 	push	ar2
      000EF4 C0 03            [24] 2834 	push	ar3
      000EF6 C0 04            [24] 2835 	push	ar4
      000EF8 8D 00            [24] 2836 	mov	ar0,r5
      000EFA 8E 03            [24] 2837 	mov	ar3,r6
      000EFC 8F 04            [24] 2838 	mov	ar4,r7
      000EFE AA*10            [24] 2839 	mov	r2,_hexdump_sloc0_1_0
      000F00 AC*11            [24] 2840 	mov	r4,(_hexdump_sloc0_1_0 + 1)
      000F02 EA               [12] 2841 	mov	a,r2
      000F03 28               [12] 2842 	add	a,r0
      000F04 F8               [12] 2843 	mov	r0,a
      000F05 EC               [12] 2844 	mov	a,r4
      000F06 3B               [12] 2845 	addc	a,r3
      000F07 FB               [12] 2846 	mov	r3,a
      000F08 90r00r41         [24] 2847 	mov	dptr,#_uint_to_hexstr_PARM_2
      000F0B 74 07            [12] 2848 	mov	a,#0x07
      000F0D F0               [24] 2849 	movx	@dptr,a
      000F0E E4               [12] 2850 	clr	a
      000F0F A3               [24] 2851 	inc	dptr
      000F10 F0               [24] 2852 	movx	@dptr,a
      000F11 A3               [24] 2853 	inc	dptr
      000F12 F0               [24] 2854 	movx	@dptr,a
      000F13 A3               [24] 2855 	inc	dptr
      000F14 F0               [24] 2856 	movx	@dptr,a
      000F15 90r00r45         [24] 2857 	mov	dptr,#_uint_to_hexstr_PARM_3
      000F18 E8               [12] 2858 	mov	a,r0
      000F19 F0               [24] 2859 	movx	@dptr,a
      000F1A EB               [12] 2860 	mov	a,r3
      000F1B A3               [24] 2861 	inc	dptr
      000F1C F0               [24] 2862 	movx	@dptr,a
      000F1D 90r00r47         [24] 2863 	mov	dptr,#_uint_to_hexstr_PARM_4
      000F20 74 10            [12] 2864 	mov	a,#0x10
      000F22 F0               [24] 2865 	movx	@dptr,a
      000F23 90r00r3A         [24] 2866 	mov	dptr,#_hexdump_address_bytes_65536_121
      000F26 75 F0 00         [24] 2867 	mov	b,#0x00
      000F29 C0 07            [24] 2868 	push	ar7
      000F2B C0 06            [24] 2869 	push	ar6
      000F2D C0 05            [24] 2870 	push	ar5
      000F2F C0 04            [24] 2871 	push	ar4
      000F31 C0 03            [24] 2872 	push	ar3
      000F33 C0 02            [24] 2873 	push	ar2
      000F35 C0 01            [24] 2874 	push	ar1
      000F37 12r10rF9         [24] 2875 	lcall	_uint_to_hexstr
                                   2876 ;	uart.c:405: printf("|\r\n\t\t| ");
      000F3A 74rFD            [12] 2877 	mov	a,#___str_39
      000F3C C0 E0            [24] 2878 	push	acc
      000F3E 74s05            [12] 2879 	mov	a,#(___str_39 >> 8)
      000F40 C0 E0            [24] 2880 	push	acc
      000F42 74 80            [12] 2881 	mov	a,#0x80
      000F44 C0 E0            [24] 2882 	push	acc
      000F46 12r00r00         [24] 2883 	lcall	_printf
      000F49 15 81            [12] 2884 	dec	sp
      000F4B 15 81            [12] 2885 	dec	sp
      000F4D 15 81            [12] 2886 	dec	sp
      000F4F D0 01            [24] 2887 	pop	ar1
      000F51 D0 02            [24] 2888 	pop	ar2
      000F53 D0 03            [24] 2889 	pop	ar3
      000F55 D0 04            [24] 2890 	pop	ar4
      000F57 D0 05            [24] 2891 	pop	ar5
      000F59 D0 06            [24] 2892 	pop	ar6
      000F5B D0 07            [24] 2893 	pop	ar7
                                   2894 ;	uart.c:407: for (int j = 2; j < 6; j++) // Adding offset in bytes from loc
      000F5D 75*12 02         [24] 2895 	mov	_hexdump_sloc1_1_0,#0x02
      000F60 75*13 00         [24] 2896 	mov	(_hexdump_sloc1_1_0 + 1),#0x00
                                   2897 ;	uart.c:421: printf_tiny("\r\n\t\t|=======================================================|\r\n");
      000F63 D0 04            [24] 2898 	pop	ar4
      000F65 D0 03            [24] 2899 	pop	ar3
      000F67 D0 02            [24] 2900 	pop	ar2
      000F69 D0 01            [24] 2901 	pop	ar1
                                   2902 ;	uart.c:407: for (int j = 2; j < 6; j++) // Adding offset in bytes from loc
      000F6B                       2903 00108$:
      000F6B C3               [12] 2904 	clr	c
      000F6C E5*12            [12] 2905 	mov	a,_hexdump_sloc1_1_0
      000F6E 94 06            [12] 2906 	subb	a,#0x06
      000F70 E5*13            [12] 2907 	mov	a,(_hexdump_sloc1_1_0 + 1)
      000F72 64 80            [12] 2908 	xrl	a,#0x80
      000F74 94 80            [12] 2909 	subb	a,#0x80
      000F76 50 5F            [24] 2910 	jnc	00103$
                                   2911 ;	uart.c:409: printf("%c", address_bytes[j]);
      000F78 C0 01            [24] 2912 	push	ar1
      000F7A C0 02            [24] 2913 	push	ar2
      000F7C C0 03            [24] 2914 	push	ar3
      000F7E C0 04            [24] 2915 	push	ar4
      000F80 E5*12            [12] 2916 	mov	a,_hexdump_sloc1_1_0
      000F82 24r3A            [12] 2917 	add	a,#_hexdump_address_bytes_65536_121
      000F84 F5 82            [12] 2918 	mov	dpl,a
      000F86 E5*13            [12] 2919 	mov	a,(_hexdump_sloc1_1_0 + 1)
      000F88 34s00            [12] 2920 	addc	a,#(_hexdump_address_bytes_65536_121 >> 8)
      000F8A F5 83            [12] 2921 	mov	dph,a
      000F8C E0               [24] 2922 	movx	a,@dptr
      000F8D F8               [12] 2923 	mov	r0,a
      000F8E 7C 00            [12] 2924 	mov	r4,#0x00
      000F90 C0 07            [24] 2925 	push	ar7
      000F92 C0 06            [24] 2926 	push	ar6
      000F94 C0 05            [24] 2927 	push	ar5
      000F96 C0 04            [24] 2928 	push	ar4
      000F98 C0 03            [24] 2929 	push	ar3
      000F9A C0 02            [24] 2930 	push	ar2
      000F9C C0 01            [24] 2931 	push	ar1
      000F9E C0 00            [24] 2932 	push	ar0
      000FA0 C0 04            [24] 2933 	push	ar4
      000FA2 74rFB            [12] 2934 	mov	a,#___str_24
      000FA4 C0 E0            [24] 2935 	push	acc
      000FA6 74s03            [12] 2936 	mov	a,#(___str_24 >> 8)
      000FA8 C0 E0            [24] 2937 	push	acc
      000FAA 74 80            [12] 2938 	mov	a,#0x80
      000FAC C0 E0            [24] 2939 	push	acc
      000FAE 12r00r00         [24] 2940 	lcall	_printf
      000FB1 E5 81            [12] 2941 	mov	a,sp
      000FB3 24 FB            [12] 2942 	add	a,#0xfb
      000FB5 F5 81            [12] 2943 	mov	sp,a
      000FB7 D0 01            [24] 2944 	pop	ar1
      000FB9 D0 02            [24] 2945 	pop	ar2
      000FBB D0 03            [24] 2946 	pop	ar3
      000FBD D0 04            [24] 2947 	pop	ar4
      000FBF D0 05            [24] 2948 	pop	ar5
      000FC1 D0 06            [24] 2949 	pop	ar6
      000FC3 D0 07            [24] 2950 	pop	ar7
                                   2951 ;	uart.c:407: for (int j = 2; j < 6; j++) // Adding offset in bytes from loc
      000FC5 05*12            [12] 2952 	inc	_hexdump_sloc1_1_0
      000FC7 E4               [12] 2953 	clr	a
      000FC8 B5*12 02         [24] 2954 	cjne	a,_hexdump_sloc1_1_0,00145$
      000FCB 05*13            [12] 2955 	inc	(_hexdump_sloc1_1_0 + 1)
      000FCD                       2956 00145$:
      000FCD D0 04            [24] 2957 	pop	ar4
      000FCF D0 03            [24] 2958 	pop	ar3
      000FD1 D0 02            [24] 2959 	pop	ar2
      000FD3 D0 01            [24] 2960 	pop	ar1
      000FD5 80 94            [24] 2961 	sjmp	00108$
      000FD7                       2962 00103$:
                                   2963 ;	uart.c:412: printf(": ");
      000FD7 C0 07            [24] 2964 	push	ar7
      000FD9 C0 06            [24] 2965 	push	ar6
      000FDB C0 05            [24] 2966 	push	ar5
      000FDD C0 04            [24] 2967 	push	ar4
      000FDF C0 03            [24] 2968 	push	ar3
      000FE1 C0 02            [24] 2969 	push	ar2
      000FE3 C0 01            [24] 2970 	push	ar1
      000FE5 74r05            [12] 2971 	mov	a,#___str_40
      000FE7 C0 E0            [24] 2972 	push	acc
      000FE9 74s06            [12] 2973 	mov	a,#(___str_40 >> 8)
      000FEB C0 E0            [24] 2974 	push	acc
      000FED 74 80            [12] 2975 	mov	a,#0x80
      000FEF C0 E0            [24] 2976 	push	acc
      000FF1 12r00r00         [24] 2977 	lcall	_printf
      000FF4 15 81            [12] 2978 	dec	sp
      000FF6 15 81            [12] 2979 	dec	sp
      000FF8 15 81            [12] 2980 	dec	sp
      000FFA D0 01            [24] 2981 	pop	ar1
      000FFC D0 02            [24] 2982 	pop	ar2
      000FFE D0 03            [24] 2983 	pop	ar3
      001000 D0 04            [24] 2984 	pop	ar4
      001002 D0 05            [24] 2985 	pop	ar5
      001004 D0 06            [24] 2986 	pop	ar6
      001006 D0 07            [24] 2987 	pop	ar7
      001008                       2988 00105$:
                                   2989 ;	uart.c:414: num = *loc_pointer;
      001008 C0 01            [24] 2990 	push	ar1
      00100A C0 02            [24] 2991 	push	ar2
      00100C C0 03            [24] 2992 	push	ar3
      00100E C0 04            [24] 2993 	push	ar4
      001010 8D 82            [24] 2994 	mov	dpl,r5
      001012 8E 83            [24] 2995 	mov	dph,r6
      001014 8F F0            [24] 2996 	mov	b,r7
      001016 12r00r00         [24] 2997 	lcall	__gptrget
      001019 F8               [12] 2998 	mov	r0,a
      00101A A3               [24] 2999 	inc	dptr
      00101B AD 82            [24] 3000 	mov	r5,dpl
      00101D AE 83            [24] 3001 	mov	r6,dph
      00101F 7C 00            [12] 3002 	mov	r4,#0x00
                                   3003 ;	uart.c:415: uint_to_hexstr(hex_byte, sizeof(hex_byte), num, 8); // conveting each character to hex string
      001021 90r00r41         [24] 3004 	mov	dptr,#_uint_to_hexstr_PARM_2
      001024 74 05            [12] 3005 	mov	a,#0x05
      001026 F0               [24] 3006 	movx	@dptr,a
      001027 E4               [12] 3007 	clr	a
      001028 A3               [24] 3008 	inc	dptr
      001029 F0               [24] 3009 	movx	@dptr,a
      00102A A3               [24] 3010 	inc	dptr
      00102B F0               [24] 3011 	movx	@dptr,a
      00102C A3               [24] 3012 	inc	dptr
      00102D F0               [24] 3013 	movx	@dptr,a
      00102E 90r00r45         [24] 3014 	mov	dptr,#_uint_to_hexstr_PARM_3
      001031 E8               [12] 3015 	mov	a,r0
      001032 F0               [24] 3016 	movx	@dptr,a
      001033 EC               [12] 3017 	mov	a,r4
      001034 A3               [24] 3018 	inc	dptr
      001035 F0               [24] 3019 	movx	@dptr,a
      001036 90r00r47         [24] 3020 	mov	dptr,#_uint_to_hexstr_PARM_4
      001039 74 08            [12] 3021 	mov	a,#0x08
      00103B F0               [24] 3022 	movx	@dptr,a
      00103C 90r00r35         [24] 3023 	mov	dptr,#_hexdump_hex_byte_65536_121
      00103F 75 F0 00         [24] 3024 	mov	b,#0x00
      001042 C0 07            [24] 3025 	push	ar7
      001044 C0 06            [24] 3026 	push	ar6
      001046 C0 05            [24] 3027 	push	ar5
      001048 C0 04            [24] 3028 	push	ar4
      00104A C0 03            [24] 3029 	push	ar3
      00104C C0 02            [24] 3030 	push	ar2
      00104E C0 01            [24] 3031 	push	ar1
      001050 12r10rF9         [24] 3032 	lcall	_uint_to_hexstr
      001053 D0 01            [24] 3033 	pop	ar1
      001055 D0 02            [24] 3034 	pop	ar2
      001057 D0 03            [24] 3035 	pop	ar3
      001059 D0 04            [24] 3036 	pop	ar4
                                   3037 ;	uart.c:416: printf("%c", hex_byte[2]);
      00105B 90r00r37         [24] 3038 	mov	dptr,#(_hexdump_hex_byte_65536_121 + 0x0002)
      00105E E0               [24] 3039 	movx	a,@dptr
      00105F FC               [12] 3040 	mov	r4,a
      001060 7B 00            [12] 3041 	mov	r3,#0x00
      001062 C0 04            [24] 3042 	push	ar4
      001064 C0 03            [24] 3043 	push	ar3
      001066 C0 02            [24] 3044 	push	ar2
      001068 C0 01            [24] 3045 	push	ar1
      00106A C0 04            [24] 3046 	push	ar4
      00106C C0 03            [24] 3047 	push	ar3
      00106E 74rFB            [12] 3048 	mov	a,#___str_24
      001070 C0 E0            [24] 3049 	push	acc
      001072 74s03            [12] 3050 	mov	a,#(___str_24 >> 8)
      001074 C0 E0            [24] 3051 	push	acc
      001076 74 80            [12] 3052 	mov	a,#0x80
      001078 C0 E0            [24] 3053 	push	acc
      00107A 12r00r00         [24] 3054 	lcall	_printf
      00107D E5 81            [12] 3055 	mov	a,sp
      00107F 24 FB            [12] 3056 	add	a,#0xfb
      001081 F5 81            [12] 3057 	mov	sp,a
      001083 D0 01            [24] 3058 	pop	ar1
      001085 D0 02            [24] 3059 	pop	ar2
      001087 D0 03            [24] 3060 	pop	ar3
      001089 D0 04            [24] 3061 	pop	ar4
                                   3062 ;	uart.c:417: printf("%c", hex_byte[3]);
      00108B 90r00r38         [24] 3063 	mov	dptr,#(_hexdump_hex_byte_65536_121 + 0x0003)
      00108E E0               [24] 3064 	movx	a,@dptr
      00108F FC               [12] 3065 	mov	r4,a
      001090 7B 00            [12] 3066 	mov	r3,#0x00
      001092 C0 04            [24] 3067 	push	ar4
      001094 C0 03            [24] 3068 	push	ar3
      001096 C0 02            [24] 3069 	push	ar2
      001098 C0 01            [24] 3070 	push	ar1
      00109A C0 04            [24] 3071 	push	ar4
      00109C C0 03            [24] 3072 	push	ar3
      00109E 74rFB            [12] 3073 	mov	a,#___str_24
      0010A0 C0 E0            [24] 3074 	push	acc
      0010A2 74s03            [12] 3075 	mov	a,#(___str_24 >> 8)
      0010A4 C0 E0            [24] 3076 	push	acc
      0010A6 74 80            [12] 3077 	mov	a,#0x80
      0010A8 C0 E0            [24] 3078 	push	acc
      0010AA 12r00r00         [24] 3079 	lcall	_printf
      0010AD E5 81            [12] 3080 	mov	a,sp
      0010AF 24 FB            [12] 3081 	add	a,#0xfb
      0010B1 F5 81            [12] 3082 	mov	sp,a
                                   3083 ;	uart.c:418: printf(" ");
      0010B3 74r08            [12] 3084 	mov	a,#___str_41
      0010B5 C0 E0            [24] 3085 	push	acc
      0010B7 74s06            [12] 3086 	mov	a,#(___str_41 >> 8)
      0010B9 C0 E0            [24] 3087 	push	acc
      0010BB 74 80            [12] 3088 	mov	a,#0x80
      0010BD C0 E0            [24] 3089 	push	acc
      0010BF 12r00r00         [24] 3090 	lcall	_printf
      0010C2 15 81            [12] 3091 	dec	sp
      0010C4 15 81            [12] 3092 	dec	sp
      0010C6 15 81            [12] 3093 	dec	sp
      0010C8 D0 01            [24] 3094 	pop	ar1
      0010CA D0 02            [24] 3095 	pop	ar2
      0010CC D0 03            [24] 3096 	pop	ar3
      0010CE D0 04            [24] 3097 	pop	ar4
      0010D0 D0 05            [24] 3098 	pop	ar5
      0010D2 D0 06            [24] 3099 	pop	ar6
      0010D4 D0 07            [24] 3100 	pop	ar7
                                   3101 ;	uart.c:419: loc_pointer++;
                                   3102 ;	uart.c:399: for (int i = 0; i < nbytes; i++)
      0010D6 05*10            [12] 3103 	inc	_hexdump_sloc0_1_0
      0010D8 E4               [12] 3104 	clr	a
      0010D9 B5*10 02         [24] 3105 	cjne	a,_hexdump_sloc0_1_0,00146$
      0010DC 05*11            [12] 3106 	inc	(_hexdump_sloc0_1_0 + 1)
      0010DE                       3107 00146$:
      0010DE D0 04            [24] 3108 	pop	ar4
      0010E0 D0 03            [24] 3109 	pop	ar3
      0010E2 D0 02            [24] 3110 	pop	ar2
      0010E4 D0 01            [24] 3111 	pop	ar1
      0010E6 02r0Er8A         [24] 3112 	ljmp	00111$
      0010E9                       3113 00106$:
                                   3114 ;	uart.c:421: printf_tiny("\r\n\t\t|=======================================================|\r\n");
      0010E9 74r0A            [12] 3115 	mov	a,#___str_42
      0010EB C0 E0            [24] 3116 	push	acc
      0010ED 74s06            [12] 3117 	mov	a,#(___str_42 >> 8)
      0010EF C0 E0            [24] 3118 	push	acc
      0010F1 12r00r00         [24] 3119 	lcall	_printf_tiny
      0010F4 15 81            [12] 3120 	dec	sp
      0010F6 15 81            [12] 3121 	dec	sp
                                   3122 ;	uart.c:422: }
      0010F8 22               [24] 3123 	ret
                                   3124 ;------------------------------------------------------------
                                   3125 ;Allocation info for local variables in function 'uint_to_hexstr'
                                   3126 ;------------------------------------------------------------
                                   3127 ;sloc0                     Allocated with name '_uint_to_hexstr_sloc0_1_0'
                                   3128 ;sloc1                     Allocated with name '_uint_to_hexstr_sloc1_1_0'
                                   3129 ;sloc2                     Allocated with name '_uint_to_hexstr_sloc2_1_0'
                                   3130 ;sloc3                     Allocated with name '_uint_to_hexstr_sloc3_1_0'
                                   3131 ;size                      Allocated with name '_uint_to_hexstr_PARM_2'
                                   3132 ;num                       Allocated with name '_uint_to_hexstr_PARM_3'
                                   3133 ;nbits                     Allocated with name '_uint_to_hexstr_PARM_4'
                                   3134 ;str                       Allocated with name '_uint_to_hexstr_str_65536_128'
                                   3135 ;rem                       Allocated with name '_uint_to_hexstr_rem_65536_129'
                                   3136 ;total_chars               Allocated with name '_uint_to_hexstr_total_chars_65536_129'
                                   3137 ;i                         Allocated with name '_uint_to_hexstr_i_131072_132'
                                   3138 ;------------------------------------------------------------
                                   3139 ;	uart.c:427: int uint_to_hexstr(char *str, long size, uint16_t num, uint8_t nbits)
                                   3140 ;	-----------------------------------------
                                   3141 ;	 function uint_to_hexstr
                                   3142 ;	-----------------------------------------
      0010F9                       3143 _uint_to_hexstr:
      0010F9 AF F0            [24] 3144 	mov	r7,b
      0010FB AE 83            [24] 3145 	mov	r6,dph
      0010FD E5 82            [12] 3146 	mov	a,dpl
      0010FF 90r00r48         [24] 3147 	mov	dptr,#_uint_to_hexstr_str_65536_128
      001102 F0               [24] 3148 	movx	@dptr,a
      001103 EE               [12] 3149 	mov	a,r6
      001104 A3               [24] 3150 	inc	dptr
      001105 F0               [24] 3151 	movx	@dptr,a
      001106 EF               [12] 3152 	mov	a,r7
      001107 A3               [24] 3153 	inc	dptr
      001108 F0               [24] 3154 	movx	@dptr,a
                                   3155 ;	uart.c:433: if ((nbits != 4) && (nbits != 8) && (nbits != 16) && (nbits != 32))
      001109 90r00r47         [24] 3156 	mov	dptr,#_uint_to_hexstr_PARM_4
      00110C E0               [24] 3157 	movx	a,@dptr
      00110D FF               [12] 3158 	mov	r7,a
      00110E BF 04 02         [24] 3159 	cjne	r7,#0x04,00150$
      001111 80 28            [24] 3160 	sjmp	00102$
      001113                       3161 00150$:
      001113 BF 08 02         [24] 3162 	cjne	r7,#0x08,00151$
      001116 80 23            [24] 3163 	sjmp	00102$
      001118                       3164 00151$:
      001118 BF 10 02         [24] 3165 	cjne	r7,#0x10,00152$
      00111B 80 1E            [24] 3166 	sjmp	00102$
      00111D                       3167 00152$:
      00111D BF 20 02         [24] 3168 	cjne	r7,#0x20,00153$
      001120 80 19            [24] 3169 	sjmp	00102$
      001122                       3170 00153$:
                                   3171 ;	uart.c:435: str[0] = '\0';
      001122 90r00r48         [24] 3172 	mov	dptr,#_uint_to_hexstr_str_65536_128
      001125 E0               [24] 3173 	movx	a,@dptr
      001126 FC               [12] 3174 	mov	r4,a
      001127 A3               [24] 3175 	inc	dptr
      001128 E0               [24] 3176 	movx	a,@dptr
      001129 FD               [12] 3177 	mov	r5,a
      00112A A3               [24] 3178 	inc	dptr
      00112B E0               [24] 3179 	movx	a,@dptr
      00112C FE               [12] 3180 	mov	r6,a
      00112D 8C 82            [24] 3181 	mov	dpl,r4
      00112F 8D 83            [24] 3182 	mov	dph,r5
      001131 8E F0            [24] 3183 	mov	b,r6
      001133 E4               [12] 3184 	clr	a
      001134 12r00r00         [24] 3185 	lcall	__gptrput
                                   3186 ;	uart.c:436: return -1;
      001137 90 FF FF         [24] 3187 	mov	dptr,#0xffff
      00113A 22               [24] 3188 	ret
      00113B                       3189 00102$:
                                   3190 ;	uart.c:439: total_chars = nbits / 4 + 3; // Every nibble requires 4 chars for representation AND +2 for 0x and +1 for \0
      00113B 7E 00            [12] 3191 	mov	r6,#0x00
      00113D 90r00r00         [24] 3192 	mov	dptr,#__divsint_PARM_2
      001140 74 04            [12] 3193 	mov	a,#0x04
      001142 F0               [24] 3194 	movx	@dptr,a
      001143 E4               [12] 3195 	clr	a
      001144 A3               [24] 3196 	inc	dptr
      001145 F0               [24] 3197 	movx	@dptr,a
      001146 8F 82            [24] 3198 	mov	dpl,r7
      001148 8E 83            [24] 3199 	mov	dph,r6
      00114A 12r00r00         [24] 3200 	lcall	__divsint
      00114D 85 82*1D         [24] 3201 	mov	_uint_to_hexstr_sloc3_1_0,dpl
      001150 85 83*1E         [24] 3202 	mov	(_uint_to_hexstr_sloc3_1_0 + 1),dph
      001153 74 03            [12] 3203 	mov	a,#0x03
      001155 25*1D            [12] 3204 	add	a,_uint_to_hexstr_sloc3_1_0
      001157 F5*18            [12] 3205 	mov	_uint_to_hexstr_sloc1_1_0,a
      001159 E4               [12] 3206 	clr	a
      00115A 35*1E            [12] 3207 	addc	a,(_uint_to_hexstr_sloc3_1_0 + 1)
      00115C F5*19            [12] 3208 	mov	(_uint_to_hexstr_sloc1_1_0 + 1),a
                                   3209 ;	uart.c:442: if (total_chars > size)
      00115E 90r00r41         [24] 3210 	mov	dptr,#_uint_to_hexstr_PARM_2
      001161 E0               [24] 3211 	movx	a,@dptr
      001162 F5*14            [12] 3212 	mov	_uint_to_hexstr_sloc0_1_0,a
      001164 A3               [24] 3213 	inc	dptr
      001165 E0               [24] 3214 	movx	a,@dptr
      001166 F5*15            [12] 3215 	mov	(_uint_to_hexstr_sloc0_1_0 + 1),a
      001168 A3               [24] 3216 	inc	dptr
      001169 E0               [24] 3217 	movx	a,@dptr
      00116A F5*16            [12] 3218 	mov	(_uint_to_hexstr_sloc0_1_0 + 2),a
      00116C A3               [24] 3219 	inc	dptr
      00116D E0               [24] 3220 	movx	a,@dptr
      00116E F5*17            [12] 3221 	mov	(_uint_to_hexstr_sloc0_1_0 + 3),a
      001170 A8*18            [24] 3222 	mov	r0,_uint_to_hexstr_sloc1_1_0
      001172 E5*19            [12] 3223 	mov	a,(_uint_to_hexstr_sloc1_1_0 + 1)
      001174 F9               [12] 3224 	mov	r1,a
      001175 33               [12] 3225 	rlc	a
      001176 95 E0            [12] 3226 	subb	a,acc
      001178 FA               [12] 3227 	mov	r2,a
      001179 FB               [12] 3228 	mov	r3,a
      00117A C3               [12] 3229 	clr	c
      00117B E5*14            [12] 3230 	mov	a,_uint_to_hexstr_sloc0_1_0
      00117D 98               [12] 3231 	subb	a,r0
      00117E E5*15            [12] 3232 	mov	a,(_uint_to_hexstr_sloc0_1_0 + 1)
      001180 99               [12] 3233 	subb	a,r1
      001181 E5*16            [12] 3234 	mov	a,(_uint_to_hexstr_sloc0_1_0 + 2)
      001183 9A               [12] 3235 	subb	a,r2
      001184 E5*17            [12] 3236 	mov	a,(_uint_to_hexstr_sloc0_1_0 + 3)
      001186 64 80            [12] 3237 	xrl	a,#0x80
      001188 8B F0            [24] 3238 	mov	b,r3
      00118A 63 F0 80         [24] 3239 	xrl	b,#0x80
      00118D 95 F0            [12] 3240 	subb	a,b
      00118F 50 19            [24] 3241 	jnc	00107$
                                   3242 ;	uart.c:444: str[0] = '\0';
      001191 90r00r48         [24] 3243 	mov	dptr,#_uint_to_hexstr_str_65536_128
      001194 E0               [24] 3244 	movx	a,@dptr
      001195 F9               [12] 3245 	mov	r1,a
      001196 A3               [24] 3246 	inc	dptr
      001197 E0               [24] 3247 	movx	a,@dptr
      001198 FA               [12] 3248 	mov	r2,a
      001199 A3               [24] 3249 	inc	dptr
      00119A E0               [24] 3250 	movx	a,@dptr
      00119B FB               [12] 3251 	mov	r3,a
      00119C 89 82            [24] 3252 	mov	dpl,r1
      00119E 8A 83            [24] 3253 	mov	dph,r2
      0011A0 8B F0            [24] 3254 	mov	b,r3
      0011A2 E4               [12] 3255 	clr	a
      0011A3 12r00r00         [24] 3256 	lcall	__gptrput
                                   3257 ;	uart.c:445: return -1;
      0011A6 90 FF FF         [24] 3258 	mov	dptr,#0xffff
      0011A9 22               [24] 3259 	ret
      0011AA                       3260 00107$:
                                   3261 ;	uart.c:448: str[0] = '0';
      0011AA 90r00r48         [24] 3262 	mov	dptr,#_uint_to_hexstr_str_65536_128
      0011AD E0               [24] 3263 	movx	a,@dptr
      0011AE F9               [12] 3264 	mov	r1,a
      0011AF A3               [24] 3265 	inc	dptr
      0011B0 E0               [24] 3266 	movx	a,@dptr
      0011B1 FA               [12] 3267 	mov	r2,a
      0011B2 A3               [24] 3268 	inc	dptr
      0011B3 E0               [24] 3269 	movx	a,@dptr
      0011B4 FB               [12] 3270 	mov	r3,a
      0011B5 89 82            [24] 3271 	mov	dpl,r1
      0011B7 8A 83            [24] 3272 	mov	dph,r2
      0011B9 8B F0            [24] 3273 	mov	b,r3
      0011BB 74 30            [12] 3274 	mov	a,#0x30
      0011BD 12r00r00         [24] 3275 	lcall	__gptrput
                                   3276 ;	uart.c:449: str[1] = 'x';
      0011C0 74 01            [12] 3277 	mov	a,#0x01
      0011C2 29               [12] 3278 	add	a,r1
      0011C3 F8               [12] 3279 	mov	r0,a
      0011C4 E4               [12] 3280 	clr	a
      0011C5 3A               [12] 3281 	addc	a,r2
      0011C6 FC               [12] 3282 	mov	r4,a
      0011C7 8B 05            [24] 3283 	mov	ar5,r3
      0011C9 88 82            [24] 3284 	mov	dpl,r0
      0011CB 8C 83            [24] 3285 	mov	dph,r4
      0011CD 8D F0            [24] 3286 	mov	b,r5
      0011CF 74 78            [12] 3287 	mov	a,#0x78
      0011D1 12r00r00         [24] 3288 	lcall	__gptrput
                                   3289 ;	uart.c:450: str[total_chars] = '\0';
      0011D4 E5*18            [12] 3290 	mov	a,_uint_to_hexstr_sloc1_1_0
      0011D6 29               [12] 3291 	add	a,r1
      0011D7 F8               [12] 3292 	mov	r0,a
      0011D8 E5*19            [12] 3293 	mov	a,(_uint_to_hexstr_sloc1_1_0 + 1)
      0011DA 3A               [12] 3294 	addc	a,r2
      0011DB FC               [12] 3295 	mov	r4,a
      0011DC 8B 05            [24] 3296 	mov	ar5,r3
      0011DE 88 82            [24] 3297 	mov	dpl,r0
      0011E0 8C 83            [24] 3298 	mov	dph,r4
      0011E2 8D F0            [24] 3299 	mov	b,r5
      0011E4 E4               [12] 3300 	clr	a
      0011E5 12r00r00         [24] 3301 	lcall	__gptrput
                                   3302 ;	uart.c:453: for (int i = total_chars - 2; i > 1; i--)
      0011E8 E5*1D            [12] 3303 	mov	a,_uint_to_hexstr_sloc3_1_0
      0011EA 24 01            [12] 3304 	add	a,#0x01
      0011EC FC               [12] 3305 	mov	r4,a
      0011ED E4               [12] 3306 	clr	a
      0011EE 35*1E            [12] 3307 	addc	a,(_uint_to_hexstr_sloc3_1_0 + 1)
      0011F0 FD               [12] 3308 	mov	r5,a
      0011F1 89*14            [24] 3309 	mov	_uint_to_hexstr_sloc0_1_0,r1
      0011F3 8A*15            [24] 3310 	mov	(_uint_to_hexstr_sloc0_1_0 + 1),r2
      0011F5 8B*16            [24] 3311 	mov	(_uint_to_hexstr_sloc0_1_0 + 2),r3
      0011F7                       3312 00113$:
      0011F7 C3               [12] 3313 	clr	c
      0011F8 74 01            [12] 3314 	mov	a,#0x01
      0011FA 9C               [12] 3315 	subb	a,r4
      0011FB 74 80            [12] 3316 	mov	a,#(0x00 ^ 0x80)
      0011FD 8D F0            [24] 3317 	mov	b,r5
      0011FF 63 F0 80         [24] 3318 	xrl	b,#0x80
      001202 95 F0            [12] 3319 	subb	a,b
      001204 40 03            [24] 3320 	jc	00155$
      001206 02r12rBB         [24] 3321 	ljmp	00111$
      001209                       3322 00155$:
                                   3323 ;	uart.c:455: rem = num % 16;
      001209 90r00r45         [24] 3324 	mov	dptr,#_uint_to_hexstr_PARM_3
      00120C E0               [24] 3325 	movx	a,@dptr
      00120D F8               [12] 3326 	mov	r0,a
      00120E A3               [24] 3327 	inc	dptr
      00120F E0               [24] 3328 	movx	a,@dptr
      001210 74 0F            [12] 3329 	mov	a,#0x0f
      001212 58               [12] 3330 	anl	a,r0
      001213 F5*18            [12] 3331 	mov	_uint_to_hexstr_sloc1_1_0,a
      001215 75*19 00         [24] 3332 	mov	(_uint_to_hexstr_sloc1_1_0 + 1),#0x00
                                   3333 ;	uart.c:456: if (rem < 10)
      001218 AE*18            [24] 3334 	mov	r6,_uint_to_hexstr_sloc1_1_0
      00121A AF*19            [24] 3335 	mov	r7,(_uint_to_hexstr_sloc1_1_0 + 1)
      00121C C3               [12] 3336 	clr	c
      00121D EE               [12] 3337 	mov	a,r6
      00121E 94 0A            [12] 3338 	subb	a,#0x0a
      001220 EF               [12] 3339 	mov	a,r7
      001221 64 80            [12] 3340 	xrl	a,#0x80
      001223 94 80            [12] 3341 	subb	a,#0x80
      001225 50 20            [24] 3342 	jnc	00109$
                                   3343 ;	uart.c:458: str[i] = '0' + rem;
      001227 EC               [12] 3344 	mov	a,r4
      001228 29               [12] 3345 	add	a,r1
      001229 F5*1A            [12] 3346 	mov	_uint_to_hexstr_sloc2_1_0,a
      00122B ED               [12] 3347 	mov	a,r5
      00122C 3A               [12] 3348 	addc	a,r2
      00122D F5*1B            [12] 3349 	mov	(_uint_to_hexstr_sloc2_1_0 + 1),a
      00122F 8B*1C            [24] 3350 	mov	(_uint_to_hexstr_sloc2_1_0 + 2),r3
      001231 AE*18            [24] 3351 	mov	r6,_uint_to_hexstr_sloc1_1_0
      001233 AF*19            [24] 3352 	mov	r7,(_uint_to_hexstr_sloc1_1_0 + 1)
      001235 74 30            [12] 3353 	mov	a,#0x30
      001237 2E               [12] 3354 	add	a,r6
      001238 FE               [12] 3355 	mov	r6,a
      001239 85*1A 82         [24] 3356 	mov	dpl,_uint_to_hexstr_sloc2_1_0
      00123C 85*1B 83         [24] 3357 	mov	dph,(_uint_to_hexstr_sloc2_1_0 + 1)
      00123F 85*1C F0         [24] 3358 	mov	b,(_uint_to_hexstr_sloc2_1_0 + 2)
      001242 12r00r00         [24] 3359 	lcall	__gptrput
      001245 80 50            [24] 3360 	sjmp	00110$
      001247                       3361 00109$:
                                   3362 ;	uart.c:462: str[i] = 'A' + (rem % 10);
      001247 C0 01            [24] 3363 	push	ar1
      001249 C0 02            [24] 3364 	push	ar2
      00124B C0 03            [24] 3365 	push	ar3
      00124D EC               [12] 3366 	mov	a,r4
      00124E 25*14            [12] 3367 	add	a,_uint_to_hexstr_sloc0_1_0
      001250 F8               [12] 3368 	mov	r0,a
      001251 ED               [12] 3369 	mov	a,r5
      001252 35*15            [12] 3370 	addc	a,(_uint_to_hexstr_sloc0_1_0 + 1)
      001254 FE               [12] 3371 	mov	r6,a
      001255 AF*16            [24] 3372 	mov	r7,(_uint_to_hexstr_sloc0_1_0 + 2)
      001257 AA*18            [24] 3373 	mov	r2,_uint_to_hexstr_sloc1_1_0
      001259 AB*19            [24] 3374 	mov	r3,(_uint_to_hexstr_sloc1_1_0 + 1)
      00125B 90r00r00         [24] 3375 	mov	dptr,#__modsint_PARM_2
      00125E 74 0A            [12] 3376 	mov	a,#0x0a
      001260 F0               [24] 3377 	movx	@dptr,a
      001261 E4               [12] 3378 	clr	a
      001262 A3               [24] 3379 	inc	dptr
      001263 F0               [24] 3380 	movx	@dptr,a
      001264 8A 82            [24] 3381 	mov	dpl,r2
      001266 8B 83            [24] 3382 	mov	dph,r3
      001268 C0 07            [24] 3383 	push	ar7
      00126A C0 06            [24] 3384 	push	ar6
      00126C C0 05            [24] 3385 	push	ar5
      00126E C0 04            [24] 3386 	push	ar4
      001270 C0 01            [24] 3387 	push	ar1
      001272 C0 00            [24] 3388 	push	ar0
      001274 12r00r00         [24] 3389 	lcall	__modsint
      001277 AA 82            [24] 3390 	mov	r2,dpl
      001279 D0 00            [24] 3391 	pop	ar0
      00127B D0 01            [24] 3392 	pop	ar1
      00127D D0 04            [24] 3393 	pop	ar4
      00127F D0 05            [24] 3394 	pop	ar5
      001281 D0 06            [24] 3395 	pop	ar6
      001283 D0 07            [24] 3396 	pop	ar7
      001285 74 41            [12] 3397 	mov	a,#0x41
      001287 2A               [12] 3398 	add	a,r2
      001288 88 82            [24] 3399 	mov	dpl,r0
      00128A 8E 83            [24] 3400 	mov	dph,r6
      00128C 8F F0            [24] 3401 	mov	b,r7
      00128E 12r00r00         [24] 3402 	lcall	__gptrput
                                   3403 ;	uart.c:467: return total_chars - 1;
      001291 D0 03            [24] 3404 	pop	ar3
      001293 D0 02            [24] 3405 	pop	ar2
      001295 D0 01            [24] 3406 	pop	ar1
                                   3407 ;	uart.c:462: str[i] = 'A' + (rem % 10);
      001297                       3408 00110$:
                                   3409 ;	uart.c:464: num = num / 16;
      001297 90r00r45         [24] 3410 	mov	dptr,#_uint_to_hexstr_PARM_3
      00129A E0               [24] 3411 	movx	a,@dptr
      00129B FE               [12] 3412 	mov	r6,a
      00129C A3               [24] 3413 	inc	dptr
      00129D E0               [24] 3414 	movx	a,@dptr
      00129E C4               [12] 3415 	swap	a
      00129F CE               [12] 3416 	xch	a,r6
      0012A0 C4               [12] 3417 	swap	a
      0012A1 54 0F            [12] 3418 	anl	a,#0x0f
      0012A3 6E               [12] 3419 	xrl	a,r6
      0012A4 CE               [12] 3420 	xch	a,r6
      0012A5 54 0F            [12] 3421 	anl	a,#0x0f
      0012A7 CE               [12] 3422 	xch	a,r6
      0012A8 6E               [12] 3423 	xrl	a,r6
      0012A9 CE               [12] 3424 	xch	a,r6
      0012AA FF               [12] 3425 	mov	r7,a
      0012AB 90r00r45         [24] 3426 	mov	dptr,#_uint_to_hexstr_PARM_3
      0012AE EE               [12] 3427 	mov	a,r6
      0012AF F0               [24] 3428 	movx	@dptr,a
      0012B0 EF               [12] 3429 	mov	a,r7
      0012B1 A3               [24] 3430 	inc	dptr
      0012B2 F0               [24] 3431 	movx	@dptr,a
                                   3432 ;	uart.c:453: for (int i = total_chars - 2; i > 1; i--)
      0012B3 1C               [12] 3433 	dec	r4
      0012B4 BC FF 01         [24] 3434 	cjne	r4,#0xff,00157$
      0012B7 1D               [12] 3435 	dec	r5
      0012B8                       3436 00157$:
      0012B8 02r11rF7         [24] 3437 	ljmp	00113$
      0012BB                       3438 00111$:
                                   3439 ;	uart.c:467: return total_chars - 1;
      0012BB E5*1D            [12] 3440 	mov	a,_uint_to_hexstr_sloc3_1_0
      0012BD 24 02            [12] 3441 	add	a,#0x02
      0012BF FE               [12] 3442 	mov	r6,a
      0012C0 E4               [12] 3443 	clr	a
      0012C1 35*1E            [12] 3444 	addc	a,(_uint_to_hexstr_sloc3_1_0 + 1)
                                   3445 ;	uart.c:468: }
      0012C3 8E 82            [24] 3446 	mov	dpl,r6
      0012C5 F5 83            [12] 3447 	mov	dph,a
      0012C7 22               [24] 3448 	ret
                                   3449 	.area CSEG    (CODE)
                                   3450 	.area CONST   (CODE)
                                   3451 	.area CONST   (CODE)
      000000                       3452 ___str_0:
      000000 0D                    3453 	.db 0x0d
      000001 0A                    3454 	.db 0x0a
      000002 0D                    3455 	.db 0x0d
      000003 0A                    3456 	.db 0x0a
      000004 09                    3457 	.db 0x09
      000005 20 2A 2A 2A 20 43 6F  3458 	.ascii " *** Command for adding a buffer ***"
             6D 6D 61 6E 64 20 66
             6F 72 20 61 64 64 69
             6E 67 20 61 20 62 75
             66 66 65 72 20 2A 2A
             2A
      000029 0D                    3459 	.db 0x0d
      00002A 0A                    3460 	.db 0x0a
      00002B 00                    3461 	.db 0x00
                                   3462 	.area CSEG    (CODE)
                                   3463 	.area CONST   (CODE)
      00002C                       3464 ___str_1:
      00002C 0D                    3465 	.db 0x0d
      00002D 0A                    3466 	.db 0x0a
      00002E 09                    3467 	.db 0x09
      00002F 08                    3468 	.db 0x08
      000030 3E 20 53 70 65 63 69  3469 	.ascii "> Specify buffer size to be allocated (30 bytes to 300 bytes"
             66 79 20 62 75 66 66
             65 72 20 73 69 7A 65
             20 74 6F 20 62 65 20
             61 6C 6C 6F 63 61 74
             65 64 20 28 33 30 20
             62 79 74 65 73 20 74
             6F 20 33 30 30 20 62
             79 74 65 73
      00006C 29 3A 20              3470 	.ascii "): "
      00006F 00                    3471 	.db 0x00
                                   3472 	.area CSEG    (CODE)
                                   3473 	.area CONST   (CODE)
      000070                       3474 ___str_2:
      000070 09                    3475 	.db 0x09
      000071 20 45 72 72 6F 72 3A  3476 	.ascii " Error: Invalid size"
             20 49 6E 76 61 6C 69
             64 20 73 69 7A 65
      000085 00                    3477 	.db 0x00
                                   3478 	.area CSEG    (CODE)
                                   3479 	.area CONST   (CODE)
      000086                       3480 ___str_3:
      000086 0D                    3481 	.db 0x0d
      000087 0A                    3482 	.db 0x0a
      000088 09                    3483 	.db 0x09
      000089 20 2D 20 2D 20 2D 20  3484 	.ascii " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
             2D 20 2D 20 2D 20 2D
             20 2D 20 2D 20 2D 20
             2D 20 2D 20 2D 20 2D
             20 2D 20 2D 20 2D 20
             2D 20 2D 20 2D 20 2D
             20 2D 20 2D 20 2D 20
             2D 20 2D 20 2D 20 2D
             20 2D 20 2D
      0000C5 20 2D                 3485 	.ascii " -"
      0000C7 00                    3486 	.db 0x00
                                   3487 	.area CSEG    (CODE)
                                   3488 	.area CONST   (CODE)
      0000C8                       3489 ___str_4:
      0000C8 09                    3490 	.db 0x09
      0000C9 20 45 72 72 6F 72 3A  3491 	.ascii " Error: Out of memory, free some buffers to continue"
             20 4F 75 74 20 6F 66
             20 6D 65 6D 6F 72 79
             2C 20 66 72 65 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 20 74
             6F 20 63 6F 6E 74 69
             6E 75 65
      0000FD 00                    3492 	.db 0x00
                                   3493 	.area CSEG    (CODE)
                                   3494 	.area CONST   (CODE)
      0000FE                       3495 ___str_5:
      0000FE 09                    3496 	.db 0x09
      0000FF 45 72 72 6F 72 3A 20  3497 	.ascii "Error: buffer could not be added"
             62 75 66 66 65 72 20
             63 6F 75 6C 64 20 6E
             6F 74 20 62 65 20 61
             64 64 65 64
      00011F 0D                    3498 	.db 0x0d
      000120 0A                    3499 	.db 0x0a
      000121 00                    3500 	.db 0x00
                                   3501 	.area CSEG    (CODE)
                                   3502 	.area CONST   (CODE)
      000122                       3503 ___str_6:
      000122 09                    3504 	.db 0x09
      000123 45 72 72 6F 72 3A 20  3505 	.ascii "Error: Failed allocating memory"
             46 61 69 6C 65 64 20
             61 6C 6C 6F 63 61 74
             69 6E 67 20 6D 65 6D
             6F 72 79
      000142 0D                    3506 	.db 0x0d
      000143 0A                    3507 	.db 0x0a
      000144 00                    3508 	.db 0x00
                                   3509 	.area CSEG    (CODE)
                                   3510 	.area CONST   (CODE)
      000145                       3511 ___str_7:
      000145 09                    3512 	.db 0x09
      000146 4E 65 77 20 62 75 66  3513 	.ascii "New buffer has been created"
             66 65 72 20 68 61 73
             20 62 65 65 6E 20 63
             72 65 61 74 65 64
      000161 0D                    3514 	.db 0x0d
      000162 0A                    3515 	.db 0x0a
      000163 00                    3516 	.db 0x00
                                   3517 	.area CSEG    (CODE)
                                   3518 	.area CONST   (CODE)
      000164                       3519 ___str_8:
      000164 0D                    3520 	.db 0x0d
      000165 0A                    3521 	.db 0x0a
      000166 0D                    3522 	.db 0x0d
      000167 0A                    3523 	.db 0x0a
      000168 09                    3524 	.db 0x09
      000169 09                    3525 	.db 0x09
      00016A 2D 2D 2D 2D 2D 2D 2D  3526 	.ascii "-------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000183 00                    3527 	.db 0x00
                                   3528 	.area CSEG    (CODE)
                                   3529 	.area CONST   (CODE)
      000184                       3530 ___str_9:
      000184 0D                    3531 	.db 0x0d
      000185 0A                    3532 	.db 0x0a
      000186 09                    3533 	.db 0x09
      000187 09                    3534 	.db 0x09
      000188 7C 62 75 66 66 65 72  3535 	.ascii "|buffer id|"
             20 69 64 7C
      000193 09                    3536 	.db 0x09
      000194 73 69 7A 65           3537 	.ascii "size"
      000198 09                    3538 	.db 0x09
      000199 7C                    3539 	.ascii "|"
      00019A 00                    3540 	.db 0x00
                                   3541 	.area CSEG    (CODE)
                                   3542 	.area CONST   (CODE)
      00019B                       3543 ___str_10:
      00019B 0D                    3544 	.db 0x0d
      00019C 0A                    3545 	.db 0x0a
      00019D 09                    3546 	.db 0x09
      00019E 09                    3547 	.db 0x09
      00019F 2D 2D 2D 2D 2D 2D 2D  3548 	.ascii "-------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0001B8 00                    3549 	.db 0x00
                                   3550 	.area CSEG    (CODE)
                                   3551 	.area CONST   (CODE)
      0001B9                       3552 ___str_11:
      0001B9 0D                    3553 	.db 0x0d
      0001BA 0A                    3554 	.db 0x0a
      0001BB 09                    3555 	.db 0x09
      0001BC 09                    3556 	.db 0x09
      0001BD 7C 20 20 20 20 25 64  3557 	.ascii "|    %d    |"
             20 20 20 20 7C
      0001C9 09                    3558 	.db 0x09
      0001CA 25 64                 3559 	.ascii "%d"
      0001CC 09                    3560 	.db 0x09
      0001CD 7C                    3561 	.ascii "|"
      0001CE 00                    3562 	.db 0x00
                                   3563 	.area CSEG    (CODE)
                                   3564 	.area CONST   (CODE)
      0001CF                       3565 ___str_12:
      0001CF 20 3C 2D 2D 2D 2D 2D  3566 	.ascii " <----- Newly added"
             20 4E 65 77 6C 79 20
             61 64 64 65 64
      0001E2 00                    3567 	.db 0x00
                                   3568 	.area CSEG    (CODE)
                                   3569 	.area CONST   (CODE)
      0001E3                       3570 ___str_13:
      0001E3 0D                    3571 	.db 0x0d
      0001E4 0A                    3572 	.db 0x0a
      0001E5 09                    3573 	.db 0x09
      0001E6 09                    3574 	.db 0x09
      0001E7 2D 2D 2D 2D 2D 2D 2D  3575 	.ascii "-------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000200 0D                    3576 	.db 0x0d
      000201 0A                    3577 	.db 0x0a
      000202 00                    3578 	.db 0x00
                                   3579 	.area CSEG    (CODE)
                                   3580 	.area CONST   (CODE)
      000203                       3581 ___str_14:
      000203 0D                    3582 	.db 0x0d
      000204 0A                    3583 	.db 0x0a
      000205 0D                    3584 	.db 0x0d
      000206 0A                    3585 	.db 0x0a
      000207 09                    3586 	.db 0x09
      000208 20 2A 2A 2A 20 43 6F  3587 	.ascii " *** Command for removing a buffer ***"
             6D 6D 61 6E 64 20 66
             6F 72 20 72 65 6D 6F
             76 69 6E 67 20 61 20
             62 75 66 66 65 72 20
             2A 2A 2A
      00022E 0D                    3588 	.db 0x0d
      00022F 0A                    3589 	.db 0x0a
      000230 00                    3590 	.db 0x00
                                   3591 	.area CSEG    (CODE)
                                   3592 	.area CONST   (CODE)
      000231                       3593 ___str_15:
      000231 0D                    3594 	.db 0x0d
      000232 0A                    3595 	.db 0x0a
      000233 09                    3596 	.db 0x09
      000234 08                    3597 	.db 0x08
      000235 3E 20 53 70 65 63 69  3598 	.ascii "> Specify buffer to be delated (select id from the list): "
             66 79 20 62 75 66 66
             65 72 20 74 6F 20 62
             65 20 64 65 6C 61 74
             65 64 20 28 73 65 6C
             65 63 74 20 69 64 20
             66 72 6F 6D 20 74 68
             65 20 6C 69 73 74 29
             3A 20
      00026F 00                    3599 	.db 0x00
                                   3600 	.area CSEG    (CODE)
                                   3601 	.area CONST   (CODE)
      000270                       3602 ___str_16:
      000270 0D                    3603 	.db 0x0d
      000271 0A                    3604 	.db 0x0a
      000272 0D                    3605 	.db 0x0d
      000273 0A                    3606 	.db 0x0a
      000274 09                    3607 	.db 0x09
      000275 20 2A 2A 2A 20 43 6F  3608 	.ascii " *** Command for a query ***"
             6D 6D 61 6E 64 20 66
             6F 72 20 61 20 71 75
             65 72 79 20 2A 2A 2A
      000291 0D                    3609 	.db 0x0d
      000292 0A                    3610 	.db 0x0a
      000293 00                    3611 	.db 0x00
                                   3612 	.area CSEG    (CODE)
                                   3613 	.area CONST   (CODE)
      000294                       3614 ___str_17:
      000294 0D                    3615 	.db 0x0d
      000295 0A                    3616 	.db 0x0a
      000296 0D                    3617 	.db 0x0d
      000297 0A                    3618 	.db 0x0a
      000298 09                    3619 	.db 0x09
      000299 09                    3620 	.db 0x09
      00029A 2D 2D 2D 2D 2D 2D 2D  3621 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0002D6 2D 2D 2D 2D 2D        3622 	.ascii "-----"
      0002DB 00                    3623 	.db 0x00
                                   3624 	.area CSEG    (CODE)
                                   3625 	.area CONST   (CODE)
      0002DC                       3626 ___str_18:
      0002DC 0D                    3627 	.db 0x0d
      0002DD 0A                    3628 	.db 0x0a
      0002DE 09                    3629 	.db 0x09
      0002DF 09                    3630 	.db 0x09
      0002E0 7C 20 42 75 66 66 65  3631 	.ascii "| Buffer id | start-addr | end-addr | nStorageChar | free-sp"
             72 20 69 64 20 7C 20
             73 74 61 72 74 2D 61
             64 64 72 20 7C 20 65
             6E 64 2D 61 64 64 72
             20 7C 20 6E 53 74 6F
             72 61 67 65 43 68 61
             72 20 7C 20 66 72 65
             65 2D 73 70
      00031C 61 63 65 20 7C        3632 	.ascii "ace |"
      000321 09                    3633 	.db 0x09
      000322 0D                    3634 	.db 0x0d
      000323 0A                    3635 	.db 0x0a
      000324 00                    3636 	.db 0x00
                                   3637 	.area CSEG    (CODE)
                                   3638 	.area CONST   (CODE)
      000325                       3639 ___str_19:
      000325 0D                    3640 	.db 0x0d
      000326 0A                    3641 	.db 0x0a
      000327 09                    3642 	.db 0x09
      000328 09                    3643 	.db 0x09
      000329 2D 2D 2D 2D 2D 2D 2D  3644 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000365 2D 2D 2D 2D 2D        3645 	.ascii "-----"
      00036A 00                    3646 	.db 0x00
                                   3647 	.area CSEG    (CODE)
                                   3648 	.area CONST   (CODE)
      00036B                       3649 ___str_20:
      00036B 0D                    3650 	.db 0x0d
      00036C 0A                    3651 	.db 0x0a
      00036D 09                    3652 	.db 0x09
      00036E 09                    3653 	.db 0x09
      00036F 7C 25 31 30 64 20 7C  3654 	.ascii "|%10d |   %11p |%9p |%13d |%11d |"
             20 20 20 25 31 31 70
             20 7C 25 39 70 20 7C
             25 31 33 64 20 7C 25
             31 31 64 20 7C
      000390 00                    3655 	.db 0x00
                                   3656 	.area CSEG    (CODE)
                                   3657 	.area CONST   (CODE)
      000391                       3658 ___str_21:
      000391 0D                    3659 	.db 0x0d
      000392 0A                    3660 	.db 0x0a
      000393 09                    3661 	.db 0x09
      000394 09                    3662 	.db 0x09
      000395 2D 2D 2D 2D 2D 2D 2D  3663 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0003D1 2D 2D 2D 2D 2D        3664 	.ascii "-----"
      0003D6 0D                    3665 	.db 0x0d
      0003D7 0A                    3666 	.db 0x0a
      0003D8 00                    3667 	.db 0x00
                                   3668 	.area CSEG    (CODE)
                                   3669 	.area CONST   (CODE)
      0003D9                       3670 ___str_22:
      0003D9 0D                    3671 	.db 0x0d
      0003DA 0A                    3672 	.db 0x0a
      0003DB 0D                    3673 	.db 0x0d
      0003DC 0A                    3674 	.db 0x0a
      0003DD 09                    3675 	.db 0x09
      0003DE 42 75 66 66 65 72 20  3676 	.ascii "Buffer 0 contents: "
             30 20 63 6F 6E 74 65
             6E 74 73 3A 20
      0003F1 0D                    3677 	.db 0x0d
      0003F2 0A                    3678 	.db 0x0a
      0003F3 0D                    3679 	.db 0x0d
      0003F4 0A                    3680 	.db 0x0a
      0003F5 00                    3681 	.db 0x00
                                   3682 	.area CSEG    (CODE)
                                   3683 	.area CONST   (CODE)
      0003F6                       3684 ___str_23:
      0003F6 0D                    3685 	.db 0x0d
      0003F7 0A                    3686 	.db 0x0a
      0003F8 09                    3687 	.db 0x09
      0003F9 09                    3688 	.db 0x09
      0003FA 00                    3689 	.db 0x00
                                   3690 	.area CSEG    (CODE)
                                   3691 	.area CONST   (CODE)
      0003FB                       3692 ___str_24:
      0003FB 25 63                 3693 	.ascii "%c"
      0003FD 00                    3694 	.db 0x00
                                   3695 	.area CSEG    (CODE)
                                   3696 	.area CONST   (CODE)
      0003FE                       3697 ___str_25:
      0003FE 0D                    3698 	.db 0x0d
      0003FF 0A                    3699 	.db 0x0a
      000400 0D                    3700 	.db 0x0d
      000401 0A                    3701 	.db 0x0a
      000402 09                    3702 	.db 0x09
      000403 20 2A 2A 2A 20 43 6F  3703 	.ascii " *** Command for a hexdump ***"
             6D 6D 61 6E 64 20 66
             6F 72 20 61 20 68 65
             78 64 75 6D 70 20 2A
             2A 2A
      000421 0D                    3704 	.db 0x0d
      000422 0A                    3705 	.db 0x0a
      000423 00                    3706 	.db 0x00
                                   3707 	.area CSEG    (CODE)
                                   3708 	.area CONST   (CODE)
      000424                       3709 ___str_26:
      000424 0D                    3710 	.db 0x0d
      000425 0A                    3711 	.db 0x0a
      000426 0D                    3712 	.db 0x0d
      000427 0A                    3713 	.db 0x0a
      000428 09                    3714 	.db 0x09
      000429 20 2A 2A 2A 20 43 6F  3715 	.ascii " *** Command for freeing memory ***"
             6D 6D 61 6E 64 20 66
             6F 72 20 66 72 65 65
             69 6E 67 20 6D 65 6D
             6F 72 79 20 2A 2A 2A
      00044C 0D                    3716 	.db 0x0d
      00044D 0A                    3717 	.db 0x0a
      00044E 00                    3718 	.db 0x00
                                   3719 	.area CSEG    (CODE)
                                   3720 	.area CONST   (CODE)
      00044F                       3721 ___str_27:
      00044F 0D                    3722 	.db 0x0d
      000450 0A                    3723 	.db 0x0a
      000451 0D                    3724 	.db 0x0d
      000452 0A                    3725 	.db 0x0a
      000453 09                    3726 	.db 0x09
      000454 09                    3727 	.db 0x09
      000455 4D 65 6D 6F 72 79 20  3728 	.ascii "Memory has been freed"
             68 61 73 20 62 65 65
             6E 20 66 72 65 65 64
      00046A 0D                    3729 	.db 0x0d
      00046B 0A                    3730 	.db 0x0a
      00046C 0D                    3731 	.db 0x0d
      00046D 0A                    3732 	.db 0x0a
      00046E 00                    3733 	.db 0x00
                                   3734 	.area CSEG    (CODE)
                                   3735 	.area CONST   (CODE)
      00046F                       3736 ___str_28:
      00046F 0D                    3737 	.db 0x0d
      000470 0A                    3738 	.db 0x0a
      000471 2D 2D 2D 2D 2D 2D 2D  3739 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0004AD 2D 2D 2D 2D 2D 2D 2D  3740 	.ascii "----------"
             2D 2D 2D
      0004B7 0D                    3741 	.db 0x0d
      0004B8 0A                    3742 	.db 0x0a
      0004B9 0D                    3743 	.db 0x0d
      0004BA 0A                    3744 	.db 0x0a
      0004BB 00                    3745 	.db 0x00
                                   3746 	.area CSEG    (CODE)
                                   3747 	.area CONST   (CODE)
      0004BC                       3748 ___str_29:
      0004BC 0D                    3749 	.db 0x0d
      0004BD 0A                    3750 	.db 0x0a
      0004BE 0D                    3751 	.db 0x0d
      0004BF 0A                    3752 	.db 0x0a
      0004C0 09                    3753 	.db 0x09
      0004C1 20 45 72 72 6F 72 3A  3754 	.ascii " Error: Received invalid command '%c'"
             20 52 65 63 65 69 76
             65 64 20 69 6E 76 61
             6C 69 64 20 63 6F 6D
             6D 61 6E 64 20 27 25
             63 27
      0004E6 0D                    3755 	.db 0x0d
      0004E7 0A                    3756 	.db 0x0a
      0004E8 00                    3757 	.db 0x00
                                   3758 	.area CSEG    (CODE)
                                   3759 	.area CONST   (CODE)
      0004E9                       3760 ___str_30:
      0004E9 45 6E 74 65 72 20 63  3761 	.ascii "Enter command (+, -, ?, =, @) or input: "
             6F 6D 6D 61 6E 64 20
             28 2B 2C 20 2D 2C 20
             3F 2C 20 3D 2C 20 40
             29 20 6F 72 20 69 6E
             70 75 74 3A 20
      000511 00                    3762 	.db 0x00
                                   3763 	.area CSEG    (CODE)
                                   3764 	.area CONST   (CODE)
      000512                       3765 ___str_32:
      000512 0D                    3766 	.db 0x0d
      000513 0A                    3767 	.db 0x0a
      000514 09                    3768 	.db 0x09
      000515 09                    3769 	.db 0x09
      000516 20 45 72 72 6F 72 3A  3770 	.ascii " Error: Re-enter the number: "
             20 52 65 2D 65 6E 74
             65 72 20 74 68 65 20
             6E 75 6D 62 65 72 3A
             20
      000533 00                    3771 	.db 0x00
                                   3772 	.area CSEG    (CODE)
                                   3773 	.area CONST   (CODE)
      000534                       3774 ___str_33:
      000534 0D                    3775 	.db 0x0d
      000535 0A                    3776 	.db 0x0a
      000536 09                    3777 	.db 0x09
      000537 09                    3778 	.db 0x09
      000538 20 45 72 72 6F 72 3A  3779 	.ascii " Error: Reading a number failed, Reached maximum length supp"
             20 52 65 61 64 69 6E
             67 20 61 20 6E 75 6D
             62 65 72 20 66 61 69
             6C 65 64 2C 20 52 65
             61 63 68 65 64 20 6D
             61 78 69 6D 75 6D 20
             6C 65 6E 67 74 68 20
             73 75 70 70
      000574 6F 72 74 65 64        3780 	.ascii "orted"
      000579 00                    3781 	.db 0x00
                                   3782 	.area CSEG    (CODE)
                                   3783 	.area CONST   (CODE)
      00057A                       3784 ___str_34:
      00057A 0D                    3785 	.db 0x0d
      00057B 0A                    3786 	.db 0x0a
      00057C 09                    3787 	.db 0x09
      00057D 09                    3788 	.db 0x09
      00057E 7C 20 62 75 66 66 65  3789 	.ascii "| buffer id |"
             72 20 69 64 20 7C
      00058B 09                    3790 	.db 0x09
      00058C 73 69 7A 65           3791 	.ascii "size"
      000590 09                    3792 	.db 0x09
      000591 7C                    3793 	.ascii "|"
      000592 00                    3794 	.db 0x00
                                   3795 	.area CSEG    (CODE)
                                   3796 	.area CONST   (CODE)
      000593                       3797 ___str_37:
      000593 0D                    3798 	.db 0x0d
      000594 0A                    3799 	.db 0x0a
      000595 0D                    3800 	.db 0x0d
      000596 0A                    3801 	.db 0x0a
      000597 09                    3802 	.db 0x09
      000598 09                    3803 	.db 0x09
      000599 4E 6F 20 73 74 6F 72  3804 	.ascii "No stored characters in the buffer"
             65 64 20 63 68 61 72
             61 63 74 65 72 73 20
             69 6E 20 74 68 65 20
             62 75 66 66 65 72
      0005BB 0D                    3805 	.db 0x0d
      0005BC 0A                    3806 	.db 0x0a
      0005BD 00                    3807 	.db 0x00
                                   3808 	.area CSEG    (CODE)
                                   3809 	.area CONST   (CODE)
      0005BE                       3810 ___str_38:
      0005BE 0D                    3811 	.db 0x0d
      0005BF 0A                    3812 	.db 0x0a
      0005C0 0D                    3813 	.db 0x0d
      0005C1 0A                    3814 	.db 0x0a
      0005C2 09                    3815 	.db 0x09
      0005C3 09                    3816 	.db 0x09
      0005C4 7C 3D 3D 3D 3D 3D 3D  3817 	.ascii "|======================================================="
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
      0005FC 00                    3818 	.db 0x00
                                   3819 	.area CSEG    (CODE)
                                   3820 	.area CONST   (CODE)
      0005FD                       3821 ___str_39:
      0005FD 7C                    3822 	.ascii "|"
      0005FE 0D                    3823 	.db 0x0d
      0005FF 0A                    3824 	.db 0x0a
      000600 09                    3825 	.db 0x09
      000601 09                    3826 	.db 0x09
      000602 7C 20                 3827 	.ascii "| "
      000604 00                    3828 	.db 0x00
                                   3829 	.area CSEG    (CODE)
                                   3830 	.area CONST   (CODE)
      000605                       3831 ___str_40:
      000605 3A 20                 3832 	.ascii ": "
      000607 00                    3833 	.db 0x00
                                   3834 	.area CSEG    (CODE)
                                   3835 	.area CONST   (CODE)
      000608                       3836 ___str_41:
      000608 20                    3837 	.ascii " "
      000609 00                    3838 	.db 0x00
                                   3839 	.area CSEG    (CODE)
                                   3840 	.area CONST   (CODE)
      00060A                       3841 ___str_42:
      00060A 0D                    3842 	.db 0x0d
      00060B 0A                    3843 	.db 0x0a
      00060C 09                    3844 	.db 0x09
      00060D 09                    3845 	.db 0x09
      00060E 7C 3D 3D 3D 3D 3D 3D  3846 	.ascii "|=======================================================|"
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             3D 3D 3D 3D 3D 3D 3D
             7C
      000647 0D                    3847 	.db 0x0d
      000648 0A                    3848 	.db 0x0a
      000649 00                    3849 	.db 0x00
                                   3850 	.area CSEG    (CODE)
                                   3851 	.area XINIT   (CODE)
      000000                       3852 __xinit__buf_number:
      000000 00 00                 3853 	.byte #0x00, #0x00	;  0
      000002                       3854 __xinit__total_malloced_data:
      000002 00 00                 3855 	.byte #0x00, #0x00	;  0
                                   3856 	.area CABS    (ABS,CODE)
